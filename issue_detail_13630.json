{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen we request `sort=True` in a `cudf.merge`, the current implementation does:\r\n\r\n1. deduce left and right join columns\r\n2. join, producing left and right gather maps\r\n3. gather left and right columns, and merge results\r\n4. deduce key columns to sort by\r\n5. argsort the key columns\r\n6. gather the result using the argsort return value\r\n\r\nTrivially, steps 5 and 6 can be merged into a `sort_by_key` (that's #13557). However, this order probably does more data movement than it needs to. This makes two calls to gather, and one sort-by-key, at the cost of moving the full dataframe through memory twice (once in step 3, once in step 6).\r\n\r\nInstead, we could (if sorting) first gather only the key columns we will sort by, argsort those and then use that ordering to sort the left and right gather maps.\r\n\r\n1. deduce left and right join columns\r\n2. join, producing left and right gather maps\r\n3. deduce left and right key columns to order by\r\n4. gather left key columns with left map, right key columns with right map\r\n5. sort-by-key the left and right gather maps with the columns from step 4\r\n6. gather left and right columns with new gather maps and merge\r\n\r\nThis makes four calls to gather and one sort-by-key, but only moves the full dataframe through memory once (in step 6). For dataframes with many non-key columns this might well be an advantage. The latency will be a bit higher, but the total data movement will be less. For example, consider (for simplicity) a left join with one key column and 10 total columns in both left and right dataframes.\r\n\r\nThe current approach (once the left and right gather maps have been determined) gathers 20 columns in step 3, argsorts one column, then gathers 20 columns again (sort-by-key merges the sort + gather into argsort + gather at the libcudf level).\r\n\r\nThe proposed alternative would gather 1 column in step 4, sorts-by-key two columns (the two gather maps), then gathers 20 columns. So we move effectively 23 columns through memory rather than 41.","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-06-28T11:56:18Z","id":"I_kwDOBWUGps5qBivD","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":null,"number":13630,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[ENH] benchmark gather then sort vs sort then gather in merge with `sort=True`","updatedAt":"2023-06-28T11:56:18Z","url":"https://github.com/rapidsai/cudf/issues/13630"}
