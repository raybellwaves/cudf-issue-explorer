{"assignees":[],"author":{"id":"MDQ6VXNlcjg1MjE0OTU3","is_bot":false,"login":"Rhett-Ying","name":"Rhett Ying"},"body":"**What is your question?**\r\nI am wondering if `cudf` has native or built-in support for aggregate function that run against vector data. Namley, text/image embeddings are stored in the column of csv/parquet file. And I'd like to run various aggregate functions such as `mean`, `max` and so on. All these operations are element-wise, namely, it returns the mean of all the values in same index and return an array with same lenght. What's more, I'd like to run K-Nearest-Neighbor search as well.\r\n\r\nIf not natively supported, how to achieve these operations with performance efficient?\r\n\r\nexample code:\r\n```\r\nimport cudf\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# Sample DataFrame with Pandas to cuDF conversion\r\ndata = {\r\n    'category': ['A', 'A', 'B', 'B'],\r\n    'values': [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9]), np.array([10, 11, 12])]\r\n}\r\npdf = pd.DataFrame(data)\r\ndf = cudf.DataFrame.from_pandas(pdf)\r\n\r\nresult = df.groupby('category').agg({'values': ['sum', 'mean']})\r\n\r\nprint(result)\r\n\r\n# Expected output\r\n'''\r\ncategory\r\nA     [2.5, 3.5, 4.5]\r\nB    [8.5, 9.5, 10.5]\r\nName: values, dtype: object\r\n'''\r\n```","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5-cgbI","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"This kind of operations is not natively supported, unfortunately. The fundamental issue is that pandas allows you to put arbitrary objects into a Series/DataFrame and it will run Python operations on them. In this case, since you put numpy arrays in, pandas will happily just leave them as numpy arrays and use binary operations on numpy array so this works as expected. cudf does not support arbitrary objects in this way, so we have to be a bit more clever about rearranging the data ourselves to handle this kind of operation. Per-row array data is supported through the list dtype, which is what your'e getting in the `from_pandas` call in your snippet. To work with that in vectorized fashion, the typical approach is to use the [`explode` method, which flattens out the data](https://docs.rapids.ai/api/cudf/stable/user_guide/api_docs/api/cudf.dataframe.explode/). Here is a snippet that gives you an essentially equivalent result (slight differences in column names etc):\r\n```\r\nimport cudf\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# Sample DataFrame with Pandas to cuDF conversion\r\ndata = {\r\n    'category': ['A', 'A', 'B', 'B'],\r\n    'values': [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9]), np.array([10, 11, 12])]\r\n}\r\npdf = pd.DataFrame(data)\r\ndf = cudf.DataFrame.from_pandas(pdf)\r\n\r\nprint(\"pandas result\")\r\nprint(pdf.groupby('category').agg({'values': ['sum', 'mean']}))\r\nprint()\r\n\r\nexploded_values = df[[\"values\"]].explode(\"values\")\r\ndf = df[[\"category\"]].merge(exploded_values, left_index=True, right_index=True)\r\ndf[\"index\"] = np.tile(np.arange(3), 4)\r\n\r\nprint(\"cudf result\")\r\nprint(df.groupby([\"category\", \"index\"]).agg({\"values\": [\"sum\", \"mean\"]}).groupby(\"category\").collect())\r\n```\r\n\r\nThis outputs:\r\n```\r\npandas result\r\n                values                  \r\n                   sum              mean\r\ncategory                                \r\nA            [5, 7, 9]   [2.5, 3.5, 4.5]\r\nB         [17, 19, 21]  [8.5, 9.5, 10.5]\r\n\r\ncudf result\r\n         (values, sum)    (values, mean)\r\ncategory                                \r\nA            [5, 9, 7]   [2.5, 4.5, 3.5]\r\nB         [19, 17, 21]  [9.5, 8.5, 10.5]\r\n```","createdAt":"2024-05-20T23:34:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15741#issuecomment-2121402056","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-lsop","author":{"login":"Rhett-Ying"},"authorAssociation":"NONE","body":"@vyasr Thanks for your suggestion. The suggestion you gave above is equivalent to **splitting array into separate columns, then apply sum()/mean() on each column, and merge the output back into an array**?","createdAt":"2024-05-22T03:44:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15741#issuecomment-2123811369","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-upl4","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Yes, that is basically equivalent. You cannot operate on the numpy arrays directly, but assuming they are all of the same length you could split them into multiple columns if you have control of that on construction. Otherwise the list-based approach I showed is the way you could process it if you have to take the numpy array-based inputs from pandas as-is.","createdAt":"2024-05-23T03:21:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15741#issuecomment-2126158200","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5_dhrl","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@Rhett-Ying does the above solution address your needs?","createdAt":"2024-05-30T00:13:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15741#issuecomment-2138446565","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5_dlN3","author":{"login":"Rhett-Ying"},"authorAssociation":"NONE","body":"@vyasr Thanks for your suggestion. One major concern for me is the performance. Especially when I want to apply more advanced operations on vector data such as K-Nearest-Neighbor Search. Should I leverage tools like [CUVS](https://github.com/rapidsai/cuvs) for operations on vector data?","createdAt":"2024-05-30T00:31:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15741#issuecomment-2138461047","viewerDidAuthor":false}],"createdAt":"2024-05-14T03:35:37Z","id":"I_kwDOBWUGps6IwCUZ","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjQ=","name":"question","description":"Further information is requested","color":"D4C5F9"}],"milestone":null,"number":15741,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[QST] aggregate function that operates on vector(array of numeric) data","updatedAt":"2024-05-30T00:31:21Z","url":"https://github.com/rapidsai/cudf/issues/15741"}
