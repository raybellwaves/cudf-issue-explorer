{"assignees":[{"id":"MDQ6VXNlcjQ1Nzk1OTkx","login":"davidwendt","name":"David Wendt"}],"author":{"id":"MDQ6VXNlcjEzNjA3NjY=","is_bot":false,"login":"jlowe","name":"Jason Lowe"},"body":"**Is your feature request related to a problem? Please describe.**\r\nRegular expression processing can require a significant amount of temporary memory.  The RAPIDS Accelerator for Apache Spark needs the ability to control how much GPU memory is used for these operations in order to avoid excessive spilling or GPU out of memory errors when the user provides a particularly complicated regex pattern and/or large input data.\r\n\r\n**Describe the solution you'd like**\r\nThe libcudf regular expression APIs accept an optional parameter to be specified which is an upper bound on the amount of temporary GPU memory to use for regular expression processing.  If the value is below the \"natural\" size for full concurrency, the algorithm would reduce the concurrency to fit within the memory bound.  I would expect there would be a lower-limit below which regex processing would not be possible within the requested memory limit.\r\n\r\n**Describe alternatives you've considered**\r\nInstead of APIs focused on limiting memory there could be APIs to report what will be used without the ability to control it, such as the one implemented in #10808.  This type of API does not allow the caller to tradeoff between GPU memory usage and GPU performance, as it either will fit in GPU memory or it won't.  If reported as too big the RAPIDS Accelerator would be forced to fallback to the CPU to perform the regex processing (with the requisite columnar to row formatted data transform and back).\r\n\r\nThe RAPIDS Accelerator currently does not support falling back to the CPU after query planning has completed on the Spark driver (which does not have a GPU), and the query planning does not have access to the string data to search (only the regex pattern to use).  Even with a memory size reporting API, without the input data the API would have to be a worst-case estimate that could cause an unnecessary fallback to the CPU.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5EvaTh","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-06-12T20:03:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10852#issuecomment-1153279201","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5E3Bvw","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"This is still wanted","createdAt":"2022-06-14T14:32:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10852#issuecomment-1155275760","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5E3GBh","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"@revans2 And what about this one? https://github.com/rapidsai/cudf/pull/10808#discussion_r876183672","createdAt":"2022-06-14T14:45:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10852#issuecomment-1155293281","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Fof4d","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Closing after [discussion](https://github.com/rapidsai/cudf/pull/10808#discussion_r906356500) in #10808","createdAt":"2022-06-28T05:32:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10852#issuecomment-1168244253","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5FqC4n","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"The #10808 was the API that I built that was not useful. This feature describes the actual desired API from Spark.","createdAt":"2022-06-28T12:20:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/10852#issuecomment-1168649767","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5IYwKd","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-08-14T21:03:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10852#issuecomment-1214448285","viewerDidAuthor":false}],"createdAt":"2022-05-13T19:12:00Z","id":"I_kwDOBWUGps5JpaTc","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNTE1NjE2MjUz","name":"strings","description":"strings issues (C++ and Python)","color":"0e8a16"}],"milestone":null,"number":10852,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Ability to control the amount of temporary memory used for regex expressions","updatedAt":"2024-02-23T18:42:38Z","url":"https://github.com/rapidsai/cudf/issues/10852"}
