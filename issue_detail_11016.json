{"assignees":[],"author":{"id":"MDQ6VXNlcjc0MTY5MzU=","is_bot":false,"login":"ttnghia","name":"Nghia Truong"},"body":"Currently, `cudf::contains` implements two separate code paths for non-nested types and nested types. That requires more effort to maintain all of them, comparing to just have one code path that can handle both.\r\n\r\nRecently, there was an attempt to use just one code path to handle all data type (ref: https://github.com/rapidsai/cudf/pull/10770#discussion_r880980883) in groupby key hashing, which reported no performance regression on basic data types. As such, we should also test and try to unify the two code paths of `cudf::contains`.\r\n\r\nHaving just one code path that handles everything, maintenance will be much easier.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5EIZg3","author":{"login":"ttnghia"},"authorAssociation":"CONTRIBUTOR","body":"There was mentioned that the current cudf's customized data structure `unordered_multiset` is still much faster than `cuco::static_map`. Since the code path for handling nested types relies on `cuco::static_map`, we can only address this issue once we can safely switch to using `cuco::static_map` without much performance regression.","createdAt":"2022-06-01T02:30:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11016#issuecomment-1143052343","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5HdTo9","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-07-29T04:21:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11016#issuecomment-1198864957","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5MuHNY","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"The other part of what needs to happen here (in addition to resolving performance regressions caused by differences between `cuco::static_map` and `concurrent_unordered_map`) is to introduce the same sort of `has_nested` templating to the equality comparators as I did for the lexicographic comparator. Then, rather than maintaining a completely separate code path in contains where one uses the old comparator and one uses the new one, we could use the same comparator in both cases.","createdAt":"2022-10-21T15:59:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11016#issuecomment-1287156568","viewerDidAuthor":false}],"createdAt":"2022-06-01T01:45:49Z","id":"I_kwDOBWUGps5KyIu0","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3OTIx","name":"proposal","description":"Change current process or code","color":"2a2c89"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":2,"title":"List and Struct data types and operations","description":"","dueOn":null},"number":11016,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Experiment try to unify implementation of non-nested types and nested types in `cudf::contains`","updatedAt":"2024-02-23T18:42:32Z","url":"https://github.com/rapidsai/cudf/issues/11016"}
