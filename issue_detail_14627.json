{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"**Describe the bug**\r\n\r\n```\r\nimport pandas as pd\r\nfrom cudf.core.column import as_column\r\n\r\ndata = pd.Timestamp(\"2000-01-01\")\r\n\r\nfrom_scalar = as_column(data)\r\nfrom_list = as_column([data])\r\n\r\nassert from_scalar.dtype == from_list.dtype # False\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe resolution should be inferred consistently. Note that `cudf.Scalar(data)` infers the same (nanosecond) resolution as `as_column([data])`.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5um_9C","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"This is because scalar values get handled through:\r\n```\r\nfrom_arrow(pa.array(pd.Series([data]), from_pandas=True))\r\n```\r\n\r\nWhereas a list is handled by\r\n```\r\nfrom_arrow(pa.array([data]))\r\n```\r\n\r\nAnd pyarrow infers a different resolution for the timestamp compared to pandas.\r\n\r\nThis appears to be a bug in pyarrow, which does not pick up the correct nanosecond resolution of pandas timestamp objects, treating them like builtin datetime objects which have microsecond resolution.\r\n\r\nHow do we want to treat this case?\r\n\r\n","createdAt":"2023-12-14T11:58:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14627#issuecomment-1855717186","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5uoBB9","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Can we supply an explicit data type to the `pa.array()` call in the latter case?","createdAt":"2023-12-14T14:46:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14627#issuecomment-1855983741","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5uovt1","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"That requires another round of introspection. I do not know the history of `as_column`. In the case that we don't hit an \"easily handled\" path (arrow/numpy/pandas/cudf/cupy), is there a reason we don't just always go via pandas.Series?","createdAt":"2023-12-14T16:36:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14627#issuecomment-1856174965","viewerDidAuthor":false}],"createdAt":"2023-12-14T11:33:07Z","id":"I_kwDOBWUGps55rvXR","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"}],"milestone":null,"number":14627,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] `as_column` of pandas timestamps delivers different resolution datetime depending on whether we pass a scalar or list","updatedAt":"2024-03-04T15:41:48Z","url":"https://github.com/rapidsai/cudf/issues/14627"}
