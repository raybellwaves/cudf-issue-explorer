{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MjIxMjg5","is_bot":false,"login":"jrhemstad","name":"Jake Hemstad"},"body":"**Is your feature request related to a problem? Please describe.**\r\nThe AST machinery is fundamentally limited in the performance that we can achieve. We should explore using JIT compilation/linking instead. \r\n\r\n**Describe the solution you'd like**\r\n\r\nWe'd explored JIT compilation in the past, but was too slow at the time. A number of things have changed since then:\r\n- NVRTC has made significant improvements in runtime compilation (150ms -> 25ms fixed overhead)\r\n- JIT LTO is a thing now\r\n- NVRTC supports pre-compiled headers now\r\n\r\nAll of these things contribute to the potential for significantly faster runtime compilation.\r\n\r\nThe basic idea would be we pre-compile the mixed join kernel and treat the equality comparator like an extern function.\r\n\r\nThen at runtime, we JIT compile only the comparator. Then we JIT LTO the comparator into the kernel to avoid the cost of the extern function call.\r\n\r\nThat way we aren't JIT compiling the entire kernel, which should further reduce the runtime cost.\r\nWe could even do this without forcing any user-facing changes. We could take the expression tree that a user gives us today and translate that into a string of C++ code that does the operation expressed by the AST.\r\n\r\nFurthermore, by pre-compiling the relevant headers, we can further reduce the runtime costs.  \r\n\r\n**Additional context**\r\n\r\nThere's potential for extending this idea beyond AST stuff.\r\n\r\nAny of the places where we're currently dispatching to different comparator instantiations based on the presence of nested types would also be a prime target for JIT compilation/LTO.\r\n\r\nThe primary benefit there would mostly be compile time/binary size reduction to avoid statically instantiating as many independent code paths.\r\n\r\nThere could be opportunity for performance benefits as well by JIT compiling for only the exact types needed and eliminating the type dispatcher from the critical path in the row-based operators.","closed":false,"closedAt":null,"comments":[],"createdAt":"2024-03-21T16:44:54Z","id":"I_kwDOBWUGps6DK5eL","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"}],"milestone":null,"number":15366,"projectCards":[],"projectItems":[],"reactionGroups":[{"content":"HEART","users":{"totalCount":6}}],"state":"OPEN","title":"[FEA] Consider exploring JIT compilation/LTO to replace AST evaluation","updatedAt":"2024-03-21T16:44:55Z","url":"https://github.com/rapidsai/cudf/issues/15366"}
