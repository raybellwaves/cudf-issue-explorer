{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"Following on from #11640 (specifically https://github.com/rapidsai/cudf/pull/11640#discussion_r961551760) a question arises as to how complete we should make the mypy pre-commit environment in terms of supported typestubs.\r\n\r\nStatus quo:\r\n\r\nThe version of mypy installed via pre-commit only depends on the stdlib typeshed stubs (and after #11640 `types-cachetools`). We set `ignore_missing_imports = True` which means that mypy doesn't complain if it sees an import for something (say numpy) that it can't find. Consequently, any non-importable modules are typed as `Any` (as are all objects, methods, functions, etc... from that module); this is a type that always satisfies any type constraint.\r\n\r\nIn the development environment, all cudf modules _are_ importable, and so a type-checking run using that environment will deduce narrower types for many function calls in cudf. Many of these currently do not type-check, being of the following form: https://mypy-play.net/?mypy=latest&python=3.10&gist=8d3ba6046bb8ca39c6d6b71b442b432c\r\n```python\r\nfrom typing import Any\r\n\r\ndef foo(x: Any) -> Any:\r\n    if isinstance(x, bool):\r\n        y = x\r\n    elif isinstance(x, int):\r\n        y = (True, x)\r\n    else:\r\n        y = x\r\n\r\n    return y\r\n```\r\n\r\nmypy complains about the assignment `y = (True, x)` \"error: Incompatible types in assignment (expression has type \"Tuple[bool, int]\", variable has type \"bool\")\" because it deduces the type of `y` from the first assignment as `bool`.\r\n\r\nThere are various places in the codebase where we do this kind of untagged union dispatch, this could be fixed by explicitly typing all the variables as `Union[a, b, c, ...]` but I am not sure that in the end it would be worth it. If we install `numpy` and the `pandas-stubs` package (which provides type stubs for pandas) then we get about 120 errors of this nature.\r\n\r\nI think that fixing these things is rather difficult, the right approach is to use tagged unions, but there's no support for that in python and any workaround would (I think) make the code unnecessarily non-idiomatic.\r\n\r\nIf we think it's worthwhile pursuing this, I can prepare a draft patch for some of the uncovered typing issues so we can discuss more concretely.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5J6V-Y","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Overall I think you're probably right that this is more work than it's worth, and that it could lead to more complexity and hurdles in setting up the pre-commit environment than we would like (such as if we tried to install a GPU-enabled library like cupy). \r\n\r\nFrom a 10000 foot view, I think the main benefit of doing these checks more is that they could uncover places where our internal dispatch patterns themselves are problematic. In cases where a function accepts an argument of type `Any` that needs to be dealt with differently depending on whether it's a pandas Series or a numpy array, the above style of if statements is probably necessary, but in other cases we may be able to use a single, simpler. ducktyped code path. However, in practice I think that's much more common when the objects being handled are our own objects (e.g. `Series` and `DataFrame` can often be handled identically rather than with separate branches) so I'm not sure how much the extra typing would actually buy us.\r\n\r\nCC @shwina who's spent quite a bit of time with type hinting.","createdAt":"2022-09-07T23:55:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11661#issuecomment-1240031128","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5L09O7","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-10-08T00:16:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11661#issuecomment-1272173499","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-O5ik","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I think we should revisit this after #15190 and once cudf's internals become pure Python and designed around pylibcudf. Cython substantially complicates the issue here, as do the many design issues with our current internals. I suspect that we will be able to do a much better job with type hinting at that stage than we do now. At minimum we will be able to tighten up the typing of our internals (the user-facing objects are still tricky due to the complete flexibility of the pandas API).","createdAt":"2024-05-17T15:21:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11661#issuecomment-2117834916","viewerDidAuthor":false}],"createdAt":"2022-09-07T13:15:29Z","id":"I_kwDOBWUGps5RVuRL","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjQ=","name":"question","description":"Further information is requested","color":"D4C5F9"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":11661,"projectCards":[{"project":{"name":"Other Issues"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[ENH] More type-stubs in the mypy pre-commit environment?","updatedAt":"2024-05-17T15:21:27Z","url":"https://github.com/rapidsai/cudf/issues/11661"}
