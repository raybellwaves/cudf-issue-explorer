{"assignees":[],"author":{"id":"MDQ6VXNlcjMxOTA0MDU=","is_bot":false,"login":"shwina","name":"Ashwin Srinath"},"body":"This seems a fundamental issue with the way cuDF is architected and possibly a `wontfix`, but it's important enough that we should consider solutions - and at the very least document the behaviour.\r\n\r\nIn pandas, `Series.values` (or `Series.array`) gives a reference to the underlying data as some kind of array-like object. Mutations to this object are reflected in the original `Series`:\r\n\r\n```python\r\n\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: s = pd.Series([1, 2, pd.NA])\r\n\r\nIn [3]: a = s.array\r\n\r\nIn [4]: a\r\nOut[4]:\r\n<PandasArray>\r\n[1, 2, <NA>]\r\nLength: 3, dtype: object\r\n\r\nIn [5]: a[:2] = 3\r\n\r\nIn [6]: a\r\nOut[6]:\r\n<PandasArray>\r\n[3, 3, <NA>]\r\nLength: 3, dtype: object\r\n\r\nIn [7]: s\r\nOut[7]:\r\n0       3\r\n1       3\r\n2    <NA>\r\ndtype: object\r\n```\r\n\r\nThis doesn't always work when cudf.pandas is enabled:\r\n\r\n```\r\n\r\nIn [1]: %load_ext cudf.pandas\r\n\r\nIn [2]: import pandas as pd\r\n\r\nIn [3]: s = pd.Series([1, 2, pd.NA])\r\n\r\nIn [4]: a = s.array  # this executes on CPU (because we don't support `.array` for null ints in cuDF)\r\n\r\nIn [5]: a\r\nOut[5]:\r\n<PandasArray>\r\n[1.0, 2.0, nan]\r\nLength: 3, dtype: float64\r\n\r\nIn [6]: s.max()  # this moves `s` from CPU to GPU, but `a` is still on CPU\r\nOut[6]: 2.0\r\n\r\nIn [7]: a[:2] = 3  # this mutates `a`, but since `s` now lives on the GPU it doesn't see that mutation\r\n\r\nIn [8]: s  # `s` is unchanged\r\nOut[8]:\r\n0    1.0\r\n1    2.0\r\n2    NaN\r\ndtype: float64\r\n\r\nIn [9]: a  # `a` is changed\r\nOut[9]:\r\n<PandasArray>\r\n[3.0, 3.0, nan]\r\nLength: 3, dtype: float64\r\n```","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps54WZcR","author":{"login":"mroeschke"},"authorAssociation":"CONTRIBUTOR","body":"Noting that in pandas 3.0, `.values` is going to be read-only, as apart of copy-on-write, so mutations won't be possible\r\n\r\n```python\r\nIn [1]: In [1]: import pandas as pd # pandas main\r\n   ...: \r\n   ...: In [2]: s = pd.Series([1, 2, pd.NA])\r\n\r\nIn [3]: s.values[:2] = 4\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In[3], line 1\r\n----> 1 s.values[:2] = 4\r\n\r\nValueError: assignment destination is read-only\r\n```\r\n\r\nWe have a similar desire for pandas ExtensionArrays (which will affect `.array`) https://github.com/pandas-dev/pandas/issues/58007","createdAt":"2024-03-26T00:08:59Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15385#issuecomment-2019137297","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps54WlKh","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":":tada: nice! ","createdAt":"2024-03-26T00:42:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15385#issuecomment-2019185313","viewerDidAuthor":false}],"createdAt":"2024-03-25T17:20:07Z","id":"I_kwDOBWUGps6DgUfF","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"LA_kwDOBWUGps8AAAABlj4eYg","name":"cudf.pandas","description":"Issues specific to cudf.pandas","color":"984DFB"}],"milestone":{"number":35,"title":"Proxying - cudf.pandas","description":"","dueOn":null},"number":15385,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] In cudf.pandas mode, `.array` or `.values` don't actually return views to the underlying data","updatedAt":"2024-05-16T05:09:20Z","url":"https://github.com/rapidsai/cudf/issues/15385"}
