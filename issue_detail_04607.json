{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MjIxMjg5","is_bot":false,"login":"jrhemstad","name":"Jake Hemstad"},"body":"**Describe the bug**\r\n\r\nPartitioning APIs that partition a table into `n` partitions, like [`hash_partition`](https://github.com/rapidsai/cudf/blob/branch-0.14/cpp/include/cudf/partitioning.hpp#L43) or [`round_robin_partition`](https://github.com/rapidsai/cudf/blob/branch-0.14/cpp/include/cudf/partitioning.hpp#L185), return a single table and a vector of `n+1` offsets that points to the beginning of each partition and where the size of any partition `i` can be determined by `offsets[i+1] - offsets[i]`.\r\n\r\nFor example:\r\n```\r\npartitioned_table = {7}, {}, {3, 8, 9}, {42};\r\noffsets = [0, 1, 1, 4, 5]\r\n```\r\n\r\n\r\nI would expect to be able to trivially pass the output of a partitioning API into an API like [`split`](https://github.com/rapidsai/cudf/blob/branch-0.13/cpp/include/cudf/copying.hpp#L389) or [`slice`](https://github.com/rapidsai/cudf/blob/branch-0.13/cpp/include/cudf/copying.hpp#L358) in order to get a vector of zero-copy `table_view`s for each partition. \r\n\r\nHowever, this is not possible because the expected inputs for `split` or `slice` are incompatible with the `offsets` vector returned from a partitioning API.\r\n\r\n`slice` expects a vector of index pairs:\r\n```\r\n input:   [{10, 12, 14, 16, 18, 20, 22, 24, 26, 28},\r\n           {50, 52, 54, 56, 58, 60, 62, 64, 66, 68}]\r\n indices: {1, 3, 5, 9, 2, 4, 8, 8}\r\n output:  [{{12, 14}, {20, 22, 24, 26}, {14, 16}, {}},\r\n           {{52, 54}, {60, 22, 24, 26}, {14, 16}, {}}]\r\n```\r\n\r\n`split` expects a vector of the split points:\r\n```\r\n input:   {10, 12, 14, 16, 18, 20, 22, 24, 26, 28}\r\n splits:  {2, 5, 9}\r\n output:  {{10, 12}, {14, 16, 18}, {20, 22, 24, 26}, {28}}\r\n```\r\n\r\nNeither of these are trivially compatible with the output of a partitioning API.\r\n\r\n`split` is the closest. You can obtain the `splits` vector from the `offsets` vector by dropping the first and last element from `offsets`. However, that is inconvenient. \r\n\r\n\r\n**Expected behavior**\r\n\r\nThere should be an API that allows naively passing in the vector of offsets from a partitioning API and it returns a vector of zero-copy views for each partition. \r\n\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYwMTQ4NzI0Ng==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Agree.","createdAt":"2020-03-20T01:17:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-601487246","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMTQ4NzUxNQ==","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"> Agree.\r\n\r\nNew API or change `split`? ","createdAt":"2020-03-20T01:19:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-601487515","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwMTUwNTkzMg==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"> There should be an API that allows naively passing in the vector of offsets from a partitioning API and it returns a vector of zero-copy views for each partition.\r\n\r\nWas agreeing with your final statement, which didn't specify a choice.  :)  I would change split. Doing so would also make split slightly more versatile -- e.g. it could be used to skip the beginning and/or end of a table when splitting. \r\n\r\nbut of course we need to check for any existing users of split before we change it...","createdAt":"2020-03-20T03:05:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-601505932","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwNzUzMDg3Mw==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Should at least fix the docs for now.","createdAt":"2020-04-01T23:00:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-607530873","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5ODk2MjY2Mw==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-03-14T19:14:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-798962663","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5ODk2MjY3NQ==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-03-14T19:14:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-798962675","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Gdcwl","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"FWIW, `offsets` of length `n+1` is most convenient if interfacing with MPI-like libraries, and is also consistent with most ragged-array CSR-style data-structures, so I would argue for rationalizing on that.\r\n\r\n(If you need to return sparse partitions then a pair of `counts` and `offsets` is probably necessary.)","createdAt":"2022-07-12T17:54:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-1182125093","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GeY9p","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"Just want to link https://github.com/rapidsai/cudf/issues/11223 to this issue as well.\r\n","createdAt":"2022-07-12T19:36:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/4607#issuecomment-1182371689","viewerDidAuthor":false}],"createdAt":"2020-03-19T17:40:23Z","id":"MDU6SXNzdWU1ODQ1ODUxMTk=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":25,"title":"Helps libcudf C++ integrations","description":"","dueOn":null},"number":4607,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] split/slice APIs do not align with partitioning APIs","updatedAt":"2024-02-23T18:43:32Z","url":"https://github.com/rapidsai/cudf/issues/4607"}
