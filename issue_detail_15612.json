{"assignees":[{"id":"MDQ6VXNlcjE2MDA1Njkw","login":"vuule","name":"Vukasin Milovanovic"}],"author":{"id":"MDQ6VXNlcjE2MDA1Njkw","is_bot":false,"login":"vuule","name":"Vukasin Milovanovic"},"body":"Users outside of Spark-RAPIDS still use the default, non-pooled, host memory resource and thus have the overhead of pinned memory allocations in `hostdevice_vector`, and any other places where pinned memory is used for faster data transfer.\r\n\r\nProposal: Default to a memory resource with a small pinned pool. When the pool is full, the resource should fall back to new pinned allocations to keep consistent with the old behavior when too much pinned memory is used.\r\n\r\nTo ensure we don't impact CPU performance, the default size of the pool can be a set percentage of the total system memory. Pinning a small minority of system memory (~5%) should not have a negative impact.\r\n\r\nInitially, only `hostdevice_vector` would use this resource but we can expand the pinned memory use in libcudf once a default pool resource is in place.\r\n\r\nDetails to consider:\r\nPool should probably be created on first use - avoids duplicated pool is users set the resource before the first use.\r\nSwitching the host resource should work at any point, even if we must have two pools at the same time.\r\nCan the default pool be safely destroyed? streams can't be destroyed on exit, not sure about `cudaFreeHost`\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps58NC65","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"Measured memory use by `hostdevice_vector` in cuIO benchmarks as a percentage of peak device memory use. The pinned memory use is proportional to device memory use, so we can use the peak device memory use as a measure of how much pinned memory we would need if we used up all device memory.\r\nThe results show that we would never fall back to new pinned allocations with a pinned pool sized at 4% of device memory capacity. However, even at 0.5%, the pool can be used to allocate 90% of used pinned memory without additional allocations.\r\n![image](https://github.com/rapidsai/cudf/assets/16005690/dcdc9d0e-5f08-4759-b7b6-14552185e1e4)","createdAt":"2024-04-29T22:27:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15612#issuecomment-2083794617","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps58NGHX","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"Benchmarking results:\r\n![image](https://github.com/rapidsai/cudf/assets/16005690/6f5282b2-a7bf-4f1b-a59d-3be881261486)\r\n\"relative throughput\" is the average ratio of the throughput with the custom resource and the throughput with default (pinned, non-pooled) resource.\r\n\r\nBenchmarks consistently show improvement with pooled resource compared to pinned allocations.\r\n`read_json` shows disproportionate improvement because of small benchmarks that are hugely impacted by a single pinned allocation.\r\nData also show that small pools bring very similar performance improvement to the pool that never falls back to new allocations.\r\nSurprisingly, benchmarks also show that using pageable memory in `hostdevice_vector` is preferable to pinned (non-pooled).\r\n\r\nTODO: run benchmarks from https://github.com/rapidsai/cudf/pull/15585 because we expect to see higher impact in multi-threaded use cases.","createdAt":"2024-04-29T22:40:00Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15612#issuecomment-2083807703","viewerDidAuthor":false}],"createdAt":"2024-04-29T22:19:02Z","id":"I_kwDOBWUGps6HTseR","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":null,"number":15612,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Have a global pinned memory pool by default","updatedAt":"2024-04-29T22:41:45Z","url":"https://github.com/rapidsai/cudf/issues/15612"}
