{"assignees":[],"author":{"id":"MDQ6VXNlcjEyNzI1MTEx","is_bot":false,"login":"GregoryKimball","name":"Gregory Kimball"},"body":"**Is your feature request related to a problem? Please describe.**\r\nWe have reader benchmarks for CSV, JSON, Parquet and ORC in the cuIO nvbench benchmarking suite. We should add benchmarking for the Avro reader. \r\n\r\nThe cuIO benchmarks are located here:\r\nhttps://github.com/rapidsai/cudf/tree/branch-24.02/cpp/benchmarks/io\r\n\r\nUnfortunately, we don't have an Avro writer implementation in libcudf, so the naive approach of modeling benchmarks after [json_reader_input.cpp](https://github.com/rapidsai/cudf/blob/branch-24.02/cpp/benchmarks/io/json/json_reader_input.cpp) will not work. \r\n\r\n**Describe the solution you'd like**\r\nOur options would be:\r\n* add an MVP Avro writer to libcudf\r\n* add/use a dependency to write Avro files \r\n* maintain a repository of large Avro files (>100 MB) for benchmarking purposes\r\n\r\n**Describe alternatives you've considered**\r\nContinue without automated benchmarks for the Avro reader\r\n\r\n**Additional context**\r\nThe libcudf Avro reader does not support nested types so the benchmarks should start by only covering primitive types.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5xoxJp","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Update: we received a request to prioritize Avro support because it is the format used in the OSCAR dataset (https://oscar-project.github.io/documentation/versions/oscar-2301/). If additional NLP datasets and LLM applications find need of Avro we may choose to prioritize Avro development.","createdAt":"2024-01-23T16:58:40Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14574#issuecomment-1906512489","viewerDidAuthor":false}],"createdAt":"2023-12-05T19:34:27Z","id":"I_kwDOBWUGps540UoD","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"}],"milestone":{"number":29,"title":"Benchmarking","description":"","dueOn":null},"number":14574,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Add Avro reader benchmarks to the cuIO benchmarking suite","updatedAt":"2024-01-23T16:58:52Z","url":"https://github.com/rapidsai/cudf/issues/14574"}
