{"assignees":[{"id":"MDQ6VXNlcjE2MDA1Njkw","login":"vuule","name":"Vukasin Milovanovic"}],"author":{"id":"MDQ6VXNlcjMwMjcxOTU=","is_bot":false,"login":"devavret","name":"Devavret Makkar"},"body":"When writing a large dataframe with bool column using cuIO ORC writer, the result of reading the file back using pyarrow does not match the input dataframe. However when reading back from cudf's ORC reader it matches.\r\n\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\nimport pyarrow as pa\r\nimport pyorc\r\nimport cudf\r\n\r\nnp.random.seed(0)\r\nfrom cudf._lib.null_mask import bitmask_allocation_size_bytes\r\n\r\ndef random_bitmask(size):\r\n    sz = bitmask_allocation_size_bytes(size)\r\n    data = np.random.randint(0, 255, dtype=\"u1\", size=sz)\r\n    return data.view(\"i1\")\r\n\r\nsize = 6000000\r\narr = np.random.randint(low=0, high=2, size=size).astype(np.bool)\r\ns = cudf.Series.from_masked_array(arr, random_bitmask(size))\r\ngdf = cudf.DataFrame({\"col_bool\": s})\r\n\r\n# write with cuIO\r\nfname = \"brokenbool.orc\"\r\ngdf.to_orc(fname)\r\n\r\n# read with pyarrow\r\npdf = pa.orc.ORCFile(fname).read().to_pandas()\r\n\r\n# the sum doesn't match\r\nprint(gdf.col_bool.sum(), pdf.col_bool.sum())\r\n\r\n# read with pyorc\r\nfile = open(fname, 'rb')\r\ndata = pyorc.Reader(file).read()\r\npdf = pd.DataFrame(data, columns=[\"col_bool\"])\r\n\r\n# sum matches pyarrow but not original df\r\nprint(gdf.col_bool.sum(), pdf.col_bool.sum())\r\n\r\n# reading with cuIO gives the correct result\r\nprint(gdf.col_bool.sum(), cudf.read_orc(fname).col_bool.sum())\r\n```\r\n\r\nNote that this doesn't occur when there are no nulls in the input.","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDcyOTI4NzE4NA==","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"Based on the offline discussion with @rgsl888prabhu , this is potentially a Pyarrow issue, as they don't handle the way our writer splits boolean data streams into stripes.\r\nKeeping the priority for now.","createdAt":"2020-11-18T00:00:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-729287184","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDcyOTMwMDA2MQ==","author":{"login":"rgsl888prabhu"},"authorAssociation":"CONTRIBUTOR","body":"For the reference,  https://issues.apache.org/jira/browse/ARROW-10635\r\n\r\nAnd assumption in cudf ORC writer\r\nhttps://github.com/rapidsai/cudf/blob/01b8b5c5d0735b5a1c1df4e967fc929b337a9926/cpp/src/io/orc/orc.cpp#L210","createdAt":"2020-11-18T00:36:50Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-729300061","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2NDkwNzE3MQ==","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"We got confirmation that the issue also repros with Spark reader, so treating this as a cuIO bug (not Pyarrow bug).","createdAt":"2021-01-21T20:10:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-764907171","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2NTgwMzMxMg==","author":{"login":"rgsl888prabhu"},"authorAssociation":"CONTRIBUTOR","body":"[bool_pq.zip](https://github.com/rapidsai/cudf/files/5859314/bool_pq.zip)\r\n\r\ncode to reproduce \r\n\r\n```\r\nimport cudf\r\nimport pandas as pd\r\ndf = cudf.read_parquet(\"bool_pq.parquet\")\r\ndf.to_orc(\"broken_bool.orc\")\r\npdf = pd.read_orc(\"broken_bool.orc\")\r\ngdf = cudf.read_orc(\"broken_bool.orc\")\r\n# test pandas and cudf orc read\r\npdf.dropna()[gdf.dropna().to_pandas()['col_bool'] != pdf.dropna()['col_bool']]\r\n# Compare parquet and orc cudf read\r\ngdf.dropna()[df.dropna().to_pandas()['col_bool'] != gdf.dropna().to_pandas()['col_bool']]\r\n```","createdAt":"2021-01-23T00:50:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-765803312","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2Nzg1NDk2OA==","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"Root cause:\r\nORC encodes bools as bits, where null values are omitted from the data stream. Row groups have 10k elements, so when there are no nulls they fill 1250 bytes completely. \r\nWhen nulls are present, the last byte might be incomplete. Other readers (pyarrow, Spark) expect all bits in encoded column to be valid (with the exception of last byte in the stripe).\r\n\r\nThus, we need to encode bool values from the next row group into the incomplete byte and set the next row group starting offset to the correct bit within the data encoded as part of the current row group. This offsets the encoding of the next row groups and the effect ripples over the entire stripe. Significant changes are needed to the current implementation to be able to support this.","createdAt":"2021-01-26T21:59:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-767854968","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc2Nzg5ODExNg==","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"Suggested approach:\r\n\r\n1. Gather row ranges that need to be encoded together (new step/code):\r\n    1. Gather null counts per row group.\r\n    2. Apply `thrust::inclusive_scan` on the null counts.\r\n    3. Modulo 8 each element to get the number of bits that this row group borrow from the next one (as part of `inclusive_scan`?).\r\n    4. Find the row number of the last row each row group encoder needs to encode (might be larger than the number of borrowed bits, as nulls are not encoded in the data stream) - thread per row group.\r\n2. Encode kernel changes:\r\n    1. Pass the information about bool row ranges to the encode kernel.\r\n    2. Encode the bool column rows in the range, instead of rows in the row group.\r\n    3. Save the location of the last batch of encoded (Byte RLE) values .\r\n3. Row group offset computation: use information about last encoded batch and the number of borrowed bits.","createdAt":"2021-01-26T23:30:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-767898116","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4NjMyNzgzNA==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-02-26T00:40:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-786327834","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTI0Njc2OQ==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-05-27T01:33:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/6763#issuecomment-849246769","viewerDidAuthor":false}],"createdAt":"2020-11-13T08:17:43Z","id":"MDU6SXNzdWU3NDIyNTMyOTA=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"}],"milestone":{"number":23,"title":"ORC continuous improvement","description":"","dueOn":null},"number":6763,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Bools written by cuIO ORC writer don't match when read by pyarrow/pyorc","updatedAt":"2023-07-12T02:45:56Z","url":"https://github.com/rapidsai/cudf/issues/6763"}
