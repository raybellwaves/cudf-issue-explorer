{"assignees":[],"author":{"id":"MDQ6VXNlcjIwNDYxMDEz","is_bot":false,"login":"rjzamora","name":"Richard (Rick) Zamora"},"body":"**Describe the bug**\r\nI am getting a `TypeError` when I try to subtract a `cudf.Series` (`s`) from a `cudf.Dataframe` (`df`) having non-numerical columns, even when `s` only contains elements that correspond to the numerical columns of `df`. Note that it is not an issue when `s` leaves out columns of `df`, unless those columns are numerical.\r\n\r\n**Steps/Code to reproduce bug**\r\n```python\r\nIn [1]: import cudf\r\nIn [2]: df = cudf.DataFrame({\"a\": [\"dog\"] * 10, \"b\": range(10)})\r\nIn [3]: s = df.mean(numeric_only=True)\r\nIn [4]: df - s\r\n```\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[4], line 1\r\n----> 1 df - s\r\n\r\nFile /datasets/rzamora/miniconda3/envs/cudf_pandas_2/lib/python3.10/site-packages/cudf/core/mixins/mixin_factory.py:11, in _partialmethod.<locals>.wrapper(self, *args2, **kwargs2)\r\n     10 def wrapper(self, *args2, **kwargs2):\r\n---> 11     return method(self, *args1, *args2, **kwargs1, **kwargs2)\r\n\r\nFile /datasets/rzamora/miniconda3/envs/cudf_pandas_2/lib/python3.10/site-packages/cudf/core/indexed_frame.py:3475, in IndexedFrame._binaryop(self, other, op, fill_value, can_reindex, *args, **kwargs)\r\n   3471 if operands is NotImplemented:\r\n   3472     return NotImplemented\r\n   3474 return self._from_data(\r\n-> 3475     ColumnAccessor(type(self)._colwise_binop(operands, op)),\r\n   3476     index=out_index,\r\n   3477 )\r\n\r\nFile /datasets/rzamora/miniconda3/envs/cudf_pandas_2/lib/python3.10/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile /datasets/rzamora/miniconda3/envs/cudf_pandas_2/lib/python3.10/site-packages/cudf/core/frame.py:1761, in Frame._colwise_binop(cls, operands, fn)\r\n   1753         assert False, \"At least one operand must be a column.\"\r\n   1755 # TODO: Disable logical and binary operators between columns that\r\n   1756 # are not numerical using the new binops mixin.\r\n   1758 outcol = (\r\n   1759     getattr(operator, fn)(right_column, left_column)\r\n   1760     if reflect\r\n-> 1761     else getattr(operator, fn)(left_column, right_column)\r\n   1762 )\r\n   1764 if output_mask is not None:\r\n   1765     outcol = outcol.set_mask(output_mask)\r\n\r\nTypeError: unsupported operand type(s) for -: 'StringColumn' and 'NoneType'\r\n```\r\n\r\nFor `pandas`, I get the following output:\r\n\r\n```\r\n     a    b\r\n0  NaN -4.5\r\n1  NaN -3.5\r\n2  NaN -2.5\r\n3  NaN -1.5\r\n4  NaN -0.5\r\n5  NaN  0.5\r\n6  NaN  1.5\r\n7  NaN  2.5\r\n8  NaN  3.5\r\n9  NaN  4.5\r\n```\r\n\r\n**Expected behavior**\r\nI expect the same behavior as pandas. That is, when broadcasting a `Series` to the columns of a `DataFrame` for a binop, missing columns in the `Series`' index should result in the corresponding column having all null values in the output. This seems to work fine in `cudf`, unless the missing column is non-numerical.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5iPlUX","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"The problem here is kind of that `-` is not defined between string columns, but if one of the values is `pd.NA` then suddenly it becomes defined in pandas land.\r\n\r\nThis might do the trick:\r\n```\r\ndiff --git a/python/cudf/cudf/core/column/string.py b/python/cudf/cudf/core/column/string.py\r\nindex 32538939a6..dbe2da77e6 100644\r\n--- a/python/cudf/cudf/core/column/string.py\r\n+++ b/python/cudf/cudf/core/column/string.py\r\n@@ -5804,6 +5804,8 @@ class StringColumn(column.ColumnBase):\r\n             return NotImplemented\r\n \r\n         if isinstance(other, (StringColumn, str, cudf.Scalar)):\r\n+            if isinstance(other, cudf.Scalar) and other.value is cudf.NA:\r\n+                return column.full(len(self), other, dtype=str)\r\n             if isinstance(other, cudf.Scalar) and other.dtype != \"O\":\r\n                 if op in {\r\n                     \"__eq__\",\r\n```","createdAt":"2023-07-24T16:41:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13731#issuecomment-1648252183","viewerDidAuthor":false}],"createdAt":"2023-07-21T22:25:52Z","id":"I_kwDOBWUGps5sRLkb","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":13731,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] `TypeError` when broadcasting `Series` to `DataFrame` with non-numerical columns","updatedAt":"2024-05-16T05:12:34Z","url":"https://github.com/rapidsai/cudf/issues/13731"}
