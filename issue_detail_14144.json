{"assignees":[{"id":"MDQ6VXNlcjQ1Nzk1OTkx","login":"davidwendt","name":"David Wendt"}],"author":{"id":"MDQ6VXNlcjM0NDEzMjE=","is_bot":false,"login":"revans2","name":"Robert (Bobby) Evans"},"body":"**Is your feature request related to a problem? Please describe.**\r\nSpark has a method calling initcap. We implemented this using strings::capitalize, but recently ran into some problems because the first letter it uses is not an uppercase letter, it is a title case letter.\r\n\r\nhttps://unicode.org/faq/casemap_charprop.html#4\r\n\r\nMost of the time they are the same, but there are a few cases where they are not and ß is one of them. I would love an option for capitalize that uses title case instead of upper case. Or if we could get a separate initcap function that uses title case would also be great.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5nBNRm","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"For reference here is a list of the suspect characters: https://www.compart.com/en/unicode/category/Lt\r\nSeems the `cudf::strings::capitalize()` should handle these by default (no special option) if possible.","createdAt":"2023-09-20T20:18:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14144#issuecomment-1728369766","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5nHCd-","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"Great to hear that CUDF will do it by default. I ma a little concerned because ß is the one that bit us in our testing, but it does not show up in https://www.compart.com/en/unicode/category/Lt","createdAt":"2023-09-21T16:17:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14144#issuecomment-1729898366","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5wIVHC","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"So the `ß` character looks to be a separate special case. \r\nThe upper-case of `ß` is actually `SS` (two capital S's) which the code already supports:\r\n```\r\n>>> import cudf\r\n>>> s = 'ßeta'\r\n>>> s.upper()\r\n'SSETA'\r\n>>> gs = cudf.Series([s])\r\n>>> gs.str.upper()\r\n0    SSETA\r\n```\r\nBut it looks like when capitalizing `ß` the second S is not upper-cased in Python:\r\n```\r\n>>> s.capitalize()\r\n'Sseta'\r\n>>> gs.str.capitalize()\r\n0    SSeta\r\n```\r\nI've not been able to find documentation on this behavior so I would be curious to know what is expected by Spark when capitalizing `ß`\r\nI did a quick test with the `capitalize()` function from [org.apache.commons.lang3.StringUtils](https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html) and got a different result as well. Also, the `upperCase()` and `String.toUpperCase()` functions both return `SSETA`.","createdAt":"2024-01-08T15:29:28Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14144#issuecomment-1881231810","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5wKVNV","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"```\r\nval df = Seq(\"ßeta\", \"Sseta\").toDF\r\ndf.selectExpr(\"value\", \"upper(value)\", \"lower(value)\", \"initcap(value)\", \"lower(upper(value))\").show()\r\n+-----+------------+------------+--------------+-------------------+\r\n|value|upper(value)|lower(value)|initcap(value)|lower(upper(value))|\r\n+-----+------------+------------+--------------+-------------------+\r\n| ßeta|       SSETA|        ßeta|          ßeta|              sseta|\r\n|Sseta|       SSETA|       sseta|         Sseta|              sseta|\r\n+-----+------------+------------+--------------+-------------------+\r\n```\r\n\r\nI hope that this helps. Strings in Spark are kind of special as they wrote their own [UTF8String](https://github.com/apache/spark/blob/master/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java) implementation\r\n`upper` is [`UTF8String.toUpperCase`](https://github.com/apache/spark/blob/bb0f77d076ee10ceb1365715fb75e3acb795eec7/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java#L367-L388), \r\n`lower` is [`UTF8String.toLowerCase`](https://github.com/apache/spark/blob/bb0f77d076ee10ceb1365715fb75e3acb795eec7/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java#L397-L418), and \r\n`initcap` is [`UTF8String.toLowerCase.toTitleCase`](https://github.com/apache/spark/blob/bb0f77d076ee10ceb1365715fb75e3acb795eec7/common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java#L427-L451).","createdAt":"2024-01-08T20:15:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14144#issuecomment-1881756501","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5wZTXW","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"The `initcap()` appears to match results I see with `org.apache.commons.lang3.StringUtils.capitalize()` both of which just pass through the `ß` character unchanged. \r\n\r\nI found a few more characters that are not part of the titlecase Unicode definition and behave like `ß`:\r\n\r\n```\r\nß   (223) -> SS (83,83)     : Ss (83,115)\r\nև  (1415) -> ԵՒ (1333,1362) : Եւ (1333,1410)\r\nﬀ (64256) -> FF (70,70)     : Ff (70,102)\r\nﬁ (64257) -> FI (70,73)     : Fi (70,105)\r\nﬂ (64258) -> FL (70,76)     : Fl (70,108)\r\nﬃ (64259) -> FFI (70,70,73) : Ffi (70,102,105)\r\nﬄ (64260) -> FFL (70,70,76) : Ffl (70,102,108)\r\nﬅ (64261) -> ST (83,84)     : St (83,116)\r\nﬆ (64262) -> ST (83,84)     : St (83,116)\r\nﬓ (64275) -> ՄՆ (1348,1350) : Մն (1348,1398)\r\nﬔ (64276) -> ՄԵ (1348,1333) : Մե (1348,1381)\r\nﬕ (64277) -> ՄԻ (1348,1339) : Մի (1348,1387)\r\nﬖ (64278) -> ՎՆ (1358,1350) : Վն (1358,1398)\r\nﬗ (64279) -> ՄԽ (1348,1341) : Մխ (1348,1389)\r\n```\r\n\r\nThe Python (and Pandas) output for `capitalize()` (which also matches`title()`) is included above after the `:`. Generally, in the multi-character output for `upper()` the characters after the first character are lower-cased for `capitalize()` (and `title()`).\r\n\r\nBut all of these pass through unchanged with `org.apache.commons.lang3.StringUtils.capitalize()` so I suspect the same pass through result from `initcap()` for these as well.\r\n\r\nRegardless, the libcudf result matches neither and so the inclination is to fix it to match the Python/Pandas result.\r\nI was also able to verify that C++ `Boost Locale` library supports these characters and match the Python results as well.\r\nThe [`boost::locale` class](https://www.boost.org/doc/libs/1_82_0/libs/locale/doc/html/group__convert.html#ga0cf65ff4ea4bf502c667823c0137a225) is implemented using the [ICU library](https://icu.unicode.org/) which provides a rich set of globalization functions for software applications.","createdAt":"2024-01-10T20:35:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14144#issuecomment-1885681110","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5xiPql","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"Sorry I have not been following this as closely as I should.\r\n\r\n@davidwendt so the proposal is to make the CUDF code match python/pandas, but not Spark?\r\n\r\n@sameerz if that is true then we will need to write a custom kernel for initcap for Spark.","createdAt":"2024-01-22T20:56:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14144#issuecomment-1904802469","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5xiXXA","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"Just FYI: From a Spark perspective I found 265 characters that produce different values between the CPU implementation and the GPU one.  Their code points are.\r\n\r\n(223, 304, 329, 452, 454, 455, 457, 458, 460, 496, 497, 499, 604, 609, 618, 620, 642, 647, 669, 670, 912, 944, 1011, 1012, 1321, 1323, 1325, 1327, 1415, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4349, 4350, 4351, 5112, 5113, 5114, 5115, 5116, 5117, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7566, 7830, 7831, 7832, 7833, 7834, 7838, 8016, 8018, 8020, 8022, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8114, 8115, 8116, 8118, 8119, 8130, 8131, 8132, 8134, 8135, 8146, 8147, 8150, 8151, 8162, 8163, 8164, 8166, 8167, 8178, 8179, 8180, 8182, 8183, 8486, 8490, 8491, 42649, 42651, 42900, 42903, 42905, 42907, 42909, 42911, 42933, 42935, 42937, 42939, 42941, 42943, 42947, 43859, 43888, 43889, 43890, 43891, 43892, 43893, 43894, 43895, 43896, 43897, 43898, 43899, 43900, 43901, 43902, 43903, 43904, 43905, 43906, 43907, 43908, 43909, 43910, 43911, 43912, 43913, 43914, 43915, 43916, 43917, 43918, 43919, 43920, 43921, 43922, 43923, 43924, 43925, 43926, 43927, 43928, 43929, 43930, 43931, 43932, 43933, 43934, 43935, 43936, 43937, 43938, 43939, 43940, 43941, 43942, 43943, 43944, 43945, 43946, 43947, 43948, 43949, 43950, 43951, 43952, 43953, 43954, 43955, 43956, 43957, 43958, 43959, 43960, 43961, 43962, 43963, 43964, 43965, 43966, 43967, 64256, 64257, 64258, 64259, 64260, 64261, 64262, 64265, 64266, 64267, 64268, 64269, 64275, 64276, 64277, 64278, 64279)","createdAt":"2024-01-22T21:17:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"LAUGH","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14144#issuecomment-1904833984","viewerDidAuthor":false}],"createdAt":"2023-09-20T19:31:15Z","id":"I_kwDOBWUGps5xlSOa","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"},{"id":"MDU6TGFiZWwxNTE1NjE2MjUz","name":"strings","description":"strings issues (C++ and Python)","color":"0e8a16"}],"milestone":null,"number":14144,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Optionally support titlecase for capitalize","updatedAt":"2024-01-22T21:17:41Z","url":"https://github.com/rapidsai/cudf/issues/14144"}
