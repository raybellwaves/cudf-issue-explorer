{"assignees":[],"author":{"id":"MDQ6VXNlcjI2MTY5Nzcx","is_bot":false,"login":"miguelusque","name":"Miguel Mart√≠nez"},"body":"**Is your feature request related to a problem? Please describe.**\r\nHi,\r\n\r\nWhile trying to use the `DataFrame.query()` with columns whose name is a string with blank spaces, I have noticed that I didn't know how to do that with RAPIDS nor Pandas.\r\n\r\nExample below:\r\n```\r\ndf = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2), 'C C': range(10, 5, -1)})\r\ndf.query('B == `C C`')\r\n```\r\n\r\nI have gone to Pandas doc, and I have found they support the use of backstick from version 0.25.1. Backstick has been deprecated in Python 3, but it has been introduced in Pandas to accomplish the scenario above.\r\n\r\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html\r\n\r\n**Describe the solution you'd like**\r\nI'd like to have 'backstick' support in .query method in cudf.\r\n\r\n**Describe alternatives you've considered**\r\nAs a workaround:\r\n`df[df.B == df['C C']]`\r\n\r\n\r\n**Additional context**\r\nNot a stopper at all. I have just thought it might be handy to have backstick support in RAPIDS cuDF.","closed":false,"closedAt":null,"comments":[],"createdAt":"2019-10-08T07:38:16Z","id":"MDU6SXNzdWU1MDM4Nzk4MjA=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":3000,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Backstick support in DataFrame.query() method","updatedAt":"2021-07-23T21:28:59Z","url":"https://github.com/rapidsai/cudf/issues/3000"}
