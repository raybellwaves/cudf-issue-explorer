{"assignees":[{"id":"MDQ6VXNlcjQ1Nzk1OTkx","login":"davidwendt","name":"David Wendt"}],"author":{"id":"MDQ6VXNlcjE1MjIxMjg5","is_bot":false,"login":"jrhemstad","name":"Jake Hemstad"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nCUB recently moved Thrust's merge sort implementation into CUB, see: https://github.com/NVIDIA/cub/pull/322\r\n\r\nThis new version has two advantages over using Thrust's merge sort:\r\n- It doesn't synchronize\r\n- It supports out-of-place sorting\r\n\r\nThe latter will eliminate a redundant step of materializing a sequence vector for the input and we can instead use a counting iterator. \r\n\r\n**Describe the solution you'd like**\r\nWe should replace the `thrust::sort` call with the new CUB merge sort.\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps408gZA","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"Is this issue different than #8659 ?","createdAt":"2021-07-28T12:41:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8634#issuecomment-888276544","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps408yov","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"> Is this issue different than #8659 ?\r\n\r\nlol, no. Apparently I just have early onset dementia. ","createdAt":"2021-07-28T14:22:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8634#issuecomment-888351279","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps45xp_A","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-11-15T21:03:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8634#issuecomment-969318336","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps48KCZH","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"I did some investigation on this now that thrust 1.15 has been integrated into libcudf builds. The [`thrust::sort` and `thrust::stable_sort`](https://github.com/rapidsai/cudf/blob/0d5ec7f8902cbf3d5b73b037b9d0f5db66506d86/cpp/src/sort/sort_impl.cuh#L136-L146) functions are used to sort a table view using the `cudf::detail::sorted_order` function to build the sorted indices which are then used in a call to `cudf::gather`. Since `thrust::sort` and `thrust::stable_sort` sort in-place, the [`thrust::sequence`](https://github.com/rapidsai/cudf/blob/0d5ec7f8902cbf3d5b73b037b9d0f5db66506d86/cpp/src/sort/sort_impl.cuh#L121) function is called before the sort. \r\n\r\nThe `cub:DeviceMergeSort::SortKeysCopy` allows specifying a separate, immutable input eliminating the need for the call to `thrust::sequence`.  Therefore, `SortKeysCopy` can replace the `thrust::sort` by passing a counting-iterator as the input. However, though there is a [`cub::DeviceMergeSort::StableSortKeys`](https://github.com/NVIDIA/cub/blob/main/cub/device/device_merge_sort.cuh#L858) there currently is no `cub::DeviceMergeSort::StableSortKeysCopy` available. So the `thrust::stable_sort` equivalent would still require a `thrust::sequence` call.\r\n\r\nAlso, an initial prototype showed that `cub::DeviceMergeSort` has the same compile time issues as `thrust::sort` in that the aggressive inlining increases compile time by at least 10x. So moving to cub for sort will likely require disabling some `pragma unroll` statements in the cub header files like we did for thrust.\r\n\r\nFinally, running benchmarks with `thrust::sequence/sort` compared to `cub::DeviceMergeSort:SortKeysCopy` (no sequence call) showed no significant change in performance.","createdAt":"2022-01-10T19:19:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8634#issuecomment-1009264199","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Loq3e","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"Possible optimized implementations for single-column, integral types -- using radix-sort (no comparator allowed)\r\n\r\n| API | `cub::Device` | Notes |\r\n| ---- | ---- | ---- |\r\n| `cudf::sorted_order` | `RadixSort::SortPairs` | `thrust::sort_by_key` calls this internally |\r\n| `cudf::stable_sorted_order` | `RadixSort::SortPairs` | `thrust::stable_sort_by_key` calls this internally  |\r\n| `cudf::sort` | `RadixSort::SortKeys` |  `thrust::sort` calls this internally |\r\n| `cudf::sort_by_key` | `RadixSort::SortPairs` | `thrust::sort_by_key` calls this internally |\r\n| `cudf::stable_sort_by_key` | `RadixSort::SortPairs` | `thrust::stable_sort_by_key` calls this internally |\r\n| `cudf::segmented_sorted_order` | `DeviceSegmentedSort::SortPairs` | |\r\n| `cudf::stable_segmented_sorted_order` | `DeviceSegmentedSort::StableSortPairs` |  |\r\n| `cudf::segmented_sort_by_key` | `DeviceSegmentedSort::SortPairs` |  |\r\n| `cudf::stable_segmented_sort_by_key` | `DeviceSegmentedSort::StableSortPairs` |  |\r\n| `cudf::lists::sort_lists` |  | call `cudf::detail::segmented_sort_by_key` |\r\n| `cudf::lists::stable_sort_lists` |  | call `cudf::detail::stable_segmented_sort_by_key` |\r\n\r\nThe `DeviceRadixSort:SortKeys/Pairs` is not in-place and take separate parameters for input and output keys. So copying the input column is not required. Likewise, there are separate input and output parameters for the values in `SortPairs`. Unfortunately, these must be the same type and cannot except a counting iterator. So a prefilled indices column is still required.\r\n\r\nThe non-integral types can all use merge-sort since these accept a comparator.\r\n\r\n| API | `cub::Device` | Notes |\r\n| ---- | ---- | ---- |\r\n| `cudf::sorted_order` | `MergeSort::SortPairsCopy` |  |\r\n| `cudf::stable_sorted_order` | `MergeSort::StableSortPairsCopy` | N/A yet  |\r\n| `cudf::sort` | `MergeSort::SortKeysCopy` |  |\r\n| `cudf::sort_by_key` | `MergeSort::SortPairsCopy` |  |\r\n| `cudf::stable_sort_by_key` | `MergeSort::StableSortPairsCopy` | N/A yet |\r\n| `cudf::segmented_sorted_order` | `SegmentedSort::SortPairs` | |\r\n| `cudf::stable_segmented_sorted_order` | `SegmentedSort::StableSortPairs` |  |\r\n| `cudf::segmented_sort_by_key` | `SegmentedSort::SortPairs` |  |\r\n| `cudf::stable_segmented_sort_by_key` | `SegmentedSort::StableSortPairs` | `cudf::detail::stable_segmented_sort_by_key` |\r\n| `cudf::lists::sort_lists` |  | call `cudf::detail::segmented_sort_by_key` |\r\n| `cudf::lists::stable_sort_lists` |  | call `cudf::detail::stable_segmented_sort_by_key` |\r\n\r\nThe `DeviceMergeSort::Sort*Copy` functions take separate parameters (both keys and values) for input and output. This means the input column does not need to be copied. The function signature also allows these corresponding types to be different meaning a counting iterator can be used for the input indices.\r\n\r\nThe `DeviceMergeSort::StableSort*Copy` functions are in https://github.com/NVIDIA/cub/pull/565 which has not yet made it into libcudf dependencies.\r\n\r\n","createdAt":"2022-10-05T20:42:31Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/8634#issuecomment-1268952542","viewerDidAuthor":false}],"createdAt":"2021-06-30T18:59:56Z","id":"MDU6SXNzdWU5MzQwMjA2NzQ=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":null,"number":8634,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Update `cudf::sort` to use new CUB merge sort ","updatedAt":"2023-01-09T17:26:36Z","url":"https://github.com/rapidsai/cudf/issues/8634"}
