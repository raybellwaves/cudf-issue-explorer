{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"After #12074, most type promotions between columns of mixed types (and non-mixed types) match pandas. The exception is columns with boolean dtypes.\r\n\r\nPandas have taken the decision to disallow division and exponentiation on boolean types when both operands are booleans (https://github.com/pandas-dev/pandas/blob/d13c9e034ce8a1d738766c4b1cec80c76f5523be/pandas/core/ops/array_ops.py#L503).\r\n\r\nAside: I kind of disagree with this since this is all perfectly well defined (excepting the usual caveat of division by zero).\r\n\r\nWhen only one of the operands is `bool`, the status quo depends on the dtype of the other operand:\r\n\r\n## Pandas behaviour:\r\n\r\nFor `a % b`, with `a == 1`, `b == 0` for various dtypes\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | int8(0) (or ZeroDivisionError[^1]) | float64(NaN) | float64(NaN) |\r\n| int | int64(0) (or ZeroDivisionError[^1]) | float64(NaN) | float64(NaN) |\r\n| float | float64(NaN) (or ZeroDivisionError[^1])| float64(NaN) | float64(NaN) |\r\n\r\nFor `a / b` (or `a // b`) with `a == 1`, `b = 0`\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | NotImplemented (or ZeroDivisionError[^1]) | float64(inf) | float64(inf) |\r\n| int | float64(inf)(or ZeroDivisionError[^1]) | float64(inf) | float64(inf) |\r\n| float | float64(inf) (or ZeroDivisionError[^1])| float64(inf) | float64(inf) |\r\n\r\nFor `a % b`, with `a == 0`, `b == 0` for various dtypes\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | int8(0)(or ZeroDivisionError[^1]) | float64(NaN) | float64(NaN) |\r\n| int | int64(0) (or ZeroDivisionError[^1])| float64(NaN) | float64(NaN) |\r\n| float | float64(NaN) (or ZeroDivisionError[^1])| float64(NaN) | float64(NaN) |\r\n\r\nFor `a / b` (or `a // b`) with `a == 0`, `b = 0`\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | NotImplemented (or ZeroDivisionError[^1]) | float64(NaN) | float64(NaN) |\r\n| int | float64(NaN) (or ZeroDivisionError[^1]) | float64(NaN) | float64(NaN) |\r\n| float | float64(NaN) (or ZeroDivisionError[^1]) | float64(NaN) | float64(NaN) |\r\n\r\n[^1]: If the operands are different lengths, we get a ZeroDivisionError (see https://github.com/pandas-dev/pandas/issues/49699)\r\n\r\n## cuDF behaviour:\r\n\r\nFor `a % b`, with `a == 1`, `b == 0` for various dtypes\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | bool(0) | float64(NaN) | float64(NaN) |\r\n| int | int64(2**32 - 1) | float64(NaN) | float64(NaN) |\r\n| float | float64(NaN) | float64(NaN) | float64(NaN) |\r\n\r\nFor `a // b` with `a == 1`, `b = 0`\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | bool(1) | float64(inf) | float64(inf) |\r\n| int | int64(2**32 - 1) | float64(inf) | float64(inf) |\r\n| float | float64(inf) | float64(inf) | float64(inf) |\r\n\r\nFor `a / b` with `a == 1`, `b = 0`\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | float32(inf) | float64(inf) | float64(inf) |\r\n| int | float64(inf) | float64(inf) | float64(inf) |\r\n| float | float64(inf) | float64(inf) | float64(inf) |\r\n\r\nFor `a % b`, with `a == 0`, `b == 0` for various dtypes\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | bool(0) | float64(NaN) | float64(NaN) |\r\n| int | int64(2**32 - 1) | float64(NaN) | float64(NaN) |\r\n| float | float64(NaN) | float64(NaN) | float64(NaN) |\r\n\r\nFor `a // b` with `a == 0`, `b = 0`\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | bool(False) | float64(NaN) | float64(NaN) |\r\n| int | int64(2**32 - 1) | float64(NaN) | float64(NaN) |\r\n| float | float64(NaN) | float64(NaN) | float64(NaN) |\r\n\r\nFor `a / b` with `a == 0`, `b = 0`\r\n\r\n|  dtype-a \\ dtype-b  | bool | int | float |\r\n|----------|------|------|-|\r\n| bool | float32(NaN) | float64(NaN) | float64(NaN) |\r\n| int | float64(NaN) | float64(NaN) | float64(NaN) |\r\n| float | float64(NaN) | float64(NaN) | float64(NaN) |","closed":false,"closedAt":null,"comments":[],"createdAt":"2022-11-16T11:31:10Z","id":"I_kwDOBWUGps5Wgtn1","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":12162,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG/pandas-compat]: Handling of type promotion and division/mod by zero for boolean columns ","updatedAt":"2022-11-24T18:02:12Z","url":"https://github.com/rapidsai/cudf/issues/12162"}
