{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nOur Python docstrings have various style violations when compared against standards like [pep257](https://peps.python.org/pep-0257/). Not only does this impact readability (which may be subjective), it also reduces the effectiveness of tools like Sphinx or numpydoc that rely on specific formatting in order to parse docstrings.\r\n\r\n**Describe the solution you'd like**\r\nWe should lint all of our docstrings using `pydocstyle`, the standard for docstring linting in the Python ecosystem. I added support for pydocstyle in #7985 and have since added support for a few additional modules, but many of our most prominent public-facing APIs are not yet linted. My reticence to lint those files has stemmed in large part from the degree to which these files have been refactored recently and the number of docstrings that were rendered obsolete in the process. However, that process is largely complete now, at least for the most important public APIs, so I think we are at a good stage to start working through the remaining changes systematically.\r\n\r\nWhile we have added pydocstyle on a per-file basis up to now, not all of pydocstyle's rules make sense for us since matching pandas is a higher priority. As a result, going forward we will enable rules on a per-rule rather than per-file basis so that we can get the most value out of pydocstyle without conflicting with preexisting pandas conventions. For more extensive discussion of different rules and why we choose to enable some or not, see the [excellent table compiled by @bdice a few comments below.](https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108886629).","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5CFkiT","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Looking at the changes in #10712, I'm not convinced that many of them are improvements. Can we take a step back and evaluate how exactly `pydocstyle` is going to help us concretely?\r\n\r\n> it also reduces the effectiveness of tools like Sphinx or numpydoc that rely on specific formatting in order to parse docstrings.\r\n\r\nDo we have examples where this doesn't work well today?\r\n\r\nCan we configure pydocstyle to catch a more narrow class of errors for us and ignore others?","createdAt":"2022-04-25T15:58:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108756627","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5CFrba","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I agree with you. I have generally been a fan of docstring linting with pydocstyle in the past, but this PR definitely made me question its usability for cudf a little bit as well. Fundamentally I think that we have one major difference in this project relative to other projects that makes some of these changes feel less useful: we want to match pandas documentation as much as possible. As a result a lot of these changes may end up working contrary to our goals. We may end up getting better mileage by writing a custom tool that performs an element-wise comparison of docstrings of all public APIs against their pandas equivalents and highlights differences.\r\n\r\n> Looking at the changes in #10712, I'm not convinced that many of them are improvements. Can we take a step back and evaluate how exactly `pydocstyle` is going to help us concretely?\r\n> \r\n> > it also reduces the effectiveness of tools like Sphinx or numpydoc that rely on specific formatting in order to parse docstrings.\r\n> \r\n> Do we have examples where this doesn't work well today?\r\n\r\nI think the main things that pydocstyle catches that help us are errors that lead to improper Sphinx HTML generation. For instance, in this PR I fixed places where there are newlines in places where they should not be present in between section headers like \"Parameters\" and their underlines. There were also a few places where the summary line was not separated from subsequent lines. That can also lead to improper Sphinx. \r\n\r\nMore generally, pydocstyle can be helpful to catch missing docstrings, missing parameters, missing types, etc, but in general I think we've done OK with those because we copy so many of our docs from pandas. We're benefiting less from the tool because we're not writing docstrings from scratch.\r\n\r\n> Can we configure pydocstyle to catch a more narrow class of errors for us and ignore others?\r\n\r\nWe can choose to only lint a specific set of [pydocstyle's supported error codes](http://www.pydocstyle.org/en/stable/error_codes.html). However, I question how useful it will end up being since pandas probably has minor violations of pydocstyle style all over the place. If we block too many of the rules, the tool's value will decrease substantially.\r\n\r\n\r\nCC @bdice, who I'm sure will have more opinions here 😄 ","createdAt":"2022-04-25T16:24:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108784858","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5CF3YH","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"To clarify my comment from above and reiterate some of my offline comments to @shwina:\r\n\r\nI am personally in favor of using opinionated linters like pydocstyle. Even in cases where they disagree with my personal preferences, I prefer using them because they reduce the number of discussions that need to be had over what are usually very minor, very subjective issues. I think there is a path for us to get the best of both worlds here where we use pydocstyle but specify a limited set of error codes to check, then add an additional tool to do the pandas comparison at a later point. Disabling more of pydocstyle's checks in favor of pandas docstring choices may be our best options, as long as we can do so consistently.","createdAt":"2022-04-25T17:16:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108833799","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5CGERl","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"> I think the main things that pydocstyle catches that help us are errors that lead to improper Sphinx HTML generation. For instance, in this PR I fixed places where there are newlines in places where they should not be present in between section headers like \"Parameters\" and their underlines. There were also a few places where the summary line was not separated from subsequent lines. That can also lead to improper Sphinx.\r\n\r\n> We can choose to only lint a specific set of [pydocstyle's supported error codes](http://www.pydocstyle.org/en/stable/error_codes.html).\r\n\r\nThis is the direction I would like to see us go. Rather than enforce all of pydocstyle's rules on specific files, we should use it very broadly to fix a select set of minor issues that result in invalid Sphinx. Otherwise we should align 100% with pandas' wording wherever we can, instead of adhere to pydocstyle's grammatical preferences.\r\n\r\nHere's an overview of my thoughts on the error codes to enable. Any rule that causes significant friction should be scrutinized more carefully.\r\n\r\n- Missing Docstrings `D100-D107`. ❌ Skip all of these because they can't recognize inheritance or non-static docstrings injected at runtime. Missing docstrings are sometimes better than poorly formatted / badly rendering docstrings.\r\n- Whitespace Issues `D200-D215`. ✔️ This category is useful. I would enable whatever subset of these is most consistent with our intended NumPy-style docstrings. NumPy does not enable D203, D212, D213. Perhaps other exceptions are needed as well, I'm not sure.\r\n- Quotes Issues `D300-D302`. ✔️ I would enable all of these.\r\n- Docstring Content Issues `D400-D418`. Enable only a select few. Perhaps the following:\r\n\r\n| Enable? | Code | Description | Notes |\r\n|--|--|--|--|\r\n| ✔️  | D400 | First line should end with a period |\r\n| ❌  | D401 | First line should be in imperative mood |\r\n| ❌ | D401 | First line should be in imperative mood; try rephrasing |\r\n| ❌ | D402 | First line should not be the function’s “signature” | Appears to conflict with using parentheses, e.g. mode(s), and disabled by default for numpy conventions |\r\n| ✔️ | D403 | First word of the first line should be properly capitalized |\r\n| ❌ | D404 | First word of the docstring should not be This | Seems arbitrary -- might conflict with pandas\r\n| ✔️ | D405 | Section name should be properly capitalized |\r\n| ✔️ | D406 | Section name should end with a newline |\r\n| ✔️ | D407 | Missing dashed underline after section |\r\n| ✔️ | D408 | Section underline should be in the line following the section’s name |\r\n| ✔️ | D409 | Section underline should match the length of its name |\r\n| ✔️ | D410 | Missing blank line after section | Not sure if we need both this and D411?\r\n| ✔️ | D411 | Missing blank line before section | Not sure if we need both this and D410?\r\n| ✔️ | D412 | No blank lines allowed between a section header and its content |\r\n| ❌ | D413 | Missing blank line after last section | Disabled by default for numpy conventions |\r\n| ✔️ | D414 | Section has no content |\r\n| ❌ | D415 | First line should end with a period, question mark, or exclamation point | Disabled by default for numpy conventions |\r\n| ❌ | D416 | Section name should end with a colon | Disabled by default for numpy conventions |\r\n| ❌ | D417 | Missing argument descriptions in the docstring | Disabled by default for numpy conventions |\r\n| ✔️ | D418 | Function/ Method decorated with @overload shouldn’t contain a docstring |\r\n","createdAt":"2022-04-25T18:13:30Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108886629","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5CGG4Z","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Regarding missing docstrings, I agree in part. I have two main modifications to Bradley's comments above:\r\n- I think D102 is the only one that we'll actually need to disable because a) only methods are affected by inheritance, and b) methods are by far the most common use case for runtime injected docstrings. There may be a few violations of D103, especially in cuIO, but overall I think free functions will typically have docstrings written and I would rather manually noqa the few cases where we do need to skip D103. (We should of course disable D107 since we document that in the class docstring rather than the method)\r\n- When we initially apply D102 to a file (when it is added to the `match` in `python/.flake8`) D102 _should_ be enabled. The reason is that there are public-facing methods that are actually missing documentation and are not inheriting docstrings (not many, but they do exist). Maybe we just need to document that in this issue so that developers are aware that they need to check this.","createdAt":"2022-04-25T18:23:58Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108897305","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5CGO5z","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Agree with the excellent analysis from you both! ","createdAt":"2022-04-25T19:02:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1108930163","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GrTRu","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"We now lint everything with pydocstyle. The outstanding tasks here are to go through and enable a larger set of checks and systematically fix the issues.","createdAt":"2022-07-15T17:33:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1185756270","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5I-3pN","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"I merged #11582 which added most of the rules I discussed above in the `D2xx-D4xx` sections. I skipped `D100-D107` for now, and also skipped `D200, D202, D205, D400` because they would require a lot more work. Having just a few rules in place is good enough for the moment. I'd vote to leave this issue open until we add the rest of those (or decide against doing the work).","createdAt":"2022-08-23T17:42:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1224440397","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5I_SsA","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Agree - let's leave it open.","createdAt":"2022-08-23T18:25:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1224551168","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Utp_z","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Late-breaking, I hate D405 (title case): we're writing English, not German.","createdAt":"2023-02-07T18:25:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-1421254643","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59tVeY","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Note that going forward we will instead be enabling rules for ruff, not pydocstyle.","createdAt":"2024-05-14T00:12:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10711#issuecomment-2109036440","viewerDidAuthor":false}],"createdAt":"2022-04-21T23:27:15Z","id":"I_kwDOBWUGps5IOEMp","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMDEzOTg5MDIz","name":"doc","description":"Documentation","color":"1C62F8"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwyNTQ2NTIxMDI0","name":"improvement","description":"Improvement / enhancement to an existing function","color":"bfd4f2"}],"milestone":{"number":6,"title":"cuDF Python Refactoring","description":"Refactor Python layers to improve performance, robustness, and extensibility. Ongoing development is being guided by the roadmap and evolving development guide.","dueOn":null},"number":10711,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Lint all Python docstrings using ruff's pydocstyle rules","updatedAt":"2024-05-14T00:12:52Z","url":"https://github.com/rapidsai/cudf/issues/10711"}
