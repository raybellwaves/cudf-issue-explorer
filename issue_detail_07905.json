{"assignees":[],"author":{"id":"MDQ6VXNlcjc0NzQxMDAw","is_bot":false,"login":"Nicholas-7","name":""},"body":"Iâ€™d like for cuDF to support concatenating a series and something array-like into a series similarly to how Pandas functions.\r\n\r\n# Example:\r\n```\r\ncudfArray = cudf.concat([cudfSeriesB, cudfSeries], axis=1)\r\ncudfSeries\r\ncudfArray\r\ncudfSeries.str.cat(cudfArray, na_rep=\"-\")\r\n```\r\n\r\n# Result:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/column.py in as_column(arbitrary, nan_as_null, dtype, length)\r\n   1950             data = as_column(\r\n-> 1951                 memoryview(arbitrary), dtype=dtype, nan_as_null=nan_as_null\r\n   1952             )\r\n\r\nTypeError: memoryview: a bytes-like object is required, not 'DataFrame'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/column.py in as_column(arbitrary, nan_as_null, dtype, length)\r\n   1987                         if nan_as_null is None\r\n-> 1988                         else nan_as_null,\r\n   1989                     ),\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pyarrow/array.pxi in pyarrow.lib.array()\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/dataframe.py in __arrow_array__(self, type)\r\n   1018         raise TypeError(\r\n-> 1019             \"Implicit conversion to a host PyArrow Table via __arrow_array__ \"\r\n   1020             \"is not allowed, To explicitly construct a PyArrow Table, \"\r\n\r\nTypeError: Implicit conversion to a host PyArrow Table via __arrow_array__ is not allowed, To explicitly construct a PyArrow Table, consider using .to_arrow()\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-64-9046cb089696> in <module>\r\n      2 cudfSeries\r\n      3 cudfArray\r\n----> 4 cudfSeries.str.cat(cudfArray, na_rep=\"-\")\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/string.py in cat(self, others, sep, na_rep)\r\n    441             )\r\n    442         else:\r\n--> 443             other_cols = _get_cols_list(self._parent, others)\r\n    444             all_cols = [self._column] + other_cols\r\n    445             data = cpp_concatenate(\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/string.py in _get_cols_list(parent_obj, others)\r\n   5198             others = others.reindex(parent_index)\r\n   5199 \r\n-> 5200         return [column.as_column(others, dtype=\"str\")]\r\n   5201     else:\r\n   5202         raise TypeError(\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/column/column.py in as_column(arbitrary, nan_as_null, dtype, length)\r\n   1996                     data = as_column(sr, nan_as_null=nan_as_null, dtype=dtype)\r\n   1997                 elif np_type == np.str_:\r\n-> 1998                     sr = pd.Series(arbitrary, dtype=\"str\")\r\n   1999                     data = as_column(sr, nan_as_null=nan_as_null)\r\n   2000                 else:\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/series.py in __init__(self, data, index, dtype, name, copy, fastpath)\r\n    325                     data = data.copy()\r\n    326             else:\r\n--> 327                 data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\r\n    328 \r\n    329                 data = SingleBlockManager.from_array(data, index)\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/construction.py in sanitize_array(data, index, dtype, copy, raise_cast_failure)\r\n    461         subarr = construct_1d_arraylike_from_scalar(data, len(index), dtype)\r\n    462     else:\r\n--> 463         subarr = _try_cast(data, dtype, copy, raise_cast_failure)\r\n    464 \r\n    465     # scalar like, GH\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/construction.py in _try_cast(arr, dtype, copy, raise_cast_failure)\r\n    566             subarr = construct_1d_object_array_from_listlike(subarr)\r\n    567         elif not is_extension_array_dtype(subarr):\r\n--> 568             subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\r\n    569     except OutOfBoundsDatetime:\r\n    570         # in case of out of bound datetime64 -> always raise\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/pandas/core/dtypes/cast.py in construct_1d_ndarray_preserving_na(values, dtype, copy)\r\n   1621 \r\n   1622     if dtype is not None and dtype.kind == \"U\":\r\n-> 1623         subarr = lib.ensure_string_array(values, convert_na_value=False, copy=copy)\r\n   1624     else:\r\n   1625         subarr = np.array(values, dtype=dtype, copy=copy)\r\n\r\npandas/_libs/lib.pyx in pandas._libs.lib.ensure_string_array()\r\n\r\npandas/_libs/lib.pyx in pandas._libs.lib.ensure_string_array()\r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/numpy/core/_asarray.py in asarray(a, dtype, order)\r\n     81 \r\n     82     \"\"\"\r\n---> 83     return array(a, dtype, copy=False, order=order)\r\n     84 \r\n     85 \r\n\r\n/opt/conda/envs/rapids/lib/python3.7/site-packages/cudf/core/dataframe.py in __array__(self, dtype)\r\n   1009     def __array__(self, dtype=None):\r\n   1010         raise TypeError(\r\n-> 1011             \"Implicit conversion to a host NumPy array via __array__ is not \"\r\n   1012             \"allowed, To explicitly construct a GPU matrix, consider using \"\r\n   1013             \".as_gpu_matrix()\\nTo explicitly construct a host \"\r\n\r\nTypeError: Implicit conversion to a host NumPy array via __array__ is not allowed, To explicitly construct a GPU matrix, consider using .as_gpu_matrix()\r\nTo explicitly construct a host matrix, consider using .as_matrix()\r\n```\r\n\r\n**Pandas does this by Concatenating a series and something array-like (dataframe) into a series.:**\r\n \r\n```\r\npandasArray = pd.concat([pandasSeriesB, pandasSeries], axis=1)\r\npandasSeries\r\npandasArray\r\npandasSeries.str.cat(pandasArray, na_rep=\"-\")\r\n\r\n```\r\n**A cudf workaround was found doing the following:**\r\n\r\n```\r\ncudfArray = cudf.concat([cudfSeriesB, cudfSeries], axis=1)\r\nprint(cudfSeries)\r\nprint(cudfArray)\r\nprint(cudfSeriesB)\r\n#cudfArray = cudfArray.as_matrix()\r\ncudfArray[1].str.cat(cudfArray[0], na_rep=\"-\").str.cat(cudfSeries, na_rep=\"-\")\r\n```\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg0NDcyODU2NA==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-05-20T06:04:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7905#issuecomment-844728564","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg2MzQwMTcxOQ==","author":{"login":"beckernick"},"authorAssociation":"MEMBER","body":"@Nicholas-7 could you provide a reproducible example and additional context around whether you have a workaround?","createdAt":"2021-06-17T16:52:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7905#issuecomment-863401719","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps49geK9","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-02-07T21:04:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7905#issuecomment-1031922365","viewerDidAuthor":false}],"createdAt":"2021-04-08T01:26:40Z","id":"MDU6SXNzdWU4NTI5Njc3ODA=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxNTE1NjE2MjUz","name":"strings","description":"strings issues (C++ and Python)","color":"0e8a16"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":7905,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Support string concatenation of a Series and something array-like into a Series ","updatedAt":"2024-02-23T18:43:00Z","url":"https://github.com/rapidsai/cudf/issues/7905"}
