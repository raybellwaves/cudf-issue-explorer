{"assignees":[{"id":"MDQ6VXNlcjY0ODg4NDg=","login":"karthikeyann","name":"Karthikeyan"}],"author":{"id":"MDQ6VXNlcjkzNDA4NA==","is_bot":false,"login":"andygrove","name":"Andy Grove"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen reading JSON in Spark, if a field has mixed types,  Spark will infer the type as String to avoid data loss due to the uncertainty of the actual data type.\r\n\r\nFor example, given this input file, Spark will read column `bar` as a numeric type and column `foo` as a string type.\r\n\r\n```\r\n$ cat test.json\r\n{ \"foo\": [1,2,3], \"bar\": 123 }\r\n{ \"foo\": { \"a\": 1 }, \"bar\": 456 }\r\n```\r\n\r\nHere is the Spark code that demonstrates this:\r\n\r\n```\r\nscala> val df = spark.read.json(\"test.json\")\r\ndf: org.apache.spark.sql.DataFrame = [bar: bigint, foo: string]                 \r\n\r\nscala> df.show\r\n+---+-------+\r\n|bar|    foo|\r\n+---+-------+\r\n|123|[1,2,3]|\r\n|456|{\"a\":1}|\r\n+---+-------+\r\n```\r\n\r\nCurrently, Spark RAPIDS fails for this example because cuDF does not support mixed types in a column:\r\n\r\n```\r\nCaused by: ai.rapids.cudf.CudfException: CUDF failure at: /home/jenkins/agent/workspace/jenkins-spark-rapids-jni_nightly-pre_release-181-cuda11/thirdparty/cudf/cpp/src/io/json/json_column.cu:577: A mix of lists and structs within the same column is not supported\r\n  at ai.rapids.cudf.Table.readJSON(Native Method)\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would like the ability to specify to read certain columns as unparsed strings.\r\n\r\n**Describe alternatives you've considered**\r\nI am also exploring some workarounds in the Spark RAPIDS plugin.\r\n\r\n**Additional context**\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5n8Alo","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"We have some code that @ttnghia wrote. It will convert a range of tokens to a normalized string that matches what Spark wants. We did this for some Spark specific functionality with JSON parsing related to returning a Map instead of a Struct.\r\n\r\nhttps://github.com/NVIDIA/spark-rapids-jni/blob/54ef9991f46fa873d580315212aeae345da7152a/src/main/cpp/src/map_utils.cu#L63-L112\r\n\r\nI am not sure if this is really something that CUDF wants, but it is at least a starting point. ","createdAt":"2023-10-02T21:20:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14239#issuecomment-1743784296","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5uAtgo","author":{"login":"andygrove"},"authorAssociation":"CONTRIBUTOR","body":"Here are some examples, showing input and expected output.\r\n\r\n```\r\n# Example 1: Mixed primitive types in struct\r\n\r\nINPUT:\r\n\r\n{ \"a\": \"123\" }\r\n{ \"a\": 123 }\r\n\r\nEXPECTED:\r\n\r\n+-----------+\r\n|    my_json|\r\n+-----------+\r\n|{\"a\":\"123\"}|\r\n|{\"a\":\"123\"}|\r\n+-----------+\r\n\r\n# Example 2: Mixed structs and lists in struct\r\n\r\nINPUT:\r\n\r\n{ \"a\": [1,2,3] }\r\n{ \"a\": { \"b\": 1 } }\r\n\r\nEXPECTED:\r\n\r\n+-----------------+\r\n|          my_json|\r\n+-----------------+\r\n|  {\"a\":\"[1,2,3]\"}|\r\n|{\"a\":\"{\\\"b\\\":1}\"}|\r\n+-----------------+\r\n\r\n# Example 3: Mixed structs and primitives in struct\r\n\r\nINPUT:\r\n\r\n{ \"a\": \"fox\" }\r\n{ \"a\": { \"b\": 1 } }\r\n\r\nEXPECTED:\r\n\r\n+-----------------+\r\n|my_json          |\r\n+-----------------+\r\n|{\"a\":\"fox\"}      |\r\n|{\"a\":\"{\\\"b\\\":1}\"}|\r\n+-----------------+\r\n\r\n# Example 4: Mixed lists and primitives in struct\r\n\r\nINPUT:\r\n\r\n{ \"a\": [1,2,3] }\r\n{ \"a\": \"fox\" }\r\n\r\nEXPECTED:\r\n\r\n+---------------+\r\n|my_json        |\r\n+---------------+\r\n|{\"a\":\"[1,2,3]\"}|\r\n|{\"a\":\"fox\"}    |\r\n+---------------+\r\n```","createdAt":"2023-12-07T16:43:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845680168","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5uAuyB","author":{"login":"andygrove"},"authorAssociation":"CONTRIBUTOR","body":"There is a separate use case for arrays where the array element type differs between records. Spark infers the type as `Array<String>` in this case.\r\n\r\nThis is not necessarily a high priority and could be split out into a separate issue, but I'd like to point it out here for visibility.\r\n\r\n```\r\n# Example: Mixed primitive arrays in struct\r\n\r\nINPUT:\r\n\r\n{ \"a\": [1,2,3] }\r\n{ \"a\": [true,false,true] }\r\n{ \"a\": [\"a\", \"b\", \"c\"] }\r\n\r\nEXPECTED:\r\n\r\n+-----------------------------+\r\n|my_json                      |\r\n+-----------------------------+\r\n|{\"a\":[\"1\",\"2\",\"3\"]}          |\r\n|{\"a\":[\"true\",\"false\",\"true\"]}|\r\n|{\"a\":[\"a\",\"b\",\"c\"]}          |\r\n+-----------------------------+\r\n```","createdAt":"2023-12-07T16:46:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845685377","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps50MWJZ","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"We made significant progress on this issue with #14572, and I believe we will be able to close it after #14936. @andygrove would you please let us know if there are other cases to consider?","createdAt":"2024-02-16T21:58:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14239#issuecomment-1949393497","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps502XgJ","author":{"login":"andygrove"},"authorAssociation":"CONTRIBUTOR","body":"For all the examples in https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845680168, I see the correct results with https://github.com/rapidsai/cudf/pull/14936.\r\n\r\nFor the mixed array example in https://github.com/rapidsai/cudf/issues/14239#issuecomment-1845685377 I still do not see the correct results, so I filed a separate issue for this one (https://github.com/rapidsai/cudf/issues/15120).\r\n\r\n","createdAt":"2024-02-22T22:17:14Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14239#issuecomment-1960409097","viewerDidAuthor":false}],"createdAt":"2023-09-29T21:37:44Z","id":"I_kwDOBWUGps5yb-qM","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3NTAz","name":"2 - In Progress","description":"Currently a work in progress","color":"fef2c0"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":13,"title":"Nested JSON reader","description":"Data-parallel reader for nested JSON text data","dueOn":null},"number":14239,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Add option to read JSON field as unparsed string","updatedAt":"2024-02-22T22:17:31Z","url":"https://github.com/rapidsai/cudf/issues/14239"}
