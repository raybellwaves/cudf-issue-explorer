{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\n`cudf::contains`, specifically the column overload, searches for a bunch of needles in a haystack. If any of the needles are null, the return value has nulls in the same location. The detail API has finer-grained control over whether nulls should compare equal (so that if the haystack contains a null and one of needles is null, the output column has a `true` value in that slot).\r\n\r\nIt would be nice to be able to control whether the bitmask is copied from the needles to the result or not. In Python cudf, we use `contains` to implement `Series.isin` where the semantics are that nulls are just treated as any other value. So if the needles contain a null, the result is true or false depending on whether the haystack also has a null. Right now, we call contains, and then must perform some post-processing to obtain a result that internally has already been computed.\r\n\r\n**Describe the solution you'd like**\r\n\r\nA flag specifying whether `contains` masks its output.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAbove-board, I do this in Python with:\r\n\r\n```\r\nif needles.null_count > 0:\r\n    result.fillna(haystack.null_count > 0)\r\n```\r\nThis is an extra allocation + kernel launch.\r\n\r\nThe cheap way of doing it is to obtain the result, and then drop the mask on the floor. This happens to work due to the way `cudf::contains` is implemented. However, I would rather not do this because libcudf explicitly does not guarantee that the masked out entries of a column contain valid data, so I am relying on an implementation detail which could change.","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-11-28T17:13:09Z","id":"I_kwDOBWUGps54GTxg","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":null,"number":14515,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Allow control of mask state in return value of `cudf::contains`","updatedAt":"2024-02-23T17:56:33Z","url":"https://github.com/rapidsai/cudf/issues/14515"}
