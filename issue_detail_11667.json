{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nAs part of #11129 the row lexicographic comparator became templated on whether or not the tables being compared contain any nested columns. This templating was necessary to guarantee that nested and non-nested code paths were compiled separately. That, in turn, was required because the compiler fails to completely optimize the non-nested code path due to the complexity of the nested code path, which slows down code even when no nested data is present. Unfortunately, this now means that calling code must dispatch to separate paths depending on whether the table being operated on has nested data. In addition to being cumbersome in and of itself, this requirement makes code using the lexicographic comparator different from code using the equality comparator.\r\n\r\n**Describe the solution you'd like**\r\nWe should consider alternative APIs for the comparator that abstract the nested column dispatch away from the call-site. One option that I considered is to define a wrapper function that accepts a callable to apply (e.g. `thrust::sort`) that requires the comparator as an argument. This wrapper function could instantiate the appropriate comparator and then call the provided callable. @jrhemstad suggested that [this could be accomplished using a visitor pattern](https://godbolt.org/z/ra76jbM78). We should prototype this approach.\r\n\r\n**Describe alternatives you've considered**\r\nI have not yet come up with any alternative solutions, but it would be nice to try to find an even less invasive approach if possible since the visitor pattern does add an extra level of indirection that would be nice to avoid.\r\n\r\n**Additional context**\r\nN/A\r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2022-09-08T17:34:57Z","id":"I_kwDOBWUGps5Rdsoc","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwyNTQ2NTIxMDI0","name":"improvement","description":"Improvement / enhancement to an existing function","color":"bfd4f2"}],"milestone":{"number":2,"title":"List and Struct data types and operations","description":"","dueOn":null},"number":11667,"projectCards":[{"project":{"name":"Other Issues"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"state":"OPEN","title":"[FEA] Reduce disparity between nested and non-nested column handling in lexicographic comparator","updatedAt":"2022-11-21T05:28:08Z","url":"https://github.com/rapidsai/cudf/issues/11667"}
