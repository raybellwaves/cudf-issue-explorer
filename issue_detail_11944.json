{"assignees":[{"id":"MDQ6VXNlcjExMjY5ODE=","login":"wence-","name":"Lawrence Mitchell"}],"author":{"id":"MDQ6VXNlcjEzOTAwMTcx","is_bot":false,"login":"Ullar-Kask","name":"Ãœllar Kask"},"body":"**Describe the bug**\r\n\r\nThis does not work:\r\n\r\ndf.loc[df['column'] =='value', 'column2'] = ['0','1']\r\n\r\nTypeError: Implicit conversion to a host NumPy array via __array__ is not allowed, To explicitly construct a GPU matrix, consider using .to_cupy()\r\nTo explicitly construct a host matrix, consider using .to_numpy().\r\n\r\nIntegers do work:\r\ndf.loc[df['column']=='value', 'column2'] = [0,1]\r\n\r\nBoth work in pandas.\r\n\r\nRapids 22.08\r\nUbuntu 20\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5Mo_o4","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@Ullar-Kask could you include a MWE, specifically how you constructed your `df`? Here is what I observe on the latest version of cudf, which looks like the same issue as #11298:\r\n```\r\n>>> df = cudf.DataFrame({'a': ['c', 'd', 'e'], 'b': ['x', 'y', 'z']})\r\n>>> df.loc[df['a'] == 'c', 'b'] = ['0']\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/nvme/0/vyasr/rapids/cudf/python/cudf/cudf/core/dataframe.py\", line 149, in __setitem__\r\n    return self._setitem_tuple_arg(key, value)\r\n  File \"/nvme/0/vyasr/rapids/compose/etc/conda/cuda_11.5/envs/rapids/lib/python3.8/contextlib.py\", line 75, in inner\r\n    return func(*args, **kwds)\r\n  File \"/nvme/0/vyasr/rapids/cudf/python/cudf/cudf/core/dataframe.py\", line 380, in _setitem_tuple_arg\r\n    value = cupy.asarray(value)\r\n  File \"/nvme/0/vyasr/rapids/compose/etc/conda/cuda_11.5/envs/rapids/lib/python3.8/site-packages/cupy/_creation/from_data.py\", line 76, in asarray\r\n    return _core.array(a, dtype, False, order)\r\n  File \"cupy/_core/core.pyx\", line 2357, in cupy._core.core.array\r\n  File \"cupy/_core/core.pyx\", line 2381, in cupy._core.core.array\r\n  File \"cupy/_core/core.pyx\", line 2509, in cupy._core.core._array_default\r\nValueError: Unsupported dtype <U1\r\n```","createdAt":"2022-10-20T16:09:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285814840","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5MpIU9","author":{"login":"quasiben"},"authorAssociation":"MEMBER","body":"@wence- is also working on some potentially related fixes in #11904 ","createdAt":"2022-10-20T16:36:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285850429","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5MpRiR","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"As a note, I believe this will work:\r\n\r\n\r\n```python\r\ndf.loc[df['column'] =='value', 'column2'] = cudf.Scalar(['0','1'])\r\n```\r\n\r\n(this is still a bug -- we shouldn't require the user to construct a `Scalar` manually)","createdAt":"2022-10-20T17:10:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285888145","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5MpbFO","author":{"login":"Ullar-Kask"},"authorAssociation":"NONE","body":"@vyasr  I've tried various ways to circumvent the error, e.g.\r\n\r\n`df.loc[df['column'] =='value', 'column2'] = ['0','1']`\r\nor,\r\n```\r\nneg_lst = random.choices(products_lst, k=len(lst))\r\ndf.loc[df['column'] =='value', 'column2'] = neg_lst \r\n```\r\nor,\r\n`df.loc[df['column'] =='value', 'column2'] = cudf.Series(neg_lst)`\r\n\r\nbut all fail with slightly different error msgs:\r\n`ValueError: Unsupported dtype <U1`\r\nor\r\n`ValueError: Unsupported dtype <U6`\r\nor\r\n\r\n```\r\nTypeError: Implicit conversion to a host NumPy array via array is not allowed, To explicitly construct a GPU matrix, consider using .to_cupy()\r\nTo explicitly construct a host matrix, consider using .to_numpy().\r\n```\r\n\r\n","createdAt":"2022-10-20T17:47:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1285927246","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5MtZZa","author":{"login":"Ullar-Kask"},"authorAssociation":"NONE","body":"`df = cudf.DataFrame({'a': ['c', 'd', 'e'], 'b': ['x', 'y', 'z']})`\r\n\r\nBTW, this works:\r\n`df['c'] = cudf.Series(['1', '2', '3'])`\r\n\r\nThis also works:\r\n`df.loc[:,'d'] = cudf.Series(['1', '2', '3'])`\r\n\r\nBut the last statement fails when re-executed:\r\n```\r\nTypeError: Implicit conversion to a host NumPy array via __array__ is not allowed, To explicitly construct a GPU matrix, consider using .to_cupy()\r\nTo explicitly construct a host matrix, consider using .to_numpy().\r\n```","createdAt":"2022-10-21T13:33:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1286968922","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5MtaE6","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Here's a complete example:\r\n```python\r\nimport cudf\r\ndf = cudf.DataFrame(data={\"a\": [\"yes\", \"no\"], \"b\": [[\"l1\", \"l2\"], [\"c\", \"d\"]]})\r\n\r\ndf.loc[df.a == \"yes\", \"b\"] = [\"hello\"]\r\n```\r\n\r\nThis goes through `_DataFrameLocIndexer._setitem_tuple_arg` for which `is_scalar` returns `False`, `isinstance(value, DataFrame)` also returns `False`, so we try and turn the value `[\"0\", \"1\"]` into a cupy array which fails because cupy can't handle `str` dtypes.\r\n\r\nNow it gets messy, because there's some logic error in list column setitem that precludes many of the other approaches from working.\r\n\r\nAs @shwina says, for the specific case of setting a \"scalar\" broadcastable value:\r\n\r\n```\r\ndf.loc[df.a == \"yes\", \"b\"] = cudf.Scalar([\"hello\"])\r\n```\r\n\r\nworks\r\n\r\nIf you want to set something more complicated (say):\r\n\r\n```python\r\ndf = cudf.DataFrame(data={\"a\": [\"yes\", \"no\", \"yes\"], \"b\": [[\"l1\", \"l2\"], [\"c\", \"d\"], [\"e\"]]})\r\n\r\ndf.loc[df.a == \"yes\", \"b\"] = [[\"a\"], [\"g\"]]\r\n```\r\n\r\nThis fails, and all of the workarounds are very internals-heavy:\r\n\r\n<details>\r\n<summary>\r\nWARNING, WARNING: Do not use this code!\r\n</summary>\r\n\r\n```python\r\nimport cudf\r\nfrom cudf.core.column.column import ColumnBase, as_column\r\ndf = cudf.DataFrame(data={\"a\": [\"yes\", \"no\", \"yes\"], \"b\": [[\"l1\", \"l2\"], [\"c\", \"d\"], [\"e\"]]})\r\n\r\nColumnBase.__setitem__(df.b._column, (df.a == \"yes\")._column, as_column([[\"x\"], [\"y\"]])\r\n\r\nIn [138]: df\r\nOut[138]: \r\n     a       b\r\n0  yes     [x]\r\n1   no  [c, d]\r\n2  yes     [y]\r\n```\r\n\r\n</details>","createdAt":"2022-10-21T13:35:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1286971706","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Mtada","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"> This also works: `df.loc[:,'d'] = cudf.Series(['1', '2', '3'])`\r\n> \r\n> But the last statement fails when re-executed:\r\n\r\nThis works the first time because it's adding a new column. The second time you execute things, the column already exists so you go down the bad code path.","createdAt":"2022-10-21T13:37:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1286973274","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Nhfnz","author":{"login":"Ullar-Kask"},"authorAssociation":"NONE","body":"I've found a workaround for my problem. Instead of conditional assignment of string list I create a dataframe using the original index, populate the df and then merge with the original df joining by index:\r\n\r\n```\r\ndf_neg= cudf.DataFrame({'col1': cudf.Series(dtype='object')})\r\n\r\nfor loop:\r\n   mask = df[<condition>].index\r\n   df_tmp = cudf.DataFrame([<some string list>], index=mask, columns=['col1'])\r\n   df_neg= cudf.concat([df_neg, df_tmp], axis=0)\r\n\r\n# After the loop:\r\ndf = df.merge(df_neg, how='left', right_index=True, left_index=True)\r\n```","createdAt":"2022-11-02T15:07:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11944#issuecomment-1300625907","viewerDidAuthor":false}],"createdAt":"2022-10-19T06:53:58Z","id":"I_kwDOBWUGps5UTijR","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":11944,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Assignment of string list to column doesn't work","updatedAt":"2022-11-29T14:53:30Z","url":"https://github.com/rapidsai/cudf/issues/11944"}
