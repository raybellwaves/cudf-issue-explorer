{"assignees":[{"id":"MDQ6VXNlcjExNjY0MjU5","login":"galipremsagar","name":"GALI PREM SAGAR"}],"author":{"id":"MDQ6VXNlcjg0NTczODg=","is_bot":false,"login":"beckernick","name":"Nick Becker"},"body":"Dask cuDF `cummax` and `cummin` fail due to  missing axis argument in `cuDF.Series.where` if npartitions > 1.\r\n\r\n```python\r\nimport cudf\r\nimport dask_cudf\r\n​\r\ndf = cudf.DataFrame({\"x\": range(10)})\r\nddf = dask_cudf.from_cudf(df, 2)\r\n​\r\nddf.x.cummin().compute()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nInput In [1], in <module>\r\n      4 df = cudf.DataFrame({\"x\": range(10)})\r\n      5 ddf = dask_cudf.from_cudf(df, 2)\r\n----> 7 ddf.x.cummin().compute()\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/base.py:288, in DaskMethodsMixin.compute(self, **kwargs)\r\n    264 def compute(self, **kwargs):\r\n    265     \"\"\"Compute this dask collection\r\n    266 \r\n    267     This turns a lazy Dask collection into its in-memory equivalent.\r\n   (...)\r\n    286     dask.base.compute\r\n    287     \"\"\"\r\n--> 288     (result,) = compute(self, traverse=False, **kwargs)\r\n    289     return result\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/base.py:571, in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)\r\n    568     keys.append(x.__dask_keys__())\r\n    569     postcomputes.append(x.__dask_postcompute__())\r\n--> 571 results = schedule(dsk, keys, **kwargs)\r\n    572 return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:553, in get_sync(dsk, keys, **kwargs)\r\n    548 \"\"\"A naive synchronous version of get_async\r\n    549 \r\n    550 Can be useful for debugging.\r\n    551 \"\"\"\r\n    552 kwargs.pop(\"num_workers\", None)  # if num_workers present, remove it\r\n--> 553 return get_async(\r\n    554     synchronous_executor.submit,\r\n    555     synchronous_executor._max_workers,\r\n    556     dsk,\r\n    557     keys,\r\n    558     **kwargs,\r\n    559 )\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:496, in get_async(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)\r\n    494 while state[\"waiting\"] or state[\"ready\"] or state[\"running\"]:\r\n    495     fire_tasks(chunksize)\r\n--> 496     for key, res_info, failed in queue_get(queue).result():\r\n    497         if failed:\r\n    498             exc, tb = loads(res_info)\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/concurrent/futures/_base.py:437, in Future.result(self, timeout)\r\n    435     raise CancelledError()\r\n    436 elif self._state == FINISHED:\r\n--> 437     return self.__get_result()\r\n    439 self._condition.wait(timeout)\r\n    441 if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/concurrent/futures/_base.py:389, in Future.__get_result(self)\r\n    387 if self._exception:\r\n    388     try:\r\n--> 389         raise self._exception\r\n    390     finally:\r\n    391         # Break a reference cycle with the exception in self._exception\r\n    392         self = None\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:538, in SynchronousExecutor.submit(self, fn, *args, **kwargs)\r\n    536 fut = Future()\r\n    537 try:\r\n--> 538     fut.set_result(fn(*args, **kwargs))\r\n    539 except BaseException as e:\r\n    540     fut.set_exception(e)\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:234, in batch_execute_tasks(it)\r\n    230 def batch_execute_tasks(it):\r\n    231     \"\"\"\r\n    232     Batch computing of multiple tasks with `execute_task`\r\n    233     \"\"\"\r\n--> 234     return [execute_task(*a) for a in it]\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:234, in <listcomp>(.0)\r\n    230 def batch_execute_tasks(it):\r\n    231     \"\"\"\r\n    232     Batch computing of multiple tasks with `execute_task`\r\n    233     \"\"\"\r\n--> 234     return [execute_task(*a) for a in it]\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:225, in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    223     failed = False\r\n    224 except BaseException as e:\r\n--> 225     result = pack_exception(e, dumps)\r\n    226     failed = True\r\n    227 return key, result, failed\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:220, in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    218 try:\r\n    219     task, data = loads(task_info)\r\n--> 220     result = _execute_task(task, data)\r\n    221     id = get_id()\r\n    222     result = dumps((result, id))\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/core.py:119, in _execute_task(arg, cache, dsk)\r\n    115     func, args = arg[0], arg[1:]\r\n    116     # Note: Don't assign the subtask results to a variable. numpy detects\r\n    117     # temporaries by their reference count and can execute certain\r\n    118     # operations in-place.\r\n--> 119     return func(*(_execute_task(a, cache) for a in args))\r\n    120 elif not ishashable(arg):\r\n    121     return arg\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/dataframe/methods.py:314, in cummin_aggregate(x, y)\r\n    312 def cummin_aggregate(x, y):\r\n    313     if is_series_like(x) or is_dataframe_like(x):\r\n--> 314         return x.where((x < y) | x.isnull(), y, axis=x.ndim - 1)\r\n    315     else:  # scalar\r\n    316         return x if x < y else y\r\n\r\nTypeError: where() got an unexpected keyword argument 'axis'\r\n```\r\n\r\n```python\r\nimport cudf\r\nimport dask_cudf\r\n​\r\ndf = cudf.DataFrame({\"x\": range(10)})\r\nddf = dask_cudf.from_cudf(df, 2)\r\n​\r\nddf.x.cummin().compute()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nInput In [9], in <module>\r\n      4 df = cudf.DataFrame({\"x\": range(10)})\r\n      5 ddf = dask_cudf.from_cudf(df, 2)\r\n----> 7 ddf.x.cummin().compute()\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/base.py:288, in DaskMethodsMixin.compute(self, **kwargs)\r\n    264 def compute(self, **kwargs):\r\n    265     \"\"\"Compute this dask collection\r\n    266 \r\n    267     This turns a lazy Dask collection into its in-memory equivalent.\r\n   (...)\r\n    286     dask.base.compute\r\n    287     \"\"\"\r\n--> 288     (result,) = compute(self, traverse=False, **kwargs)\r\n    289     return result\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/base.py:571, in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)\r\n    568     keys.append(x.__dask_keys__())\r\n    569     postcomputes.append(x.__dask_postcompute__())\r\n--> 571 results = schedule(dsk, keys, **kwargs)\r\n    572 return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:553, in get_sync(dsk, keys, **kwargs)\r\n    548 \"\"\"A naive synchronous version of get_async\r\n    549 \r\n    550 Can be useful for debugging.\r\n    551 \"\"\"\r\n    552 kwargs.pop(\"num_workers\", None)  # if num_workers present, remove it\r\n--> 553 return get_async(\r\n    554     synchronous_executor.submit,\r\n    555     synchronous_executor._max_workers,\r\n    556     dsk,\r\n    557     keys,\r\n    558     **kwargs,\r\n    559 )\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:496, in get_async(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)\r\n    494 while state[\"waiting\"] or state[\"ready\"] or state[\"running\"]:\r\n    495     fire_tasks(chunksize)\r\n--> 496     for key, res_info, failed in queue_get(queue).result():\r\n    497         if failed:\r\n    498             exc, tb = loads(res_info)\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/concurrent/futures/_base.py:437, in Future.result(self, timeout)\r\n    435     raise CancelledError()\r\n    436 elif self._state == FINISHED:\r\n--> 437     return self.__get_result()\r\n    439 self._condition.wait(timeout)\r\n    441 if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/concurrent/futures/_base.py:389, in Future.__get_result(self)\r\n    387 if self._exception:\r\n    388     try:\r\n--> 389         raise self._exception\r\n    390     finally:\r\n    391         # Break a reference cycle with the exception in self._exception\r\n    392         self = None\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:538, in SynchronousExecutor.submit(self, fn, *args, **kwargs)\r\n    536 fut = Future()\r\n    537 try:\r\n--> 538     fut.set_result(fn(*args, **kwargs))\r\n    539 except BaseException as e:\r\n    540     fut.set_exception(e)\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:234, in batch_execute_tasks(it)\r\n    230 def batch_execute_tasks(it):\r\n    231     \"\"\"\r\n    232     Batch computing of multiple tasks with `execute_task`\r\n    233     \"\"\"\r\n--> 234     return [execute_task(*a) for a in it]\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:234, in <listcomp>(.0)\r\n    230 def batch_execute_tasks(it):\r\n    231     \"\"\"\r\n    232     Batch computing of multiple tasks with `execute_task`\r\n    233     \"\"\"\r\n--> 234     return [execute_task(*a) for a in it]\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:225, in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    223     failed = False\r\n    224 except BaseException as e:\r\n--> 225     result = pack_exception(e, dumps)\r\n    226     failed = True\r\n    227 return key, result, failed\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/local.py:220, in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    218 try:\r\n    219     task, data = loads(task_info)\r\n--> 220     result = _execute_task(task, data)\r\n    221     id = get_id()\r\n    222     result = dumps((result, id))\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/core.py:119, in _execute_task(arg, cache, dsk)\r\n    115     func, args = arg[0], arg[1:]\r\n    116     # Note: Don't assign the subtask results to a variable. numpy detects\r\n    117     # temporaries by their reference count and can execute certain\r\n    118     # operations in-place.\r\n--> 119     return func(*(_execute_task(a, cache) for a in args))\r\n    120 elif not ishashable(arg):\r\n    121     return arg\r\n\r\nFile ~/conda/envs/rapids-22.02/lib/python3.8/site-packages/dask/dataframe/methods.py:314, in cummin_aggregate(x, y)\r\n    312 def cummin_aggregate(x, y):\r\n    313     if is_series_like(x) or is_dataframe_like(x):\r\n--> 314         return x.where((x < y) | x.isnull(), y, axis=x.ndim - 1)\r\n    315     else:  # scalar\r\n    316         return x if x < y else y\r\n\r\nTypeError: where() got an unexpected keyword argument 'axis'\r\n```\r\n\r\n\r\nEnv:\r\n<details>\r\n!conda list | grep \"rapids\\|dask\"\r\n# packages in environment at /home/nicholasb/conda/envs/rapids-22.02:\r\ncucim                     22.02.00a220121 cuda_11_py38_g0e199fc_37    rapidsai-nightly\r\ncudf                      22.02.00a220121 cuda_11_py38_g53a31d1b01_303    rapidsai-nightly\r\ncudf_kafka                22.02.00a220121 py38_g53a31d1b01_303    rapidsai-nightly\r\ncugraph                   22.02.00a220119 cuda11_py38_gefbff09a_70    rapidsai-nightly\r\ncuml                      22.02.00a220118 cuda11_py38_g592834c13_88    rapidsai-nightly\r\ncusignal                  22.02.00a220121 py39_g80eadba_11    rapidsai-nightly\r\ncuspatial                 22.02.00a220121 py38_g5d619e7_19    rapidsai-nightly\r\ncustreamz                 22.02.00a220121 py38_g53a31d1b01_303    rapidsai-nightly\r\ncuxfilter                 22.02.00a220121 py38_g4287bac_13    rapidsai-nightly\r\ndask                      2021.11.2          pyhd8ed1ab_0    conda-forge\r\ndask-core                 2021.11.2          pyhd8ed1ab_0    conda-forge\r\ndask-cuda                 22.02.00a220121         py38_49    rapidsai-nightly\r\ndask-cudf                 22.02.00a220121 cuda_11_py38_g53a31d1b01_303    rapidsai-nightly\r\nlibcucim                  22.02.00a220121 cuda11_g0e199fc_37    rapidsai-nightly\r\nlibcudf                   22.02.00a220121 cuda11_g53a31d1b01_303    rapidsai-nightly\r\nlibcudf_kafka             22.02.00a220121 g53a31d1b01_303    rapidsai-nightly\r\nlibcugraph                22.02.00a220119 cuda11_gefbff09a_70    rapidsai-nightly\r\nlibcugraph_etl            22.02.00a220121 cuda11_gc0096791_73    rapidsai-nightly\r\nlibcuml                   22.02.00a220118 cuda11_g592834c13_88    rapidsai-nightly\r\nlibcumlprims              22.02.00a220119 cuda11_g0342bdb_15    rapidsai-nightly\r\nlibcuspatial              22.02.00a220121 cuda11_g5d619e7_19    rapidsai-nightly\r\nlibrmm                    22.02.00a220121 cuda11_g30eb83b_31    rapidsai-nightly\r\nlibxgboost                1.5.0dev.rapidsai22.02      cuda11.2_0    rapidsai-nightly\r\nptxcompiler               0.2.0            py38hb739d79_0    rapidsai-nightly\r\npy-xgboost                1.5.0dev.rapidsai22.02  cuda11.2py38_0    rapidsai-nightly\r\npylibcugraph              22.02.00a220119 cuda11_py38_gefbff09a_70    rapidsai-nightly\r\nrapids                    22.02.00a220118 cuda11_py38_g3986715_134    rapidsai-nightly\r\nrapids-xgboost            22.02.00a220118 cuda11_py38_g3986715_134    rapidsai-nightly\r\nrmm                       22.02.00a220121 cuda11_py38_g30eb83b_31_has_cma    rapidsai-nightly\r\nucx                       1.12.0+gd367332      cuda11.2_0    rapidsai-nightly\r\nucx-proc                  1.0.0                       gpu    rapidsai-nightly\r\nucx-py                    0.24.0a220121   py38_gd367332_26    rapidsai-nightly\r\nxgboost                   1.5.0dev.rapidsai22.02  cuda11.2py38_0    rapidsai-nightly\r\n</details>","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4-XeOH","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-02-20T23:03:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10104#issuecomment-1046340487","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5DlB5U","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-05-21T23:03:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10104#issuecomment-1133780564","viewerDidAuthor":false}],"createdAt":"2022-01-21T16:51:11Z","id":"I_kwDOBWUGps5CM767","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxMTg1MjQwODk4","name":"dask","description":"Dask issue","color":"fcc25d"}],"milestone":null,"number":10104,"projectCards":[{"project":{"name":"v23.02 Release"},"column":{"name":"Issue-Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Dask cuDF cummax and cummin fail due to missing axis argument in cuDF.Series.where","updatedAt":"2022-07-25T16:21:19Z","url":"https://github.com/rapidsai/cudf/issues/10104"}
