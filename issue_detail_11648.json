{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"Currently `series.values` and especially `series.to_cupy()` are substantially slower than `cupy.asarray(series)`. \r\n```\r\nIn [2]: s = cudf.Series(range(10000))\r\n\r\nIn [3]: %timeit s.values\r\n81.4 µs ± 1.68 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [4]: %timeit cp.asarray(s)\r\n19.1 µs ± 168 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\r\n\r\nIn [5]: %timeit s.to_cupy()\r\n349 µs ± 75.2 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)\r\n```\r\n\r\nThere are at least two obvious potential culprits in `Frame._to_array` (the underlying method for `to_cupy`):\r\n- [It always performs an extra allocation](https://github.com/rapidsai/cudf/blob/branch-22.10/python/cudf/cudf/core/frame.py#L484), even when `copy=False`.\r\n- [It performs dtype inference using `find_common_dtype`](https://github.com/rapidsai/cudf/blob/branch-22.10/python/cudf/cudf/core/frame.py#L479), which is _slow_ (and slower for `DataFrame`s with many columns):\r\n```\r\nIn [11]: df = cudf.DataFrame({'a': [1], 'b': [3.], 'c': ['a']})\r\n\r\nIn [12]: %timeit cudf.utils.dtypes.find_common_type([col.dtype for col in df._data.values()])\r\n53.6 µs ± 530 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [13]: df = cudf.DataFrame({'a': [1], 'b': [3.]})\r\n\r\nIn [14]: %timeit cudf.utils.dtypes.find_common_type([col.dtype for col in df._data.values()])\r\n39.8 µs ± 1.01 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\r\n```\r\n\r\nThe implementation of `values` drops down to `ColumnBase.values` and requires some deeper consideration. However, since we use `.values` frequently internally (and we occasionally use `to_cupy`) we are likely giving up a lot of performance. We should profile these functions to determine the bottlenecks, and if there are valid reasons for them we should establish some policies on how to select the right function to use when performing these conversions to arrays internally. While this exact analogy does not hold for `DataFrame` (because that doesn't support the conversion to an array), any optimization that we make for `Series` will likely also help speed up `DataFrame` operations.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5LYueR","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-10-03T00:16:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11648#issuecomment-1264773009","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-O59F","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"CC @mroeschke (might be of interest given some of your recent comments about converting to device and all the internal reworkings you're doing with our columns)","createdAt":"2024-05-17T15:22:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/11648#issuecomment-2117836613","viewerDidAuthor":false}],"createdAt":"2022-09-02T23:24:22Z","id":"I_kwDOBWUGps5RGlsR","labels":[{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"},{"id":"MDU6TGFiZWwyNTQ2NTIxMDI0","name":"improvement","description":"Improvement / enhancement to an existing function","color":"bfd4f2"}],"milestone":{"number":6,"title":"cuDF Python Refactoring","description":"Refactor Python layers to improve performance, robustness, and extensibility. Ongoing development is being guided by the roadmap and evolving development guide.","dueOn":null},"number":11648,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"Optimize `to_cupy` and `values`","updatedAt":"2024-05-17T15:22:11Z","url":"https://github.com/rapidsai/cudf/issues/11648"}
