{"assignees":[],"author":{"id":"MDQ6VXNlcjE5NDk1MjIy","is_bot":false,"login":"loewenm","name":""},"body":"**Missing Pandas Feature Request**\r\n\r\nPlease implement concatenation of dictionaries, as shown at the very bottom of the page in the [Pandas package](https://pandas.pydata.org/docs/reference/api/pandas.concat.html). Currently, cudf only supports DataFrame and Series objects; dictionaries would be a very useful addition.\r\n\r\n\r\n**Additional context**\r\n\r\nThe following should return a cudf DataFrame stored in GPU ram.\r\n\r\nInput >> `cudf.concat({'a': 1.1, 'b': 2.2}, axis=1)`\r\n\r\nStored variable >>\r\n\r\n'a' | 1.1\r\n'b' | 2.2\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5wbDSb","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Hmm I'm not seeing the pandas feature you're referring to. The last example on the page that you linked is this one:\r\n```\r\n>>> df7 = pd.DataFrame({'a': 1, 'b': 2}, index=[0])\r\n>>> df7\r\n    a   b\r\n0   1   2\r\n>>> new_row = pd.Series({'a': 3, 'b': 4})\r\n>>> new_row\r\na    3\r\nb    4\r\ndtype: int64\r\n>>> pd.concat([df7, new_row.to_frame().T], ignore_index=True)\r\n    a   b\r\n0   1   2\r\n1   3   4\r\n```\r\n\r\nThis functionality works for me in cudf too:\r\n```\r\nIn [7]: df7 = cudf.DataFrame({'a': 1, 'b': 2}, index=[0])\r\n\r\nIn [8]: new_row = cudf.Series({'a': 3, 'b': 4})\r\n\r\nIn [9]: cudf.concat([df7, new_row.to_frame().T], ignore_index=True)\r\nOut[9]: \r\n   a  b\r\n0  1  2\r\n1  3  4\r\n```\r\n\r\nRaw concatenation of a dict like you suggested fails in pandas:\r\n```\r\nIn [10]: pd.concat({'a': 1.1, 'b': 2.2}, axis=1)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[10], line 1\r\n----> 1 pd.concat({'a': 1.1, 'b': 2.2}, axis=1)\r\n...\r\nTypeError: cannot concatenate object of type '<class 'float'>'; only Series and DataFrame objs are valid\r\n```\r\n\r\nHowever, if I'm understanding correctly you get basically what you want by just calling the Series constructor:\r\n```\r\nIn [14]: pd.Series({'a': 1.1, 'b': 2.2})\r\nOut[14]: \r\na    1.1\r\nb    2.2\r\ndtype: float64\r\n```\r\n\r\nDoes that help, or am I misunderstanding what you'd like to see?","createdAt":"2024-01-11T02:58:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14736#issuecomment-1886139547","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5125NA","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"Closing this as stale -- I came to the same conclusions as @vyasr above. @loewenm, feel free to reopen if you can clarify your question.","createdAt":"2024-03-04T19:38:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14736#issuecomment-1977324352","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps55J01H","author":{"login":"loewenm"},"authorAssociation":"NONE","body":"@vyasr @bdice \r\n\r\nRe-opening this issue as I don't believe it is solved.\r\n\r\nWith pandas, you are able to concatenate a dictionary of pd.Series or pd.DataFrames and many other data structures.\r\n\r\nHowever, if you attempt to do this with cudf using your method above, you must unpack the dictionary first for the method to work properly.\r\n\r\nExample:\r\n\r\n`concatenated_pd = pd.concat(dict)  <<< this works`\r\n\r\n`concatenated_cudf = cudf.concat(dict)  <<< does not work`\r\n\r\nWhat will work for cudf is the following:\r\n\r\n`concatenated_cudf = cudf.concat( [ v for k,v in dict.items() ] ) <<< this works`\r\n\r\nThe difference between the pandas version and the cudf version is the requirement to unpack the values of the dictionary explicitly. It's a minor issue, but it is not consistent with Pandas and created a few hours of head-stratching.\r\n\r\nBTW: I think cudf/RAPIDs is great.","createdAt":"2024-04-02T17:19:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14736#issuecomment-2032618823","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps55Vroj","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for the additional feedback @loewenm. This is what I understand you're seeking:\r\n\r\n```python\r\n>>> import pandas as pd\r\n>>> pd.concat({\"a\": pd.Series([1, 2, 3]), \"b\": pd.Series([4, 5, 6])})\r\na  0    1\r\n   1    2\r\n   2    3\r\nb  0    4\r\n   1    5\r\n   2    6\r\n```\r\n\r\nThis seems like a valid feature request. I'll leave this issue open. If you'd like to contribute a PR, we are happy to assist you!","createdAt":"2024-04-03T22:39:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14736#issuecomment-2035726883","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps55Vsrz","author":{"login":"loewenm"},"authorAssociation":"NONE","body":"Thanks @bdice. I'll take a look and see what I can do!","createdAt":"2024-04-03T22:43:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HOORAY","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14736#issuecomment-2035731187","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps55egfx","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for clarifying @loewenm !","createdAt":"2024-04-04T19:21:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14736#issuecomment-2038040561","viewerDidAuthor":false}],"createdAt":"2024-01-10T19:34:43Z","id":"I_kwDOBWUGps57rtW5","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"}],"milestone":null,"number":14736,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"pd.concat() of dictionaries [FEA]","updatedAt":"2024-04-04T19:21:30Z","url":"https://github.com/rapidsai/cudf/issues/14736"}
