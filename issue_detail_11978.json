{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Describe the bug**\r\nThere are a large number of libcudf tests that rely on detail APIs. There are parts of the JNI that use detail APIs. detail APIs are internal functionality that should not be called externally.\r\n\r\n**Expected behavior**\r\nWe should rewrite the offending code to not use detail APIs. If this proves too difficult, that probably indicates that we have functionality hidden in detail namespaces that should be exposed publicly. I suspect that in at least a few cases we will need to add new public APIs to support users, but hopefully not too many of them.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5M24Qh","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I should clarify. It may be acceptable to write tests of detail APIs. Some detail APIs are important enough and used by multiple public APIs, so they may benefit from dedicated testing. However, I suspect that in many cases we are using detail APIs to construct tests for public APIs. One specific instance that I know occurs is the use of vector factories in the detail namespace. Those uses are suspect and should be analyzed. The JNI should certainly not need to rely on detail APIs.","createdAt":"2022-10-24T18:51:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11978#issuecomment-1289454625","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5M4vFg","author":{"login":"ttnghia"},"authorAssociation":"CONTRIBUTOR","body":"Note that some/most of the detail APIs used in Java are due to not having their public version to call. In order to fulfill the guideline, we also need to implement the public interface for them.","createdAt":"2022-10-25T03:53:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11978#issuecomment-1289941344","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5M9U5a","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Yup I agree, I think there will be cases where we need new public APIs. That indicates a hole in libcudf's API though, not a reason to use the detail APIs externally.","createdAt":"2022-10-25T21:07:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11978#issuecomment-1291144794","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5NBGJM","author":{"login":"jlowe"},"authorAssociation":"MEMBER","body":"Related to the comment about needing public APIs, note there is a growing amount of Spark-specific JNI code leveraging libcudf at https://github.com/NVIDIA/spark-rapids-jni/tree/branch-22.12/src/main/cpp.  There's a number of detail references in that code, including:\r\n```\r\ncudf::detail::bitmask_and\r\ncudf::detail::gather\r\ncudf::detail::make_counting_transform_iterator\r\ncudf::detail::negative_index_policy\r\ncudf::detail::sequence\r\ncudf::detail::single_lane_block_sum_reduce\r\ncudf::detail::size_in_bits\r\ncudf::detail::valid_if\r\ncudf::detail::warp_size\r\ncudf::strings::detail::make_offsets_child_column\r\ncudf::test::detail::column_wrapper\r\ncudf::test::detail::make_null_mask\r\nnumeric::detail::abs\r\n```\r\n\r\nI haven't looked at these in detail (no pun intended).  Some of these may be using the detail interface solely to specify a specific stream to use, and that will be addressed when libcudf exposes streams in the public APIs.  Just wanted to point out another source base that can indicate what might need to be promoted to a public API.","createdAt":"2022-10-26T14:23:57Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11978#issuecomment-1292132940","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5NIeYm","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@jlowe thanks! That definitely looks like a mixed bag: `bitmask_and` is something that we should expose publicly (I know that Python could use it too), `detail::gather` is most likely just being used to pass a stream, `make_counting_transform_iterator` and `warp_size` are conveniences that the JNI probably shouldn't be relying on, etc. Once stream APIs exist we can probably trim out some of these and reassess the rest.","createdAt":"2022-10-27T21:13:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11978#issuecomment-1294067238","viewerDidAuthor":false}],"createdAt":"2022-10-24T18:40:29Z","id":"I_kwDOBWUGps5UtrQN","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ1NjIz","name":"cuDF (Java)","description":"Affects Java cuDF API.","color":"006b75"}],"milestone":{"number":25,"title":"Helps libcudf C++ integrations","description":"","dueOn":null},"number":11978,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Stop using detail APIs in tests and Java code","updatedAt":"2022-11-26T17:29:05Z","url":"https://github.com/rapidsai/cudf/issues/11978"}
