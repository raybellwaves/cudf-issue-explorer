{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY1Mw==","is_bot":false,"login":"mattf","name":"Matthew Farrellee"},"body":"**Is your feature request related to a problem? Please describe.**\r\nwriting code with `import cudf as pd`\r\n\r\n**Describe the solution you'd like**\r\n```\r\nIn [1]: import cudf as pd\r\n\r\nIn [2]: pd.__version__\r\nOut[2]: '22.12.0'\r\n\r\nIn [3]: df = pd.DataFrame({'a': [1, 2, 3] * 2, 'b': list('abcdef')})\r\n\r\nIn [4]: df.nlargest(1, 'a', keep='all')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In [4], line 1\r\n----> 1 df.nlargest(1, 'a', keep='all')\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/dataframe.py:3624, in DataFrame.nlargest(self, n, columns, keep)\r\n   3558 @_cudf_nvtx_annotate\r\n   3559 def nlargest(self, n, columns, keep=\"first\"):\r\n   3560     \"\"\"Return the first *n* rows ordered by *columns* in descending order.\r\n   3561 \r\n   3562     Return the first *n* rows with the largest values in *columns*, in\r\n   (...)\r\n   3622     Brunei      434000    12128      BN\r\n   3623     \"\"\"\r\n-> 3624     return self._n_largest_or_smallest(True, n, columns, keep)\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/indexed_frame.py:2156, in IndexedFrame._n_largest_or_smallest(self, largest, n, columns, keep)\r\n   2154     return self._gather(indices, keep_index=True, check_bounds=False)\r\n   2155 else:\r\n-> 2156     raise ValueError('keep must be either \"first\", \"last\"')\r\n\r\nValueError: keep must be either \"first\", \"last\"\r\n\r\nIn [5]: df.to_pandas().nlargest(1, 'a', keep='all')\r\nOut[5]: \r\n   a  b\r\n2  3  c\r\n5  3  f\r\n```\r\n\r\n**Additional context**\r\nhttps://github.com/pandas-dev/pandas/pull/21650","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-01-10T13:33:01Z","id":"I_kwDOBWUGps5bCkNL","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":12513,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Allow keep='all' for nlargest/nsmallest","updatedAt":"2023-06-06T03:56:05Z","url":"https://github.com/rapidsai/cudf/issues/12513"}
