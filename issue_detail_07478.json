{"assignees":[{"id":"MDQ6VXNlcjUzNzk2MDk5","login":"brandon-b-miller","name":""}],"author":{"id":"MDQ6VXNlcjUzNzk2MDk5","is_bot":false,"login":"brandon-b-miller","name":""},"body":"**Describe the bug**\r\nIn pandas, `1**<NA> == 1`, whereas in cuDF, `1**<NA> == <NA>`. Furthermore, in pandas, `<NA> ** 0 == 1` whereas in cuDF, `<NA> ** 0 == <NA>`. \r\n\r\n\r\n**Steps/Code to reproduce bug**\r\n\r\n\r\nFirst issue:\r\n```\r\n>>> psr = pd.Series([1,2,3], dtype='int64')\r\n>>> gsr = cudf.Series([1,2,3], dtype='int64')\r\n>>> psr ** pd.NA\r\n0       1\r\n1    <NA>\r\n2    <NA>\r\ndtype: object\r\n>>> gsr ** cudf.NA\r\n0    <NA>\r\n1    <NA>\r\n2    <NA>\r\ndtype: int64\r\n```\r\n\r\n```\r\n>>> psr = pd.Series([None], dtype='Int64')\r\n>>> gsr = cudf.Series([None], dtype='int64')\r\n>>> psr\r\n0    <NA>\r\ndtype: Int64\r\n>>> gsr\r\n0    <NA>\r\ndtype: int64\r\n>>> psr ** 0\r\n0    1\r\ndtype: Int64\r\n>>> gsr ** 0\r\n0    <NA>\r\ndtype: int64\r\n```\r\n\r\n**Expected behavior**\r\nI believe we should match pandas here. Since the behavior we expose here is the behavior of libcudf, we might have to run a few extra kernels to explicitly solve this case.\r\n\r\nI believe this is worth doing. It's a tradeoff between extra work that we need to do on the GPU which of course will impact performance, vs the possibility of users running the same data through the same sequence of mathematical operations between pandas and cuDF and getting a different number. IMO the second possibility is more likely to lead to issues on the user side than the first. \r\n\r\n\r\n**Environment overview (please complete the following information)**\r\n - Environment location: Bare Metal\r\n - Method of cuDF install: Source\r\n\r\n**Environment details**\r\nPlease run and paste the output of the `cudf/print_env.sh` script here, to gather any other relevant environment details\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc4ODMzMzQ0MQ==","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"relevant https://github.com/pandas-dev/pandas/issues/29997 ","createdAt":"2021-03-01T22:06:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7478#issuecomment-788333441","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgxMTUyMTM4OQ==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-03-31T23:04:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7478#issuecomment-811521389","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps49geV3","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-02-07T21:05:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7478#issuecomment-1031923063","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5P2t_N","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Pandas matches the behaviour of floating point nan in these circumstances, whereas cudf doesn't. Arguably matching nan-behaviour is less surprising.","createdAt":"2022-12-06T17:43:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7478#issuecomment-1339744205","viewerDidAuthor":false}],"createdAt":"2021-03-01T21:46:13Z","id":"MDU6SXNzdWU4MTkzMjI3NTE=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":7478,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Behavior of __pow__ differs from Pandas for special values","updatedAt":"2024-02-23T18:43:08Z","url":"https://github.com/rapidsai/cudf/issues/7478"}
