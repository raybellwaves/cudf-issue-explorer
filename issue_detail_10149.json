{"assignees":[{"id":"MDQ6VXNlcjI0Nzk2MzM1","login":"SurajAralihalli","name":"Suraj Aralihalli"}],"author":{"id":"MDQ6VXNlcjEzNjA3NjY=","is_bot":false,"login":"jlowe","name":"Jason Lowe"},"body":"**Describe the bug**\r\nWhen performing aggregations, the output types are often upscaled to help combat overflow situations.  For example, performing a sum aggregation on an INT32 column will produce an INT64 result.  However performing a sum aggregation on a UINT32 column produces an INT64 result rather than a UINT64 result.\r\n\r\n**Steps/Code to reproduce bug**\r\nPerform a sum aggregation with an input column of UINT32 and note that the result is INT64.  Here's a snippet of a session doing this with the cudf Java API in the Spark REPL shell:\r\n```\r\nscala> import ai.rapids.cudf._\r\nimport ai.rapids.cudf._\r\n\r\nscala> val t = new Table(ColumnVector.fromInts(0), ColumnVector.fromUnsignedInts(0))\r\nt: ai.rapids.cudf.Table = Table{columns=[ColumnVector{rows=1, type=INT32, nullCount=Optional[0], offHeap=(ID: 5 7feec1b5ac90)}, ColumnVector{rows=1, type=UINT32, nullCount=Optional[0], offHeap=(ID: 9 7feec1b5a280)}], cudfTable=140663428850592, rows=1}\r\n\r\nscala> t.groupBy(0).aggregate(GroupByAggregation.sum().onColumn(1))\r\nres0: ai.rapids.cudf.Table = Table{columns=[ColumnVector{rows=1, type=INT32, nullCount=Optional.empty, offHeap=(ID: 10 7ff0b7039860)}, ColumnVector{rows=1, type=INT64, nullCount=Optional.empty, offHeap=(ID: 11 7ff0b7039760)}], cudfTable=140671839344304, rows=1}\r\n```\r\n\r\n**Expected behavior**\r\nUnsigned input types should be promoted to unsigned output types for any aggregations where the sign of the result cannot change for unsigned inputs (e.g.: sum and multiply)\r\n\r\n**Additional context**\r\nSee @jrhemstad's comment at https://github.com/rapidsai/cudf/issues/10102#issuecomment-1023502832","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4-vHo2","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-02-26T20:02:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10149#issuecomment-1052539446","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5D8uc_","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-05-27T20:02:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10149#issuecomment-1139992383","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5F1H3N","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"From [#10102 (comment)](https://github.com/rapidsai/cudf/issues/10102#issuecomment-1023502832):\r\n\r\nI think the machinery in question was added before unsigned support and then was just never updated. It should be updated to use uint64 for unsigned integer types: https://github.com/rapidsai/cudf/blob/1246116c05abb6635624db25351f6596aa0abf2d/cpp/include/cudf/detail/aggregation/aggregation.hpp#L1140-L1147\r\n\r\ncould be updated to:\r\n```\r\n// Summing/Multiplying integers of any type, always use int64_t accumulator\r\ntemplate <typename Source, aggregation::Kind k>\r\nstruct target_type_impl<\r\n  Source,\r\n  k,\r\n  std::enable_if_t<std::is_integral<Source>::value && is_sum_product_agg(k)>> {\r\n  using type = std::conditional_t<std::is_signed_v<Source>, int64_t, uint64_t>>;\r\n};\r\n```","createdAt":"2022-06-30T18:41:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10149#issuecomment-1171553741","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5yeS1N","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"The work in #14679 to address this issue ended up needed to be reverted in #14907 due to a performance regression reported in #14886. \r\n\r\nIn addition to adding back the changes in #14679, we also need to:\r\n* add specializations in [device_atomics.cuh](https://github.com/rapidsai/cudf/blob/5cc021af0ef934ddf3f5f66cee2d8dd2490ba623/cpp/include/cudf/detail/utilities/device_atomics.cuh#L160-L162) for `uint32_t` and `uint64_t` as per this [comment](https://github.com/rapidsai/cudf/pull/14907#issuecomment-1915388016)\r\n* for clarity, update namespace for `atomicAdd` in [aggregation.cuh](https://github.com/rapidsai/cudf/blob/1422a4b7f94f66275b3a641ecaf3533815111f8e/cpp/include/cudf/detail/aggregation/aggregation.cuh#L245) to specify the `cudf::detail::` namespace\r\n* also for clarity, extend the `cudf::detail::` namespace updates to `atomicMul` `atomicMin` `atomicMax`  in  [aggregation.cuh](https://github.com/rapidsai/cudf/blob/1422a4b7f94f66275b3a641ecaf3533815111f8e/cpp/include/cudf/detail/aggregation/aggregation.cuh#L245)","createdAt":"2024-02-01T05:29:26Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10149#issuecomment-1920544077","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5yvrTK","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"I started an experiment in this direction before I re-read this issue and realized @SurajAralihalli was assigned here. With apologies to @SurajAralihalli, I think I have a good start on the atomics refactoring in https://github.com/rapidsai/cudf/pull/14962. I would like to get that PR merged first, because it should be a standalone improvement, and then we can revisit the changes that were originally reverted.","createdAt":"2024-02-03T05:08:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/10149#issuecomment-1925100746","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5yv4ug","author":{"login":"karthikeyann"},"authorAssociation":"CONTRIBUTOR","body":"The revert can be undone after merging https://github.com/rapidsai/cudf/pull/14962. I tested a similar fix while debugging this issue with @SurajAralihalli . \r\nAlthough, a thorough testing on other types in similar scenario is required to ensure other bugs are not hidden. (perhaps test chrono types, decimal types).","createdAt":"2024-02-03T06:12:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/10149#issuecomment-1925155744","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5yxEKe","author":{"login":"SurajAralihalli"},"authorAssociation":"CONTRIBUTOR","body":"> I started an experiment in this direction before I re-read this issue and realized @SurajAralihalli was assigned here. With apologies to @SurajAralihalli, I think I have a good start on the atomics refactoring in #14962. I would like to get that PR merged first, because it should be a standalone improvement, and then we can revisit the changes that were originally reverted.\r\n\r\nThanks @bdice for letting me know!","createdAt":"2024-02-03T21:53:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10149#issuecomment-1925464734","viewerDidAuthor":false}],"createdAt":"2022-01-27T19:24:04Z","id":"I_kwDOBWUGps5CjsnN","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":null,"number":10149,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Sum and multiply aggregations promote unsigned input types to a signed output","updatedAt":"2024-02-23T18:43:04Z","url":"https://github.com/rapidsai/cudf/issues/10149"}
