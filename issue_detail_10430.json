{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Describe the bug**\r\nIn pandas, calling `GroupBy.count ` appears to always produce an int64 column (regardless of whether it is actually necessary). Conversely cuDF outputs int32 columns.\r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\n>>> import cudf\r\n>>> sr = cudf.Series([1, 1, 1, 2, 3])\r\n>>> sr.value_counts()\r\n1    3\r\n2    1\r\n3    1\r\ndtype: int32\r\n>>> sr.to_pandas().value_counts()\r\n1    3\r\n2    1\r\n3    1\r\ndtype: int64\r\n```\r\n\r\n**Expected behavior**\r\nlibcudf returning int32 columns from count aggregations makes sense since its column sizes are bound by `cudf::size_type = int32_t` anyway. However, cuDF Python should be converting the output to match the pandas convention, though.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4_qLSZ","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"> However, cuDF Python should be converting the output to match the pandas convention, though.\r\n\r\nReally? We want to needlessly double the memory footprint and triple the high water mark? ","createdAt":"2022-03-15T13:59:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10430#issuecomment-1068020889","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps4_qutq","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"_Should_ is stronger than I really intended. I wanted to open this issue to document an inconsistency that I noticed and was previously unaware of, and because we've been moving towards much stricter pandas compatibility of late. For example, we are definitely moving away from reference semantics in cuDF Python in places where pandas returns copies because downside of surprising users is not worth the smaller memory footprint. In this case, though, I think the downside of the current behavior is pretty negligible and would be fine with not changing it. I just want there to be a record of the decision if that's what we choose.\r\n\r\nCC @shwina @galipremsagar who have been involved with related decisions recently.","createdAt":"2022-03-15T16:05:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10430#issuecomment-1068165994","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps4_q44M","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Agree, we want to align with Pandas wherever a copy rather than a view is returned, but the memory footprint can be very significant. That's why we also want copy-on-write. This is also the direction Pandas is headed (making all APIs return copies rather than views, but also implementing copy-on-write semantics).","createdAt":"2022-03-15T16:42:13Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10430#issuecomment-1068207628","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Bz3kR","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-04-20T16:08:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10430#issuecomment-1104115985","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5G4_md","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-07-19T17:10:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10430#issuecomment-1189345693","viewerDidAuthor":false}],"createdAt":"2022-03-14T18:36:02Z","id":"I_kwDOBWUGps5FqeiJ","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":10430,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Count groupby-aggregations produce smaller dtype than expected","updatedAt":"2024-02-23T18:42:51Z","url":"https://github.com/rapidsai/cudf/issues/10430"}
