{"assignees":[],"author":{"id":"MDQ6VXNlcjQxMDkzMQ==","is_bot":false,"login":"thomcom","name":"H. Thomson Comer"},"body":"**Describe the bug**\r\n.fillna does not work with `ListColumns`.\r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\nx = cudf.Series([0, 1, None])\r\n```\r\n```\r\nx.fillna(5)\r\n0    0\r\n1    1\r\n2    5\r\ndtype: int64\r\n```\r\n```\r\ny = cudf.Series([[0, 1], [2, 3], [None, None]])\r\ny.fillna(5) \r\n```\r\n```\r\n0    [0.0, 1.0]\r\n1    [2.0, 3.0]\r\n2    [nan, nan]\r\ndtype: list\r\n```\r\n\r\n**Expected behavior**\r\n`2    [nan, nan]` should be `2    [5, 5]`\r\n\r\n**Environment overview (please complete the following information)**\r\ncudf 23.06 installed via pip\r\n\r\n**Environment details**\r\nNot available.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5bTsv5","author":{"login":"thomcom"},"authorAssociation":"CONTRIBUTOR","body":"This is needed because `GeoSeries` in cuSpatial need to be able to replace `NA` with `np.nan` in order to easily print them. Ref https://github.com/rapidsai/cuspatial/issues/1102","createdAt":"2023-05-02T17:46:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1531890681","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bTzXC","author":{"login":"thomcom"},"authorAssociation":"CONTRIBUTOR","body":"The fix appears to be\r\n```\r\nnew_children = [child for child in y._column.points._column._base_children[:-1]]\r\nnew_children.append(y._column.points._column._base_children[-1].fillna(5))\r\ny._column.points._column.set_base_children(tuple(new_children))\r\n```\r\n\r\nI don't have a working cudf build at the moment but I'll look into a PR.","createdAt":"2023-05-02T18:05:45Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1531917762","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bdNjo","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"I think this is working as designed. `NA` or `NaN` for empty is a top-level flag indicating that the relevant entry in the series is missing. On the other hand, in your case you want to dive into a list and replace a non-top-level flag. But I don't think this is right: `None` is not the same as `[None]`.\r\n\r\nCertainly making this change would be an API break from pandas:\r\n```python\r\nimport pandas as pd\r\n\r\nx = pd.Series([[1], [2], [pd.NA]])\r\ny = x.fillna(5)\r\nx == y # => True\r\n\r\nx = pd.Series([1, 2, pd.NA])\r\ny = x.fillna(5)\r\nx == y # => False\r\n```","createdAt":"2023-05-04T09:23:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1534384360","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bddZw","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"I think the API we want to expose for this is `s.list.fillna()`. ","createdAt":"2023-05-04T09:57:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1534449264","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bdz4I","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"> I think the API we want to expose for this is `s.list.fillna()`.\r\n\r\nI guess that traverses arbitrarily deep (since if you have nested lists the `ListMethods` object doesn't expose the intermediate levels, I think)","createdAt":"2023-05-04T10:50:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1534541320","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bgN8T","author":{"login":"thomcom"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for the follow up on this @wence- I certainly don't want to break any pandas compatibility. I'm writing `s.list.fillna()` now.","createdAt":"2023-05-04T17:47:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535172371","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bgpvy","author":{"login":"thomcom"},"authorAssociation":"CONTRIBUTOR","body":"Yeah I'm hesitant, do you really want a `.list.fillna` method that traverses the arbitrary depth of the `ListColumn` and replaces all of the null values? That's where I am in development now, do you want me to finish it and send a PR? @shwina @wence- ","createdAt":"2023-05-04T19:21:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535286258","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bgrxn","author":{"login":"thomcom"},"authorAssociation":"CONTRIBUTOR","body":"I could just write this for cuspatial and leave cudf alone. :)","createdAt":"2023-05-04T19:28:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535294567","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bhh9-","author":{"login":"thomcom"},"authorAssociation":"CONTRIBUTOR","body":"Additionally, `cudf` seems very sensitive about what kinds of `ListColumn` can be created from the `Series` constructor. Arbitrary nesting seems allowed if the only value is `None`, if I mix `None` with floating points I get funky errors.\r\n\r\n```\r\ns = cudf.Series([\r\n    [[[[None]]]],\r\n    [[[None]]],\r\n    [[None]],\r\n    [None],\r\n])\r\ns\r\n```\r\n```\r\n0    [[[[None]]]]\r\n1      [[[None]]]\r\n2        [[None]]\r\n3          [None]\r\ndtype: list\r\n```\r\n\r\nbut\r\n```\r\ns = cudf.Series([\r\n    [[[[None]]]],\r\n    [[[None]]],\r\n    [[None]],\r\n    [None, 0.0],\r\n])\r\ns\r\n```\r\n\r\ngets\r\n```\r\nArrowInvalid: cannot mix list and non-list, non-null values\r\n```\r\n\r\nso I'm less certain that handling complex nesting cases is worth pursuing. Opinions?","createdAt":"2023-05-04T23:12:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1535516542","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bjsg_","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Oh wow, that's an odd one, that seems like an arrow thing? The way I _thought_ lists in cudf work is that every rows must have the same type, so your first entry has type `List (List (List (List (int | None))))`. Now, _I_ think that `List None` does not have the same type as `None`, and so I would have thought that writing `[[None], None]` would not be allowed because the first entry has type `List None` and the second has type `None`. However, it seems like arrow treats `None` as an arbitrary placeholder at any depth which blows a hole through the type system in my book.\r\n\r\nI suppose the type is something like:\r\n\r\n```\r\ndata List a = None | [a | None]\r\n```","createdAt":"2023-05-05T10:59:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1536084031","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bkF7u","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"That's right, at any level of nesting, you can have a \"null\" list. So `[[1, 2, 3], None, [None], [1, 2, None]]` is a valid list column in cuDF/Arrow.","createdAt":"2023-05-05T12:28:35Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1536188142","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bmiMy","author":{"login":"isVoid"},"authorAssociation":"CONTRIBUTOR","body":"```\r\ns = cudf.Series([\r\n    [[[[None]]]],\r\n    [[[None]]],\r\n    [[None]],\r\n    [None, 0.0],\r\n])\r\ns\r\n```\r\n\r\nThis fails because [[[[None]]]] and [None, 0.0] isn't the same type. As @wence- points out, the first row is `List (List (List (List (int | None))))`, the second is `List( float | None )`.","createdAt":"2023-05-05T22:00:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13274#issuecomment-1536828210","viewerDidAuthor":false}],"createdAt":"2023-05-02T17:41:32Z","id":"I_kwDOBWUGps5k5oZE","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3NTAz","name":"2 - In Progress","description":"Currently a work in progress","color":"fef2c0"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwyNTQ2NTIxMDI0","name":"improvement","description":"Improvement / enhancement to an existing function","color":"bfd4f2"}],"milestone":null,"number":13274,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[ENH] add `.fillna` method to `ListMethods`","updatedAt":"2023-06-07T21:00:32Z","url":"https://github.com/rapidsai/cudf/issues/13274"}
