{"assignees":[],"author":{"id":"MDQ6VXNlcjY5MTE3ODE3","is_bot":false,"login":"nasiha0","name":""},"body":"Hello.\r\n\r\nI would like to calculate the rolling slope of y_value over x_value using cuML LinearRegression.\r\n\r\nSample data (cuDF dataframe):\r\n```\r\n| date       | x_value | y_value |\r\n| ------     | ------  |  ----   |\r\n| 2020-01-01 | 900     | 10      |\r\n| 2020-01-01 | 905     | 15      |\r\n| 2020-01-01 | 910     | 15      |\r\n| 2020-01-01 | 915     | 15      |\r\n| 2020-01-02 | 900     | 30      |\r\n| 2020-01-02 | 905     | 40      |\r\n| 2020-01-02 | 910     | 50      |\r\n| ------     | ------  | ------  |\r\n```\r\nA simple function to use LinearRegression:\r\n```\r\ndef RollingOLS(x, y):\r\n    lr = LinearRegression(fit_intercept = True, normalize = False, algorithm = 'svd')\r\n    reg = lr.fit(x, y)\r\n    \r\n    return reg.coef_\r\n```\r\n\r\nWhat I would like to do:\r\n```\r\ndata.groupby('date').rolling(2).apply(RollingOLS, x=x_value, y=y_value)\r\n```\r\n\r\nHowever, I am getting an error: ```NotImplementedError: Handling UDF with null values is not yet supported```. Is there any way to overcome this error? Thank you.","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDY2ODA3MDA0MA==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"Reprioritized this as a feature request, but the current way that cuML works will not be efficient with `rolling.apply`.\r\n\r\nIn order to try to do this, we'd likely need to have a CUDA stream pool and then launch the `apply` functions using the stream pool to try to get some parallelism, but if the underlying implementation of the function sprawls across SMs then we're likely not going to be able to do much.","createdAt":"2020-08-03T14:58:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/5828#issuecomment-668070040","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODMyMTgyNQ==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"@kkraus14 is there a workaround to unblock @nasiha0 ? E.g. get access to the groups and run a loop that calls cuML? Slow but workable?","createdAt":"2020-08-04T01:21:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/5828#issuecomment-668321825","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODMyMjIzNw==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"@shwina is there any workaround here? I'm not super familiar with the rolling code and the exception that's being seen.","createdAt":"2020-08-04T01:22:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/5828#issuecomment-668322237","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODMyMjQ2NA==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"> @kkraus14 is there a workaround to unblock @nasiha0 ? E.g. get access to the groups and run a loop that calls cuML? Slow but workable?\r\n\r\nJust a note, if the data is like the above example where there's ~5 values per window then we're going to run insanely slow based on the current implementation.","createdAt":"2020-08-04T01:23:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/5828#issuecomment-668322464","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY2ODYwNTQ0OQ==","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"@kkraus14 Unlike `GroupBy.apply()`, which operates serially on the groups and concatenates the results, `RollingGroupBy.apply()` uses the numba->PTX->libcudf code path. The latter is probably much more efficient but has no null support. We *could* fall back to operating serially on the groups if nulls are encountered.","createdAt":"2020-08-04T13:45:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/5828#issuecomment-668605449","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MDE1NTU2MQ==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-02-16T22:21:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/5828#issuecomment-780155561","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MDE4NDY1OQ==","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"This is possiblly something we can look into once we have `groupby.apply()` working with streams. cc @isVoid ","createdAt":"2021-02-16T23:28:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/5828#issuecomment-780184659","viewerDidAuthor":false}],"createdAt":"2020-08-02T16:43:06Z","id":"MDU6SXNzdWU2NzE2NDkwMTU=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":10,"title":"UDF Enhancements","description":"","dueOn":null},"number":5828,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Rolling slope calculation with groupby","updatedAt":"2021-10-27T20:21:01Z","url":"https://github.com/rapidsai/cudf/issues/5828"}
