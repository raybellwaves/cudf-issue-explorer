{"assignees":[{"id":"MDQ6VXNlcjUzNzk2MDk5","login":"brandon-b-miller","name":""}],"author":{"id":"MDQ6VXNlcjUzNzk2MDk5","is_bot":false,"login":"brandon-b-miller","name":""},"body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently we can't use string columns inside UDFs. This is for a number of reasons. Firstly, there is limited support for strings in general in Numba, which forms the basis of our UDF framework. Secondly even if strings were supported in numba, we would still need to extend numba for it to be able to properly generate kernels that work as we expect on the buffers containing our string data. Lastly, there are special memory considerations on the GPU that complicate the situation further.\r\n\r\n**Describe the solution you'd like**\r\nRecently @davidwendt has experimented with a c++ class which solves many of the nuances around handling single strings that live on the device inside UDFs. @gmarkall subsequently wrote a proof of concept showing how simple string functions such as `len` can be overloaded using numba to map to the methods contained in that c++ class and baked into a kernel. We would like to plumb this machinery through cuDF. This roughly consists of the following steps:\r\n\r\n1. Make it so that when cuDF is built, the c++ string class and its methods are precompiled and made available as a blob of PTX or similar that we can link to when building a kernel in python.\r\n2. Create the pipeline in python that writes, links, compiles and executes the correct kernels that can leverage the aformentioned PTX blobs at runtime.\r\n3. Create numba typing and lowering that overloads calls to common string functions in python and maps them to the corresponding methods of the c++ class. Ideally we'd do all of them although some may be more complex than others due to memory considerations. Thats 43 functions:\r\n- `capitalize`\r\n- `casefold`\r\n- `center`\r\n- `count`\r\n- `encode`\r\n- `endswith`\r\n- `expandtabs`\r\n- `find`\r\n- `format`\r\n- `format_map`\r\n- `index`\r\n- `isalnum`\r\n- `isalpha`\r\n- `isascii`\r\n- `isdecimal`\r\n- `isdigit`\r\n- `islower`\r\n- `isprintable`\r\n- `isspace`\r\n- `istitle`\r\n- `isupper`\r\n- `join`\r\n- `ljust`\r\n- `lower`\r\n- `lstrip`\r\n- `maketrans`\r\n- `removeprefix`\r\n- `removesuffix`\r\n- `replace`\r\n- `rfind`\r\n- `rindex`\r\n- `rjust`\r\n- `rpartition`\r\n- `rsplit`\r\n- `rstrip`\r\n- `split`\r\n- `splitlines`\r\n- `startswith`\r\n- `swapcase`\r\n- `title`\r\n- `translate`\r\n- `upper`\r\n- `zfill`\r\n\r\n\r\nConcretely, when we encounter a UDF that is written like this for example:\r\n\r\n```python\r\ndef f(row):\r\n    return len(row['str_field'])\r\n```\r\n\r\nOur code should\r\n- Detect a declaration of `len` that we will write which expects a `MaskedType(string)` and returns a `MaskedType(int64)`\r\n- Detect an implementation of the above (lowering) which calls a compiled version of the c++ class's `len` method when provided a pointer to the start of the string\r\n- Write a kernel that distributes the individual column strings amongst parallel threads and runs the function capturing its output elementwise\r\n- Run it\r\n- If necessary assembles the results into a column\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\n**Additional context**\r\nIf we can get this to work it lays the groundwork for being able to use other more complex types inside UDFs in the future, following the same pattern of using numba to map python code to external function calls that we write to operate on a single data element.\r\n\r\nSimilar issue for `applymap` https://github.com/rapidsai/cudf/issues/3802","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps47ByUS","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-12-09T22:02:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-990323986","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps47B8JN","author":{"login":"gmarkall"},"authorAssociation":"CONTRIBUTOR","body":"I believe @brandon-b-miller is actively working on this.\r\n\r\nWhilst I'm commenting, I'll add a note that numba/numba#7621 helps support this implementation so may be a useful reference along with numba/numba-examples#40, which requires a similar mechanism of linking CUDA C/C++ with Numba kernels.","createdAt":"2021-12-09T22:39:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-990364237","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps47EgMC","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"This is being worked on, albeit slowly for now. We've had a lot of discussions of how we intend to proceed with this offline, but the general consensus is that some of these functions will be a lot easier to support than others, namely the ones that have predictable memory requirements. Hopefully more to come here soon. ","createdAt":"2021-12-10T14:51:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-991036162","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps48Gacd","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-01-09T15:03:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1008314141","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5BNkJU","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-04-09T16:03:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1094074964","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5BP8ll","author":{"login":"gmarkall"},"authorAssociation":"CONTRIBUTOR","body":"This is still being worked on.","createdAt":"2022-04-11T08:24:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":4}},{"content":"EYES","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1094699365","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GUJr2","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-07-10T09:03:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1179687670","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GwCNC","author":{"login":"gmarkall"},"authorAssociation":"CONTRIBUTOR","body":"This is still active.","createdAt":"2022-07-18T09:53:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1186997058","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GwCY2","author":{"login":"gmarkall"},"authorAssociation":"CONTRIBUTOR","body":"@brandon-b-miller Should this be moved to a different project board?","createdAt":"2022-07-18T09:54:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1186997814","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Mqvrg","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@brandon-b-miller do you want to keep using this issue to track the remaining work as well (the methods that output strings)?","createdAt":"2022-10-20T23:34:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1286273760","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Mu0YS","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"Just wanted to provide an update on this feature since we now have partial support for this and I think we have a clear picture of what's left to be done and a tentative timeline. Here is a summary.\r\n\r\n**22.10 introduced string udfs via the `strings_udf` library**\r\nWith the merge of https://github.com/rapidsai/cudf/pull/11319 (as well as a flurry of follow up fixes), a new separately installable package `strings_udf` was rolled out to support this. When present in the users environment, users will find that they are able to pass string columns to UDFs through `DataFrame.apply` and `Series.apply` and utilize the following hopefully familiar python methods within those UDFs:\r\n\r\n- `str.count()`\r\n- `str.startswith()`\r\n- `str.endswith()`\r\n- `str.find()`\r\n- `str.rfind()`\r\n- `str.isalnum()`\r\n- `str.isalpha()`\r\n- `str.isdecimal()`\r\n- `str.isdigit()`\r\n- `str.islower()`\r\n- `str.isupper()`\r\n- `str.isnumeric()`\r\n- `str.isspace()`\r\n- `str.istitle()`\r\n- Comparison operators  between strings (`==`, `!=`, `>`, `<`, `<=`, `>=`)\r\n- Contains operation (`str in other`)\r\n- `len(str)`\r\n\r\n**CEC**\r\nCUDA 11.5 is currently required for this feature. CUDA enhanced compatibility is pending with PR \r\nhttps://github.com/rapidsai/cudf/pull/11884. \r\n\r\n**More features (methods that produce non numeric data)**\r\nFunctions and methods that return strings are being worked on for 22.12 with the main PR implementing the bulk of the plumbing at https://github.com/rapidsai/cudf/pull/11933. After this is merged, the following features will be added in phases:\r\n\r\n- `str.capitalize()`\r\n- `str.upper()`\r\n- `str.lower()`\r\n- `str.swapcase()`\r\n- `str.ljust`\r\n- `str.rjust`,\r\n- `str.strip`\r\n- `str.lstrip`\r\n- `str.rstrip`\r\n- `str.removeprefix`\r\n- `str.removesuffix`\r\n- `str.title`\r\n- `str.center`\r\n- `str.expandtabs`\r\n- `str.replace`\r\n- `str.zfill`\r\n- `str.index`\r\n- `str.rindex`\r\n- Substring indexing (`str[1:3]`)\r\n- Concatenation (the `+` operator between strings)\r\n- Iteration (`for char in str:`)\r\n\r\nThe above functions currently require cuda dynamic global memory allocation and can therefore have some unpredictable performance characteristics. We hope to make this problem go away in the future. \r\n\r\n\r\n\r\n**Wont add for now**\r\nSome features like formatting are not yet on the roadmap, in addition to functions with structured return types such as `split` which returns a list. \r\n\r\n\r\nHopefully this gives us something to work with for now and hopefully more updates to this thread in the future!\r\n\r\n\r\n","createdAt":"2022-10-21T19:10:11Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-1287341586","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-OLvo","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@brandon-b-miller could you update this issue with the current state of UDFs? ","createdAt":"2024-05-17T13:46:28Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9639#issuecomment-2117647336","viewerDidAuthor":false}],"createdAt":"2021-11-09T20:22:03Z","id":"I_kwDOBWUGps4-h5N0","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDE2MzIwNzI3","name":"numba","description":"Numba issue","color":"9c2cdd"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxNTE1NjE2MjUz","name":"strings","description":"strings issues (C++ and Python)","color":"0e8a16"}],"milestone":{"number":10,"title":"UDF Enhancements","description":"","dueOn":null},"number":9639,"projectCards":[{"project":{"name":"v22.12 Release"},"column":{"name":"Issue-P0"}}],"projectItems":[],"reactionGroups":[{"content":"HEART","users":{"totalCount":4}},{"content":"ROCKET","users":{"totalCount":4}}],"state":"OPEN","title":"[FEA] Initial support for string UDFs via Numba ","updatedAt":"2024-05-17T13:46:29Z","url":"https://github.com/rapidsai/cudf/issues/9639"}
