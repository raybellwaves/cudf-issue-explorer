{"assignees":[{"id":"MDQ6VXNlcjExNjY0MjU5","login":"galipremsagar","name":"GALI PREM SAGAR"}],"author":{"id":"MDQ6VXNlcjE3NDQxMDYy","is_bot":false,"login":"Nyrio","name":"Louis Sugy"},"body":"I don't know exactly if it's a bug or a feature, but I have noticed that we don't have parity with pandas in the following example because `NA`s are interpreted as zeros when writing in the parent dataframe:\r\n\r\n```python\r\nimport cudf\r\nimport pandas as pd\r\n\r\ncudf0 = cudf.DataFrame([[1.], [2.]], columns=[\"A\"])\r\ncudf1 = cudf0[:1]\r\ncudf1[\"A\"] = None\r\n\r\nprint(\"cuDF (parent):\")\r\nprint(cudf0, end='\\n\\n')\r\nprint(\"cuDF (view):\")\r\nprint(cudf1, end='\\n\\n')\r\n\r\npd0 = pd.DataFrame([[1.], [2.]], columns=[\"A\"])\r\npd1 = pd0[:1]\r\npd1[\"A\"][0] = None\r\n\r\nprint(\"pandas (parent):\")\r\nprint(pd0, end='\\n\\n')\r\nprint(\"pandas (view):\")\r\nprint(pd1, end='\\n\\n')\r\n```\r\n\r\nOutput:\r\n```\r\ncuDF (parent):\r\n     A\r\n0  0.0\r\n1  2.0\r\n\r\ncuDF (view):\r\n      A\r\n0  <NA>\r\n\r\npandas (parent):\r\n     A\r\n0  NaN\r\n1  2.0\r\n\r\npandas (view):\r\n    A\r\n0 NaN\r\n```\r\n\r\nNote that if we use the value `NaN` instead of `None` (aka missing value / `<NA>`), it works like pandas.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps40mliu","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for reporting. Definitely a bug and not a feature :-) ","createdAt":"2021-07-19T13:05:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8754#issuecomment-882530478","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps45bb3s","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"Here is what is happening after some debugging. A column may or may not have nulls, and therefore may or may not have an associated mask. When we take a slice of a column, that view may or may not have an associated mask, depending on if the parent column did or did not have one. If the parent column did have a mask, it can be accessed through `base_mask`.\r\n\r\nIn this example, we're starting with a column that has no mask and assigning a null. The code detects that the slice does not possess a mask, and so creates a new one, which is then associated with the **slice** but not the **parent** mask. The data is written to the data buffer successfully, but the parent column still has no mask. This is why the problem goes away if the original column contains even one null - because then the child column can mutate `base_mask` and the result will propagate to the parent. \r\n\r\nI am looking into a few solutions here but I am worried the result won't be pretty. More to come here.","createdAt":"2021-11-08T19:19:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/8754#issuecomment-963493356","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps45kO-z","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Moving this issue to the next release, as it likely requires some non-trivial design changes that we won't be able to do well in time for this release.","createdAt":"2021-11-10T22:20:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8754#issuecomment-965799859","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps49lJdB","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-02-08T23:03:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8754#issuecomment-1033148225","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59r4Po","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"The original snippet no longer works exactly as expected because None cannot be assigned directly to the value of a column and needs to be wrapped in a list (or as in the pandas assignment, assigned to a specific element). However, with that fix the underlying issue no longer persists, but it's because copy/view semantics are different and we don't modify in place at all (note that the parent is unchanged in the cudf case)\r\n```\r\nIn [1]: import cudf                                                                                                                                                                                         \r\n   ...: import pandas as pd                                                                                                                                                                                 \r\n   ...:                                                                                                                                                                                                     \r\n   ...: cudf0 = cudf.DataFrame([[1.], [2.]], columns=[\"A\"])                       \r\n   ...: cudf1 = cudf0[:1]                          \r\n   ...: cudf1[\"A\"][0] = None  \r\n   ...:                                            \r\n   ...: print(\"cuDF (parent):\")                                                                                                                                                                             \r\n   ...: print(cudf0, end='\\n\\n')                                                                      \r\n   ...: print(\"cuDF (view):\")                                                                                                                                                                               \r\n   ...: print(cudf1, end='\\n\\n')                                                                      \r\n   ...:             \r\n   ...: pd0 = pd.DataFrame([[1.], [2.]], columns=[\"A\"])    \r\n   ...: pd1 = pd0[:1]                                                                                 \r\n   ...: pd1[\"A\"][0] = None                                                                            \r\n   ...:                                                                                                                                                                                                     \r\n   ...: print(\"pandas (parent):\")\r\n   ...: print(pd0, end='\\n\\n')                                                                        \r\n   ...: print(\"pandas (view):\")\r\n   ...: print(pd1, end='\\n\\n')\r\ncuDF (parent):\r\n     A                                             \r\n0  1.0        \r\n1  2.0                                        \r\n                                                   \r\ncuDF (view):                                                                                                                                                                                                \r\n      A                                            \r\n0  <NA>                                       \r\n                                                                                                      \r\n<ipython-input-1-6df2d8c7d8ef>:15: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\r\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to updat\r\ne the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\r\nA typical example is when you are setting values in a column of a DataFrame, like:\r\n\r\ndf[\"col\"][row_indexer] = value\r\n\r\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\r\n\r\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\r\n\r\n  pd1[\"A\"][0] = None\r\n<ipython-input-1-6df2d8c7d8ef>:15: SettingWithCopyWarning: \r\nA value is trying to be set on a copy of a slice from a DataFrame\r\n\r\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\r\n  pd1[\"A\"][0] = None\r\npandas (parent):\r\n     A\r\n0  NaN\r\n1  2.0\r\n\r\npandas (view):\r\n    A\r\n0 NaN\r\n```\r\n\r\nWith copy-on-write on, I see a different issue in cudf because it seems like we are modifying something that we shouldn't:\r\n```\r\nIn [1]: import cudf\r\n   ...: cudf.set_option(\"copy_on_write\", True)\r\n   ...: import pandas as pd\r\n   ...: pd.options.mode.copy_on_write = True\r\n   ...: \r\n   ...: cudf0 = cudf.DataFrame([[1.], [2.]], columns=[\"A\"])\r\n   ...: cudf1 = cudf0[:1]\r\n   ...: cudf1[\"A\"][0] = None\r\n   ...: \r\n   ...: print(\"cuDF (parent):\")\r\n   ...: print(cudf0, end='\\n\\n')\r\n   ...: print(\"cuDF (view):\")\r\n   ...: print(cudf1, end='\\n\\n')\r\n   ...: \r\n   ...: pd0 = pd.DataFrame([[1.], [2.]], columns=[\"A\"])\r\n   ...: pd1 = pd0[:1]\r\n   ...: pd1[\"A\"][0] = None\r\n   ...: \r\n   ...: print(\"pandas (parent):\")\r\n   ...: print(pd0, end='\\n\\n')\r\n   ...: print(\"pandas (view):\")\r\n   ...: print(pd1, end='\\n\\n')\r\n   ...: \r\ncuDF (parent):\r\n     A\r\n0  1.0\r\n1  2.0\r\n\r\ncuDF (view):\r\n      A\r\n0  <NA>\r\n\r\n<ipython-input-1-6f655a450cfc>:17: ChainedAssignmentError: A value is trying to be set on a copy of a DataFrame or Series through chained assignment.\r\nWhen using the Copy-on-Write mode, such chained assignment never works to update the original DataFrame or Series, because the intermediate object on which we are setting values always behaves as a copy.\r\n\r\nTry using '.loc[row_indexer, col_indexer] = value' instead, to perform the assignment in a single step.\r\n\r\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\r\n  pd1[\"A\"][0] = None\r\npandas (parent):\r\n     A\r\n0  1.0\r\n1  2.0\r\n\r\npandas (view):\r\n     A\r\n0  1.0\r\n```\r\n\r\nNote that the so-called \"cuDF view\" contains NA, which I believe is unexpected here. With copy-on-write on, `cudf1[\"A\"][0] = None` should have meant that `cudf1[\"A\"]` is copied the moment element 0 is assigned to. If I'm reading this right, it indicates a bug in cudf's copy-on-write implementation that we should address.\r\n\r\nCC @galipremsagar \r\n","createdAt":"2024-05-13T19:35:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8754#issuecomment-2108654568","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59tshI","author":{"login":"galipremsagar"},"authorAssociation":"CONTRIBUTOR","body":"Yes, I think it is a bug. I can take a look at it for next release (24.08). Can you create an issue for it and assign it to me, Vyas?","createdAt":"2024-05-14T01:55:18Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8754#issuecomment-2109130824","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59-1HF","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Any reason that we can't just use this issue? I've assigned it to you now.","createdAt":"2024-05-15T23:04:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8754#issuecomment-2113622469","viewerDidAuthor":false}],"createdAt":"2021-07-16T11:17:54Z","id":"MDU6SXNzdWU5NDYxOTcxMzM=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":8754,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Writing `NA`s in a view results in zeros in the parent dataframe","updatedAt":"2024-05-15T23:04:08Z","url":"https://github.com/rapidsai/cudf/issues/8754"}
