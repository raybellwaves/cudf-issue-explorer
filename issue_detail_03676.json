{"assignees":[],"author":{"id":"MDQ6VXNlcjg0NTczODg=","is_bot":false,"login":"beckernick","name":"Nick Becker"},"body":"For API compatibility and supporting exploratory analysis, we should support Series and DataFrame mean absolute deviation. See the pandas [mean absolute deviation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.mad.html) for more information.\r\n\r\nThis can be implemented for Python Series and DataFrame as a stopgap as `Series.mad` and then leverage `_apply_support_method` for `DataFrame.mad`. It's not 10x faster, but it gets the job done well.\r\n\r\n```python\r\nimport cudf\r\nimport numpy as np\r\n​\r\ndef mad(self):\r\n    # mad formula\r\n    n = len(self)\r\n    m = self.mean()\r\n    mad = ((self - m).abs() / n).sum()\r\n    return mad\r\n​\r\n​# 1 million rows\r\ns = cudf.Series(np.random.normal(10,5,1_000_000))\r\nps = s.to_pandas()\r\n​\r\n%time mp = ps.mad()\r\n%time mg = mad(s)\r\nprint(mp)\r\nprint(mg)\r\nCPU times: user 31.9 ms, sys: 0 ns, total: 31.9 ms\r\nWall time: 32 ms\r\nCPU times: user 0 ns, sys: 7.24 ms, total: 7.24 ms\r\nWall time: 23.2 ms\r\n3.990811998439671\r\n3.990811998439673\r\n```","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps48BY4O","author":{"login":"beckernick"},"authorAssociation":"MEMBER","body":"Based on the following small benchmark, this can probably be done fast enough in Python.\r\n\r\n```python\r\nimport cudf\r\nimport numpy as np\r\n​\r\ndef mad(self):\r\n    # mad formula\r\n    n = len(self)\r\n    m = self.mean()\r\n    mad = ((self - m).abs() / n).sum()\r\n    return mad\r\n​\r\nnrows = (1e6, 10e6)\r\nfor n in nrows:\r\n    s = cudf.Series(np.random.normal(10, 5, int(n)), dtype=\"float32\")\r\n    ps = s.to_pandas()\r\n    print(f\"{int(n):,} rows:\")\r\n    %time mp = ps.mad()\r\n    %time mg = mad(s)\r\n    print()\r\n1,000,000 rows:\r\nCPU times: user 22.9 ms, sys: 0 ns, total: 22.9 ms\r\nWall time: 22.5 ms\r\nCPU times: user 782 µs, sys: 3.24 ms, total: 4.02 ms\r\nWall time: 3.89 ms\r\n\r\n10,000,000 rows:\r\nCPU times: user 213 ms, sys: 100 ms, total: 313 ms\r\nWall time: 313 ms\r\nCPU times: user 1.23 ms, sys: 4.25 ms, total: 5.49 ms\r\nWall time: 5.24 ms\r\n```","createdAt":"2022-01-06T22:59:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/3676#issuecomment-1006997006","viewerDidAuthor":false}],"createdAt":"2019-12-30T15:20:14Z","id":"MDU6SXNzdWU1NDM5MTQ4NjE=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":3676,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Series and DataFrame mean absolute deviation","updatedAt":"2024-05-17T13:51:42Z","url":"https://github.com/rapidsai/cudf/issues/3676"}
