{"assignees":[],"author":{"id":"MDQ6VXNlcjEyNzI1MTEx","is_bot":false,"login":"GregoryKimball","name":"Gregory Kimball"},"body":"**Is your feature request related to a problem? Please describe.**\r\n- [x] #12678\r\n- [x] #12675 \r\n- [x] add device buffer data source to CSV reader benchmark ([code pointer](https://github.com/rapidsai/cudf/blob/c20c8b42215e38bee207b49dad6e28ea04ccbd8c/cpp/benchmarks/io/csv/csv_reader_input.cpp#L102))\r\n- [x] migrate CSV writer to nvbench. Currently using gbench.\r\n- [x] add JSON writer benchmark. This benchmark could be modeled after CSV writer.\r\n- [x] add JSON reader benchmark with file data source ([NESTED_JSON](https://github.com/rapidsai/cudf/blob/branch-23.04/cpp/benchmarks/io/json/nested_json.cpp) only does parsing and only on device buffers). This benchmark could be modeled after `BM_csv_read_io`\r\n- [x] ~#12700~\r\n- [x] ~#12674 -> add compression to `BM_csv_read_io` (?)~\r\n- [x] add benchmark coverage for parquet chunked reader. Perhaps modeled after [parquet_read_io_compression](https://github.com/rapidsai/cudf/blob/c20c8b42215e38bee207b49dad6e28ea04ccbd8c/cpp/benchmarks/io/parquet/parquet_reader_input.cpp#L143)\r\n- [x] for reader benchmarks, verify that the roundtripped table matches the starting table\r\n- [x] convert `compression` and `io` to string axis type. [see this discussion in nvbench](https://github.com/NVIDIA/nvbench/issues/137). the goal is to choose other values from the CLI without having to run all values in automation.\r\n- [ ] rename `pmu`, `efs`, `trc` in ORC writer chunks to `peak_memory_usage`, `encoded_file_size`, `total_rows`, to conform with the other ORC, PQ, CSV, text benchmarks\r\n\r\n**Additional context**\r\nThe initial set of topics came from a comparison of file read throughput across the supported formats in cuIO.\r\n<img width=\"518\" alt=\"image\" src=\"https://user-images.githubusercontent.com/12725111/217667722-a5024218-61fb-410d-941d-9f9eed4f4c5a.png\">\r\nWe are also preparing for a comparison of memory footprint across cuIO, especially with Zstd compression/decompression.\r\n\r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-02-08T22:43:38Z","id":"I_kwDOBWUGps5d_ZSD","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3NTAz","name":"2 - In Progress","description":"Currently a work in progress","color":"fef2c0"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"}],"milestone":{"number":29,"title":"Benchmarking","description":"","dueOn":null},"number":12739,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Update IO benchmarks for consistency between formats","updatedAt":"2024-01-09T05:33:39Z","url":"https://github.com/rapidsai/cudf/issues/12739"}
