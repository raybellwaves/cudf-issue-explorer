{"assignees":[],"author":{"id":"MDQ6VXNlcjM0NDEzMjE=","is_bot":false,"login":"revans2","name":"Robert (Bobby) Evans"},"body":"**Describe the bug**\r\nThe parquet specification at https://github.com/apache/parquet-format/blob/master/LogicalTypes.md when talking about backwards compatibility in maps says that\r\n\r\n> Some existing data incorrectly used MAP_KEY_VALUE in place of MAP. For backward-compatibility, a group annotated with MAP_KEY_VALUE that is not contained by a MAP-annotated group should be handled as a MAP-annotated group.\r\n\r\nThe example schema given for this is.\r\n```\r\n// Map<String, Integer> (nullable map, nullable values)\r\noptional group my_map (MAP_KEY_VALUE) {\r\n  repeated group map {\r\n    required binary key (UTF8);\r\n    optional int32 value;\r\n  }\r\n}\r\n```\r\n\r\nI created a parquet file and put it in [file.zip](https://github.com/rapidsai/cudf/files/9914136/file.zip) that is very similar, but it uses `int32` for both the key and the value.\r\n\r\n```\r\nmessage spark {\r\n  required group my_map (MAP_KEY_VALUE) {\r\n    repeated group map {\r\n      required int32 key;\r\n      required int32 value;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen I read the data back using CUDF I get a schema like `TABLE<STRUCT<STRUCT<INT32, INT32>>>`, but what we want is `TABLE<LIST<STRUCT<INT32, INT32>>>`. Because that first column is a STRUCT and not a LIST only the first row in the LIST is returned.\r\n\r\nIt looks like panads is able to do this.\r\n\r\n```python\r\n>>> pd.read_parquet(\"MAP_KEY_VALUE_TEST.parquet\")\r\n             my_map\r\n0  [(0, 2), (1, 3)]\r\n>>> pd.read_parquet(\"MAP_KEY_VALUE_TEST.parquet\").info()\r\n<class 'pandas.core.frame.DataFrame'>\r\nRangeIndex: 1 entries, 0 to 0\r\nData columns (total 1 columns):\r\n #   Column  Non-Null Count  Dtype \r\n---  ------  --------------  ----- \r\n 0   my_map  1 non-null      object\r\ndtypes: object(1)\r\nmemory usage: 136.0+ bytes\r\n```\r\n\r\n**Additional context**\r\nThis is probably not a super high priority. It is an odd/rare corner case. At least until a customer hit this.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5ORAXs","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thank you @revans2 for documenting this deviation. If this came from your testing of corner-cases in the parquet spec, that is a great outcome. \r\n\r\n","createdAt":"2022-11-14T04:25:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12044#issuecomment-1313080812","viewerDidAuthor":false}],"createdAt":"2022-11-01T21:46:34Z","id":"I_kwDOBWUGps5VXLqB","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":22,"title":"Parquet continuous improvement","description":"","dueOn":null},"number":12044,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Backwards compatible parquet MAP_KEY_VALUE is not treated properly","updatedAt":"2024-02-16T23:38:34Z","url":"https://github.com/rapidsai/cudf/issues/12044"}
