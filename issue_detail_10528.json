{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Update (2023-12-05):**\r\nAdding `peak_memory_usage` to nvbenchmarks can be accomplished with this pattern:\r\n```\r\nauto const mem_stats_logger = cudf::memory_stats_logger(); \r\n\r\nstate.exec( ... );\r\n\r\nstate.add_buffer_size(\r\n    mem_stats_logger.peak_memory_usage(), \r\n    \"peak_memory_usage\", \r\n    \"peak_memory_usage\"\r\n);\r\n```\r\nPlease consult the cuIO benchmarks for how to add peak memory tracking. If we are tracking peak memory usage as well as bytes per second, then we can estimate memory footprint across the libcudf API.\r\n\r\n\r\n**Original issue:**\r\n#7770 added support for peak memory usage to cuIO benchmarks using rmm's `statistics_resource_adapter`. It would be nice to be able to expand that to all of our benchmarks so that we could more easily detect regressions in memory usage. This would be particularly useful for the Dask cuDF team, which is always looking to identify bottlenecks from memory usage. [There was already discussion](https://github.com/rapidsai/cudf/pull/7770#issuecomment-874473349) of doing this in #7770, so we should investigate following up now.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5AcrHj","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"CC @galipremsagar who was interested in this data.\r\n\r\n@devavret it looks like you made this very easy with the `memory_stats_logger`? @harrism would you still be in favor of this?","createdAt":"2022-03-28T23:46:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1081258467","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Ac6Dq","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"> @harrism would you still be in favor of this?\r\n\r\nI don't have a reason not to support this. However it may not benefit the utility of all benchmarks. Does it impact CI benchmark throughput?","createdAt":"2022-03-29T01:58:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1081319658","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5AdCQw","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"I am reluctant to add this new functionality based on Google Benchmark when we are trying to phase that out. \r\n\r\nI would support adding this as a feature to benchmarks ported to NVBench. ","createdAt":"2022-03-29T03:08:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1081353264","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Af8Bc","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@PointKernel I notice that you're already doing this in #10248 with NVBench benchmarks. It looks like it's no more complex than incorporating the resource adapter into GBench benchmarks?","createdAt":"2022-03-29T16:44:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082114140","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5AgPkc","author":{"login":"PointKernel"},"authorAssociation":"MEMBER","body":"> It looks like it's no more complex than incorporating the resource adapter into GBench benchmarks?\r\n\r\nRight. It's effortless with the help of [memory_stats_logger](https://github.com/rapidsai/cudf/blob/branch-22.06/cpp/benchmarks/fixture/benchmark_fixture.hpp#L103-L122). Only two lines to be added:\r\n```cpp\r\nauto mem_stats_logger = cudf::memory_stats_logger(); // init stats logger\r\nstate.exec([&](nvbench::launch& launch) {\r\n  target_kernel();\r\n});\r\nstate.add_element_count(mem_stats_logger.peak_memory_usage(), \"Peak Memory\"); // report peak memory usage to nvbench\r\n\r\n```\r\n","createdAt":"2022-03-29T17:48:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082194204","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5AgQjF","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"So then maybe making this change is independent of whether a benchmark has been switch from GBench to NVBench? It seems like we could add this now, then when a project switches from GBench to NVBench the only required change are to switch `stat.add_element_count(` for `state.counters[\"peak_memory_usage\"]`. ","createdAt":"2022-03-29T17:53:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082198213","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5AgX5T","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"> So then maybe making this change is independent of whether a benchmark has been switch from GBench to NVBench?\r\n\r\nThere's also the parsing and reporting side that will be different.\r\n\r\nI don't want to keep building things on top of GBench when I'm actively trying to get people to switch to NVbench. ","createdAt":"2022-03-29T18:23:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1082228307","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5CUElT","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-04-28T19:03:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1112557907","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5HXXbS","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-07-27T20:03:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-1197307602","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-OhER","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@GregoryKimball do you think this is worth doing systematically for all benchmarks, or something we can add on a case by case basis as the need arises? If the latter, I would vote that we close this issue and just add this when we are benchmarking specific functionality.","createdAt":"2024-05-17T14:27:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10528#issuecomment-2117734673","viewerDidAuthor":false}],"createdAt":"2022-03-28T23:45:36Z","id":"I_kwDOBWUGps5GlDUs","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":{"number":29,"title":"Benchmarking","description":"","dueOn":null},"number":10528,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"Add `peak_memory_usage` to all nvbench benchmarks","updatedAt":"2024-05-17T14:27:47Z","url":"https://github.com/rapidsai/cudf/issues/10528"}
