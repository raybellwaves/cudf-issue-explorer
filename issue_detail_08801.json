{"assignees":[],"author":{"id":"MDQ6VXNlcjI0NjI0MjEw","is_bot":false,"login":"aerdem4","name":"Ahmet Erdem"},"body":"**Describe the bug**\r\ncuDF DataFrame is not reindexed as intented. Using a multiindex, it ends up in NaNs.\r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\ndata_df = cudf.read_parquet('../input/optiver-realized-volatility-prediction/book_train.parquet/stock_id=0/c439ef22282f412ba39e9137a3fdabac.parquet')\r\noffsets = data_df.groupby(['time_id'], as_index=False).agg({'seconds_in_bucket':'min'}).reset_index(drop=True)\r\noffsets.columns = ['time_id', 'offset']\r\ndata_df = cudf.merge(data_df, offsets, on = ['time_id'], how = 'left')\r\ndata_df.seconds_in_bucket = data_df.seconds_in_bucket - data_df.offset\r\n# MultiIndex.from_product uses pandas in the background\r\n# That's why we need to transform the data into pd dataframe\r\ndata_df = data_df.set_index(['time_id', 'seconds_in_bucket'])\r\ncolumns = [col for col in data_df.columns.values]\r\ndata_df = data_df.reindex(cudf.MultiIndex.from_product([data_df.to_pandas().index.levels[0], np.arange(0,600)], names = ['time_id', 'seconds_in_bucket']), columns=columns).fillna(method='ffill')\r\ndata_df = cudf.DataFrame(data_df.reset_index())\r\n```\r\nhttps://www.kaggle.com/medali1992/optiver-train-dataset?scriptVersionId=68637709\r\n\r\nThis workaround works:\r\n```\r\nindices = cudf.MultiIndex.from_product([data_df.to_pandas().index.levels[0], np.arange(0,600)], names = ['time_id', 'seconds_in_bucket'])\r\ndata_df = cudf.DataFrame().set_index(indices).join(data_df, how=\"left\").fillna(method='ffill').reset_index(drop=True)\r\n```\r\n\r\n**Expected behavior**\r\nI expect reindex function to get the correct values instead of NaNs as in pandas.\r\n\r\n**Environment overview (please complete the following information)**\r\nKaggle GPU Docker, RAPIDS 21.06\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps40rMRJ","author":{"login":"medAli-ai"},"authorAssociation":"NONE","body":"**Describe the bug**\r\nThe workaround mentioned by @aerdem4 isn't working anymore.\r\n\r\nThis workaround isn't working\r\n\r\n```\r\nindices = cudf.MultiIndex.from_product([data_df.to_pandas().index.levels[0], np.arange(0,600)], names = ['time_id', 'seconds_in_bucket'])\r\ndata_df = cudf.DataFrame().set_index(indices).join(data_df, how=\"left\").fillna(method='ffill').reset_index(drop=True)\r\n```\r\n\r\n[Kaggle notebook](https://www.kaggle.com/medali1992/optiver-train-dataset) mentioned above.\r\n\r\n**Environment overview (please complete the following information)**\r\nKaggle GPU Docker, RAPIDS 21.06","createdAt":"2021-07-20T22:05:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-883737673","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps40tKYh","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for reporting -- could you please point us to the `parquet` file being referenced in the code snippet above?","createdAt":"2021-07-21T14:53:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-884254241","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps40tQCh","author":{"login":"medAli-ai"},"authorAssociation":"NONE","body":"Hi @shwina ,\r\n\r\nYou just need to click on this [link](https://www.kaggle.com/medali1992/optiver-train-dataset/edit/run/68651140).\r\nThis is a kaggle notebook I created solely for this issue.\r\nYou need to create a kaggle account and you are good to go.\r\nTo enable **GPU** on kaggle notebook, just press the button **Accelerator** on the right below Environment preferences.\r\n\r\nAnd to use the notebook you need to press the **edit and copy** button on the right of the screen.\r\n\r\nHope the explanation is helpful.\r\n\r\n","createdAt":"2021-07-21T15:23:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-884277409","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps40tQZs","author":{"login":"medAli-ai"},"authorAssociation":"NONE","body":"Here is the [link](https://www.kaggle.com/c/optiver-realized-volatility-prediction/data) of the whole parquet dataset used in the competition.","createdAt":"2021-07-21T15:25:30Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-884278892","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps40ywQ6","author":{"login":"beckernick"},"authorAssociation":"MEMBER","body":"Thanks for the additional context and links. Is there perhaps a direct link to the data, outside of Kaggle?","createdAt":"2021-07-23T15:29:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-885720122","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps40yxXf","author":{"login":"medAli-ai"},"authorAssociation":"NONE","body":"I can put the data into my google drive and share it with you if you want and besides you could download them from the kaggle website.\r\nJust create an account, sign in for the competition and you are good to go.","createdAt":"2021-07-23T15:36:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-885724639","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps40yxpt","author":{"login":"medAli-ai"},"authorAssociation":"NONE","body":"Because you can't work with the data unless you accept the terms of the competiton","createdAt":"2021-07-23T15:38:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-885725805","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps4023ij","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Hi @medAli-ai - thanks again. Are you able to reproduce the issue on a smaller dataset, or better yet, independent of any particular dataset? That would greatly help us triage and resolve the problem.","createdAt":"2021-07-26T15:22:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-886798499","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps45xp4o","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-11-15T21:03:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-969317928","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59swXl","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"This is not a MultiIndex issue, it's a data type issue.\r\n\r\nHere is a minimal example that reproduces the problem without requiring the Kaggle dataset:\r\n```\r\ndtype = \"int16\"\r\n# dtype = \"int64\" # We get the expected output if we uncomment this line\r\n\r\ndata_df = cudf.DataFrame({\r\n    \"time_id\": cudf.Series([5, 5, 5, 5, 5], dtype=dtype),\r\n    \"seconds_in_bucket\": cudf.Series([0, 1, 5, 6, 7], dtype=dtype)\r\n})\r\n\r\noffsets = data_df.groupby(\r\n    ['time_id'], as_index=False\r\n).agg(\r\n    {'seconds_in_bucket':'min'}\r\n).reset_index(drop=True)\r\noffsets.columns = ['time_id', 'offset']\r\ndata_df = cudf.merge(data_df, offsets, on = ['time_id'], how = 'left')\r\ndata_df = data_df.set_index(['time_id', 'seconds_in_bucket'])\r\ncolumns = [col for col in data_df.columns.values]\r\nmidx = cudf.MultiIndex.from_product(\r\n    [data_df.to_pandas().index.levels[0], np.arange(0,5)],\r\n    names=['time_id', 'seconds_in_bucket']\r\n)\r\ndata_df = data_df.reindex(midx, columns=columns).fillna(method='ffill').reset_index()\r\nprint(data_df['offset'])\r\n```\r\n\r\nNote that in the second line I don't observe the same issue with NaNs if I change the type. So what is happening?\r\n\r\nHere is a stripped down example that demonstrates the problem\r\n```\r\nimport cudf as pd\r\n# import pandas as pd  # This works\r\n\r\nstarting_dtype = \"int16\"\r\n# starting_dtype = \"int64\"  # This works\r\nidx = pd.Series([0, 1, 2, 3, 4], dtype=starting_dtype)\r\ndata_df = pd.DataFrame({\r\n    \"a\": idx,\r\n    \"b\": [0, 1, 5, 6, 7]\r\n}).set_index([\"a\"])\r\ndata_df = data_df.reindex(idx.astype(\"int64\")).fillna(method='ffill')\r\nassert data_df[\"b\"].isna().sum() == 0\r\n```\r\n\r\nThe issue is that that in the dataset in question, the index columns are int16 columns, whereas the MultiIndex used for reindexing contains a int64 columns by virtue of the `np.arange` call. The smaller example above demonstrates that directly. In order to match pandas here we should be upcasting to handle a merge correctly. Under the hood reindexing involves a merge, so I think that this issue ultimately boils down to something like https://github.com/rapidsai/cudf/issues/14594.","createdAt":"2024-05-13T22:07:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-2108884453","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59s1EC","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@wence- @mroeschke do you have any thoughts on if/how we should be addressing the above?","createdAt":"2024-05-13T22:23:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-2108903682","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59wG_l","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Merging already upcasts to a common dtype, so the problem is in reindexing, which has an explicit carve-out for whether the types in the left and right indices match:\r\n\r\n```\r\n# indexed_frame.py:_reindex\r\n            idx_dtype_match = (df.index.nlevels == index.nlevels) and all(\r\n                _is_same_dtype(left_dtype, right_dtype)\r\n                for left_dtype, right_dtype in zip(\r\n                    (col.dtype for col in df.index._data.columns),\r\n                    (col.dtype for col in index._data.columns),\r\n                )\r\n            )\r\n\r\n```\r\n\r\nI think a good place to start would be to consolidate all of the dtype-matching/promotion utilities in one place. One of the whack-a-mole issues here is that right now we haven't codified anywhere the dtype promotion and matching rules (either in code or docs), so all of these different places have _sui generis_ implementations that don't necessarily agree with each other.","createdAt":"2024-05-14T09:48:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-2109763557","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59-00S","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Good catch, thanks for pointing that out. We could definitely get a lot of mileage out of standardizing more of these kinds of internal helper logic functions.","createdAt":"2024-05-15T23:02:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8801#issuecomment-2113621266","viewerDidAuthor":false}],"createdAt":"2021-07-20T18:56:35Z","id":"MDU6SXNzdWU5NDg5NTg3NzY=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":8801,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] dataframe reindex NaN","updatedAt":"2024-05-15T23:02:50Z","url":"https://github.com/rapidsai/cudf/issues/8801"}
