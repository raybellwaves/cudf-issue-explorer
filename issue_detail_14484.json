{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\ncudf columns are mutable and therefore do not (or should not) implement `__hash__` (in the same way that numpy arrays do not do so).\r\n\r\n_However_, there are circumstances under which we would nonetheless like to be able to compute a hash of a column:\r\n\r\n1. When the wrapping object is actually an immutable one (for example `Index` objects) and so `__hash__` is safe;\r\n2. When tokenizing keys for dask task graphs (see https://github.com/rapidsai/cudf/pull/13695), where the objects may be mutable, but the required semantics are \"two objects that compare equal should hash the same\". This enables dask to perform some amount of optimisation on the task graph for repeated execution and task merging.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI would like to be able to hash a column with a libcudf call and receive a single $k$-bit hash. The first point above does not need to worry excessively about collisions, and python hash values are 64bit ints, so a 64-bit murmur- or xx-hash is likely sufficient. For dask, collisions are more problematic, so a 128-bit md5 would be better (this is what dask uses for pandas dataframes).\r\n\r\n**Describe alternatives you've considered**\r\n\r\nCompute row-wise hashes of columns (on dataframes) to produce a single column of hashes and then copy to host to hash there.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5tPlib","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"For item 1 I don't see any issues. You can always implement `__hash__` on Index objects such that it calls some other helper API `_hash` on the underlying Columns. For option 2, does dask rely on the actual `__hash__` method anywhere, or is it sufficient for there to be some hash function that can be called in `__dask_tokenize__`? I wouldn't want to define `__hash__` in a way that violates the Python data model; to clarify one of your parentheticals, `__hash__` indeed should not be implemented for mutable objects [according to the docs](https://docs.python.org/3/reference/datamodel.html#object.__hash__):\r\n> If a class defines mutable objects and implements an [__eq__()](https://docs.python.org/3/reference/datamodel.html#object.__eq__) method, it should not implement [__hash__()](https://docs.python.org/3/reference/datamodel.html#object.__hash__), since the implementation of [hashable](https://docs.python.org/3/glossary.html#term-hashable) collections requires that a key’s hash value is immutable (if the object’s hash value changes, it will be in the wrong hash bucket).","createdAt":"2023-11-29T22:29:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14484#issuecomment-1832802459","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5tSbdV","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Thanks, I think perhaps my motivating paragraph was not clear. I agree that implementing `__hash__` specifically is independent of whether or not you can somehow compute a \"hash\" of a column, and it should only be implemented where it doesn't break the data model. Dask doesn't rely on `hash` (hence the existence of `__dask_tokenize__`).\r\n\r\nBut, _right now_ the way we implement `__dask_tokenize__` is \"copy-to-host and do something there\", I'd like to just be able to compute a hash on-device.","createdAt":"2023-11-30T11:08:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14484#issuecomment-1833547605","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5ubaSd","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"OK yeah that seems totally reasonable to add.","createdAt":"2023-12-12T19:31:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14484#issuecomment-1852679325","viewerDidAuthor":false}],"createdAt":"2023-11-23T11:09:38Z","id":"I_kwDOBWUGps53r7IG","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":null,"number":14484,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Implement column-wise hashes","updatedAt":"2024-02-23T17:56:38Z","url":"https://github.com/rapidsai/cudf/issues/14484"}
