{"assignees":[],"author":{"id":"MDQ6VXNlcjUzNzk2MDk5","is_bot":false,"login":"brandon-b-miller","name":""},"body":"**Is your feature request related to a problem? Please describe.**\r\nWhen https://github.com/rapidsai/cudf/pull/11452 lands, we'll get JIT `Groupby.apply` for a subset of UDFs and importantly, dtypes. However over the summer we only got as far as writing overloads for `float64` and `int64` dtypes in the users source data. It'd be nice if we could support more dtypes, starting at least with the rest of the numeric types.\r\n\r\n**Describe the solution you'd like**\r\nExtend the existing `groupby.apply`, `engine='jit'` framework to support the following additional dtypes:\r\n- `float32`\r\n- `int32`\r\n- `int16`\r\n- `int8`\r\n- `uint64`\r\n- `uint32`\r\n- `uint16`\r\n- `uint8`\r\n- `bool`\r\n\r\nA lot of the machinery in the original PR is fairly general and should make adding many of these easy-  however there will undoubtedly be edge cases. As such it makes for a pretty good first issue for anyone jumping into the numba extension piece of the codebase.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5Uky61","author":{"login":"dlee992"},"authorAssociation":"NONE","body":"Hi, brandon. I am interested in this part in cuDF, so I can give this a try in a few weeks.","createdAt":"2023-02-06T11:27:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":3}}],"url":"https://github.com/rapidsai/cudf/issues/12608#issuecomment-1418931893","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5U1IXx","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"Hi @dlee992 , thanks so much for your interest in taking this on! I thought I'd share a little about how I'd approach this just to get you off the ground. \r\n\r\nThe main tests I recommend trying to pass first would be [these ones which test simple reductions](https://github.com/rapidsai/cudf/blob/branch-23.04/python/cudf/cudf/tests/test_groupby.py#L403-L407). This test is parameterized based on a list of supported types we hardcode in `groupby_typing`. I tried adding `int32` locally and it looks like a lot works already when running the test:\r\n\r\n```\r\nerror   : Undefined reference to 'BlockMin_int32' in '<cudapy-ptx>'\r\n```\r\n\r\nThis hopefully means that adding a couple of lines around [here in the c++ library](https://github.com/rapidsai/cudf/blob/branch-23.04/python/cudf/udf_cpp/groupby/function.cu#L300) could pass a bunch of tests right off the bat if we're lucky :)\r\n\r\nHappy to help at any time on the [RAPIDS goAI Slack](https://rapids-goai.slack.com/join/shared_invite/zt-trnsul8g-Sblci8dk6dIoEeGpoFcFOQ#/shared-invite/email) by the way, just ping me with any questions. Good luck!\r\n","createdAt":"2023-02-08T20:41:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12608#issuecomment-1423214065","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5U2Yz9","author":{"login":"dlee992"},"authorAssociation":"NONE","body":"Thanks for your kindful comments! I have a little experience in Numba code, but I'm a newbie in cuDF and GPU testing. Anyway, since this is an interesting issue I think, I will give it a try as my side project.\r\n\r\nIn fact, I am now trying to get some GPU devices for local testing usage.\r\n\r\n======\r\n\r\nUpdates: Got several GPU cards in an internal cluster.","createdAt":"2023-02-09T02:51:13Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12608#issuecomment-1423543549","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-PQnD","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@brandon-b-miller is this issue still valid? I see that this works now, for instance:\r\n```\r\nIn [96]: cudf.DataFrame({\r\n    ...:     \"a\": cudf.Series([1, 1, 2, 2, 3, 3], dtype=\"float32\"),\r\n    ...:     \"b\": cudf.Series([2, 4, 0, 12, 30, 20], dtype=\"float32\"),\r\n    ...: }).groupby(\"a\").apply(\r\n    ...:     lambda gp: gp['b'].sum(),\r\n    ...:     engine=\"jit\",\r\n    ...: )\r\nOut[96]:\r\na\r\n1.0     6.0\r\n2.0    12.0\r\n3.0    50.0\r\ndtype: float32\r\n```\r\n\r\nI'm going to close as resolved for the moment, but please reopen if I missed something.\r\n\r\nNote that I'm only concerned with the numeric types mentioned above; I don't think this issue is the right place to track e.g. string or struct UDFs.","createdAt":"2024-05-17T16:10:20Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12608#issuecomment-2117929411","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-PSjU","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"I believe we only have definitions for 4 and 8 byte int and float types for now. It'd be useful if we had implementations for `int8`, `int16` types, etc. But IIRC the problem was missing features on the _cuda_ side. It might have been a lack of atomics for those widths. \r\n\r\nhttps://github.com/rapidsai/cudf/blob/branch-24.06/python/cudf/udf_cpp/shim.cu#L652","createdAt":"2024-05-17T16:15:21Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12608#issuecomment-2117937364","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-QN2A","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Ah OK. Perhaps we should keep this issue open for the moment, then.","createdAt":"2024-05-17T18:36:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/12608#issuecomment-2118180224","viewerDidAuthor":false}],"createdAt":"2023-01-25T15:45:25Z","id":"I_kwDOBWUGps5cy_Bj","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDE2MzIwNzI3","name":"numba","description":"Numba issue","color":"9c2cdd"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":12608,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Support more dtypes in JIT GroupBy `apply`","updatedAt":"2024-05-17T18:36:39Z","url":"https://github.com/rapidsai/cudf/issues/12608"}
