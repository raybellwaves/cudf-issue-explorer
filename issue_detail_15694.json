{"assignees":[],"author":{"id":"MDQ6VXNlcjIwNDc2MDk2","is_bot":false,"login":"AjayThorve","name":"Ajay Thorve"},"body":"**Describe the bug**\r\nWhen I try to use cudf.pandas with [datashader](https://github.com/holoviz/datashader), I get an error `Cannot determine Numba type of <class 'cudf.pandas._wrappers.numpy.ndarray'>`, full repro below. Datashader actually works directly with cudf, and a cudf.DataFrame is an exceptable data format. But using cudf as a no-code-change accelerator for pandas, this seems to fail.\r\n\r\n\r\n**Steps/Code to reproduce bug**\r\n\r\n```python\r\nimport cudf.pandas\r\ncudf.pandas.install()\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nimport datashader as ds\r\nimport datashader.transfer_functions as tf\r\nfrom datashader.colors import inferno\r\n\r\n# Create a small dataset\r\nnp.random.seed(0)\r\nn = 1000\r\ndf = pd.DataFrame({\r\n    'x': np.random.normal(0, 1, n),\r\n    'y': np.random.normal(0, 1, n)\r\n})\r\n\r\n# Create a canvas to render the plot\r\ncvs = ds.Canvas(plot_width=400, plot_height=400)\r\n\r\n# Aggregate the points in the canvas\r\nagg = cvs.points(df, 'x', 'y')\r\n\r\n# Render the plot using a transfer function\r\nimg = tf.shade(agg, cmap=inferno, how='eq_hist')\r\n\r\n# Display the plot\r\nimg\r\n```\r\nOutput\r\n```bash\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nnon-precise type pyobject\r\nDuring: typing of argument at [/home/ajay/miniconda3/envs/rapids-24.06/lib/python3.11/site-packages/datashader/glyphs/glyph.py](http://localhost:8888/lab/tree/dev/miniconda3/envs/rapids-24.06/lib/python3.11/site-packages/datashader/glyphs/glyph.py) (66)\r\n\r\nFile \".[./miniconda3/envs/rapids-24.06/lib/python3.11/site-packages/datashader/glyphs/glyph.py\", line 66](http://localhost:8888/lab/tree/dev/miniconda3/envs/rapids-24.06/lib/python3.11/site-packages/datashader/glyphs/glyph.py#line=65):\r\n    def _compute_bounds(s):\r\n        <source elided>\r\n\r\n    @staticmethod\r\n    ^ \r\n\r\nThis error may have been caused by the following argument(s):\r\n- argument 0: Cannot determine Numba type of <class 'cudf.pandas._wrappers.numpy.ndarray'>\r\n```\r\n\r\n**Expected behavior**\r\nIdeally same output as a cudf or a pandas dataframe.\r\n\r\n**Environment overview (please complete the following information)**\r\n - Environment location: Ubuntu\r\n - Method of cuDF install: Conda\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps59RWdm","author":{"login":"mroeschke"},"authorAssociation":"CONTRIBUTOR","body":"Thanks for the report. As your post highlights it looks like the core issue is that `cudf.pandas` wraps numpy arrays (to use cupy if possible) and this wrapped array is not compatible with numba\r\n\r\n```python\r\nIn [1]: import cudf.pandas\r\n   ...: cudf.pandas.install()\r\n   ...: \r\n   ...: import pandas as pd\r\ni\r\nIn [2]: import numba\r\n\r\nIn [3]: @numba.jit(nopython=True, nogil=True)\r\n   ...: def f(x):\r\n   ...:     return x\r\n   ...: \r\n\r\nIn [4]: f(pd.Series([1]).values)\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\nCell In[4], line 1\r\n----> 1 f(pd.Series([1]).values)\r\n\r\nFile ~/miniforge3/envs/cudf-dev/lib/python3.11/site-packages/numba/core/dispatcher.py:468, in _DispatcherBase._compile_for_args(self, *args, **kws)\r\n    464         msg = (f\"{str(e).rstrip()} \\n\\nThis error may have been caused \"\r\n    465                f\"by the following argument(s):\\n{args_str}\\n\")\r\n    466         e.patch_message(msg)\r\n--> 468     error_rewrite(e, 'typing')\r\n    469 except errors.UnsupportedError as e:\r\n    470     # Something unsupported is present in the user code, add help info\r\n    471     error_rewrite(e, 'unsupported_error')\r\n\r\nFile ~/miniforge3/envs/cudf-dev/lib/python3.11/site-packages/numba/core/dispatcher.py:409, in _DispatcherBase._compile_for_args.<locals>.error_rewrite(e, issue_type)\r\n    407     raise e\r\n    408 else:\r\n--> 409     raise e.with_traceback(None)\r\n\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nnon-precise type pyobject\r\nDuring: typing of argument at <ipython-input-3-88a5a2446c8f> (1)\r\n\r\nFile \"<ipython-input-3-88a5a2446c8f>\", line 1:\r\n@numba.jit(nopython=True, nogil=True)\r\n^ \r\n\r\nThis error may have been caused by the following argument(s):\r\n- argument 0: Cannot determine Numba type of <class 'cudf.pandas._wrappers.numpy.ndarray'>\r\n```\r\n\r\nGoing to repurpose this issue to be about compatibility with numba.","createdAt":"2024-05-09T00:15:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15694#issuecomment-2101700454","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59VYMm","author":{"login":"quasiben"},"authorAssociation":"MEMBER","body":"@brandon-b-miller when you have time can you also take a look at how cudf.pandas and numba are interoperating ?","createdAt":"2024-05-09T14:18:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15694#issuecomment-2102756134","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59XjL3","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"There might be a way to write a little numba extension code within `cudf.pandas` that registers `cudf.pandas._wrappers.numpy.ndarray` objects as something numba can unbox into a numpy array or cupy array. If that worked we could probably do the registration at import time. I'll investigate. ","createdAt":"2024-05-09T19:58:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/15694#issuecomment-2103325431","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-zGie","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"Just a few quick updates here. We took a look at some simple ways of solving this with without too much hacking of numba and didn't come up with a solution we can merge into cuDF in the very immediate term. There's a few more medium term approaches in the form of updates to numba main that may do the trick however. I would like to keep this issue open as we progress and can give more updates here as we have them. ","createdAt":"2024-05-23T14:46:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15694#issuecomment-2127325342","viewerDidAuthor":false}],"createdAt":"2024-05-07T19:56:09Z","id":"I_kwDOBWUGps6IJNe2","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"LA_kwDOBWUGps8AAAABlj4eYg","name":"cudf.pandas","description":"Issues specific to cudf.pandas","color":"984DFB"}],"milestone":{"number":35,"title":"Proxying - cudf.pandas","description":"","dueOn":null},"number":15694,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] cudf.pandas wrapped numpy arrays not compatible with numba","updatedAt":"2024-05-23T14:46:55Z","url":"https://github.com/rapidsai/cudf/issues/15694"}
