{"assignees":[],"author":{"id":"MDQ6VXNlcjE2ODM2OTIx","is_bot":false,"login":"KazukiOnodera","name":"Kazuki Onodera"},"body":"**Describe the bug**\r\ngroupby.fillna(method=\"ffill\") doesn't work for NaN. bfill also has same issue.\r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\nIn [3]: df = cudf.DataFrame(\r\n   ...:     [\r\n   ...:         [\"A\", 1],\r\n   ...:         [\"A\", np.nan],\r\n   ...:         [\"B\", 0],\r\n   ...:         [\"B\", None],\r\n   ...:     ],\r\n   ...:     columns=[\"x\", \"y\"],\r\n   ...: )\r\n   ...: \r\n\r\nIn [4]: df\r\nOut[4]: \r\n   x     y\r\n0  A     1\r\n1  A  <NA>\r\n2  B     0\r\n3  B  <NA>\r\n```\r\nfillna works for < NA >\r\n```\r\nIn [5]: df.groupby(\"x\")[\"y\"].fillna(method=\"ffill\")\r\n   ...: \r\nOut[5]: \r\n0    1\r\n1    1\r\n2    0\r\n3    0\r\nName: y, dtype: int64\r\n```\r\nBut it doesn't work for NaN\r\n```\r\nIn [6]: df.loc[df[\"y\"].isnull(), \"y\"] = np.nan\r\n   ...: df\r\nOut[6]: \r\n   x    y\r\n0  A  1.0\r\n1  A  NaN\r\n2  B  0.0\r\n3  B  NaN\r\n\r\nIn [7]: df.groupby(\"x\")[\"y\"].fillna(method=\"ffill\")\r\n   ...: \r\nOut[7]: \r\n0    1.0\r\n1    NaN\r\n2    0.0\r\n3    NaN\r\nName: y, dtype: float64\r\n```\r\nWe need to replace NaN with < NA > using None\r\n```\r\nIn [8]: df.loc[df[\"y\"].isnull(), \"y\"] = None\r\n   ...: df\r\nOut[8]: \r\n   x     y\r\n0  A   1.0\r\n1  A  <NA>\r\n2  B   0.0\r\n3  B  <NA>\r\n\r\nIn [9]: df.groupby(\"x\")[\"y\"].fillna(method=\"ffill\")\r\n   ...: \r\nOut[9]: \r\n0    1.0\r\n1    1.0\r\n2    0.0\r\n3    0.0\r\nName: y, dtype: float64\r\n```\r\n\r\n**Environment overview (please complete the following information)**\r\ncudf version is \"22.02.00\"\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4-1yRE","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"This is definitely a bug. While it can be argued that `nan` should not be treated as a \"null\" value (since we have dedicated null values), the behaviour of `.groupby.fillna(method=\"ffill\")` should be consistent with `.fillna(method=\"ffill\")` (which fills `nan`):\r\n\r\n```python\r\nIn [64]: s\r\nOut[64]:\r\n0    0.0\r\n1    1.0\r\n2    2.0\r\n3    NaN\r\ndtype: float64\r\n\r\nIn [65]: s.fillna(method=\"ffill\")\r\nOut[65]:\r\n0    0.0\r\n1    1.0\r\n2    2.0\r\n3    2.0\r\ndtype: float64\r\n```\r\n\r\nSo we should either never fill nans, or always fill nans.","createdAt":"2022-02-28T14:02:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10365#issuecomment-1054286916","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps4-29W4","author":{"login":"isVoid"},"authorAssociation":"CONTRIBUTOR","body":"A few more data points, aside from `fillna`:\r\n`dropna`, `isna`, `notna` all treats `nan` as missing value:\r\n\r\n```python\r\nIn [3]: df = cudf.DataFrame({\"a\": [1, float(\"nan\"), 2, None]}, nan_as_null=False)\r\n\r\nIn [4]: df\r\nOut[4]: \r\n      a\r\n0   1.0\r\n1   NaN\r\n2   2.0\r\n3  <NA>\r\n\r\nIn [5]: df.dropna()\r\nOut[5]: \r\n     a\r\n0  1.0\r\n2  2.0\r\n\r\nIn [6]: df.isna()\r\nOut[6]: \r\n       a\r\n0  False\r\n1   True\r\n2  False\r\n3   True\r\n\r\nIn [7]: df.notna()\r\nOut[7]: \r\n       a\r\n0   True\r\n1  False\r\n2   True\r\n3  False\r\n```\r\n\r\nI think for `groupby.fillna` to match, we should add a `nans_to_nulls` cast before passing the value column to libcudf?","createdAt":"2022-02-28T19:35:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10365#issuecomment-1054594488","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5AlfmE","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-03-30T20:03:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10365#issuecomment-1083570564","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5FsDcC","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-06-28T20:03:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10365#issuecomment-1169176322","viewerDidAuthor":false}],"createdAt":"2022-02-26T12:49:43Z","id":"I_kwDOBWUGps5EpuG0","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":10365,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] groupby.fillna(method=\"ffill\") doesn't work for NaN","updatedAt":"2024-02-23T18:42:52Z","url":"https://github.com/rapidsai/cudf/issues/10365"}
