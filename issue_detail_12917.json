{"assignees":[],"author":{"id":"MDQ6VXNlcjI0ODcx","is_bot":false,"login":"vaceslav","name":"Slava"},"body":"**Describe the bug**\r\nI'm not sure if it is a bug or just limitation of cuDF architecture.\r\nPlease correct me. \r\n \r\nI have DataFrames with lot of columns and some of columns are strings with type **category**.\r\nMy data sets have about 5_000_000 rows. And category columns have more than 500_000 unique values. \r\nWhat I'm wondering is that copy of categorical columns (CPU -> GPU) takes a lot time in comparison the same data  not categorized. \r\nMore strange is that **groupby** function on categorical columns is many times slower that on non categorical columns. (Same content)   \r\n\r\n**Steps/Code to reproduce bug**\r\ncreate 2 arrays with categorical data. There are 500_000 unique values\r\n```\r\ncat1 = [ 'col1_cat_' + str(i)  for i in range(1, 500_000)] \r\ncat2 = [ 'col2_cat_' + str(i)  for i in range(1, 500_000)]\r\n```\r\ninitialize Panda DataFrame with 5_000_000 rows\r\n```\r\nrng = np.random.default_rng()\r\ncol1 = np.random.choice(a=cat1,  size=5_000_000)  \r\ncol2 = np.random.choice(a=cat2,  size=5_000_000)  \r\n\r\ndf = pd.DataFrame( {  'col1': col1,  'col2': col2,  'col3': col1,  'col4': col2  })\r\n```\r\n\r\nsize of DataFrame is about 1.5 GB\r\n```\r\n>> df.memory_usage(deep=True) / 1024 / 1024\r\nIndex      0.000122\r\ncol1     342.262686\r\ncol2     342.264298\r\ncol3     342.262686\r\ncol4     342.264298\r\ndtype: float64\r\n```\r\nWe execute groupby on CPU.  \r\n```\r\n%%time\r\ndf.groupby(['col1']).count()\r\n```\r\n*CPU times: user 2.43 s, sys: 23.8 ms, total: 2.46 s\r\nWall time: 2.46 s*\r\n\r\nNow we convert string data to category type.\r\n```\r\ndf_cat = df[['col1', 'col2', 'col3', 'col4']].astype('category')\r\n>>df_cat.memory_usage(deep=True) / 1024 / 1024\r\nIndex     0.000122\r\ncol1     69.423543\r\ncol2     69.423198\r\ncol3     69.423543\r\ncol4     69.423198\r\ndtype: float64\r\n```\r\nDF size is about 300 MB\r\n```\r\n%%time\r\ndf_cat.groupby(['col1']).count()\r\n```\r\n*CPU times: user 50.5 ms, sys: 8.29 ms, total: 58.8 ms\r\nWall time: 57.7 ms*\r\n\r\nWith categorical data we are __40 times__ faster that with non categorical data. That is expected performance.\r\nNow we copy non categorized data to the GPU\r\n```\r\n%%time\r\ngdf = cudf.DataFrame.from_pandas(df)\r\n```\r\n*CPU times: user 511 ms, sys: 221 ms, total: 731 ms\r\nWall time: 730 ms*\r\nCopy of date takes about 700ms for 1.5GB\r\n\r\n```\r\n%%time\r\ngdf.groupby(['col1']).count()\r\n```\r\n*CPU times: user 30.6 ms, sys: 3.8 ms, total: 34.4 ms\r\nWall time: 33 ms*\r\n**groupby** is about 70 times faster that on CPU (2.46s). Very good performance. IMPORTANT data is **NOT CATEGORIZED**\r\n\r\nNow we copy categorized data to the GPU and execute **groupby**\r\n```\r\n%%time\r\ngdf_cat = cudf.DataFrame.from_pandas(df_cat)\r\n```\r\n*CPU times: user 711 ms, sys: 136 ms, total: 847 ms\r\nWall time: 846 ms*\r\n```\r\n%%time\r\ngdf_cat.groupby(['col1']).count()\r\n```\r\n*CPU times: user 134 ms, sys: 55.8 ms, total: 190 ms\r\nWall time: 189 ms*\r\n\r\nAmount of data is about 300MB. cuDf needs more time to copy the data to the GPU: 846ms (730ms by non categorized 1.5 GB raw strings)\r\nBut really strange behaviour is that **groupby**  on categorized data is more than 5 times slower than with raw string data!!!\r\n**Even groupby on CPU is faster that on GPU by categorical data 57ms --> 189ms!!!!!**\r\n\r\nWhy is performance of cuDF groupy with categorical data so poor?\r\n\r\n**Expected behavior**\r\n**groupby** function on GPU should work faster or at least equal than on CPU\r\n\r\n**Environment overview (please complete the following information)**\r\nCPU RAM: 64 GB\r\nGPU RAM: 8GB\r\n\r\n**Environment details**\r\ntested on 3 different systems with 3 different NVIDIA cards\r\n\r\n**Additional context**\r\nIn attachments you can find my Jupiter Notebook with example. \r\n[category.ipynb.zip](https://github.com/rapidsai/cudf/files/10936367/category.ipynb.zip)\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5X3S8d","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thank you @vaceslav for sharing this detailed performance comparison. The \"category\" type in cuDF is a relatively new feature, and part of the poor performance is that we haven't mapped any category functions to the underlying [libcudf dictionary type](https://github.com/rapidsai/cudf/tree/branch-23.04/cpp/src/dictionary). \r\n\r\nWould you please share a bit more about why categories are important to your work, rather than just using non-category string columns?\r\n\r\n","createdAt":"2023-03-17T16:43:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12917#issuecomment-1474113309","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5YXwvC","author":{"login":"vaceslav"},"authorAssociation":"NONE","body":"Hello @GregoryKimball ,\r\n\r\nto answer to your question \"why categories are important\" is easy: performance :-) \r\nThat is why everyone of us use cuDF. It is more faster that pandas implementation. \r\n\r\nHere are key points:\r\n- category consumes much less memory\r\n- df column as category is much faster than string, because of internal structure. (at least in pandas)\r\n\r\nIn our business use case we have many DataFrames and need to calculate data on the fly. Means under 1 second per request.  In worst case we have 5_000_000 rows and  need to calculate some **groupby** + aggregate operations.\r\nWe are working with Geospatial data and some of our columns have [geohash](https://en.wikipedia.org/wiki/Geohash) value. There are more than 500_000 unique values per column.\r\n\r\nIf we use strings the amount of data is about 2.5 GB. That data needs to be transfered to the GPU. It takes about 2 seconds.\r\nIf we use categories the amount of data is about 250 MB. \r\n\r\nBecause of slow performance in cuDF we made following workaround: We converted our strings to int64. \r\nNow amount of data is about 300-400 MB and the performance is good. \r\n\r\nBut nevertheless it would be great to have good performance with categorical data. ","createdAt":"2023-03-24T11:03:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/12917#issuecomment-1482623938","viewerDidAuthor":false}],"createdAt":"2023-03-09T21:53:26Z","id":"I_kwDOBWUGps5gcWbm","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":null,"number":12917,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Slow performance with high cardinality category columns","updatedAt":"2023-03-24T11:03:54Z","url":"https://github.com/rapidsai/cudf/issues/12917"}
