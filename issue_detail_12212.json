{"assignees":[{"id":"MDQ6VXNlcjc0MTY5MzU=","login":"ttnghia","name":"Nghia Truong"}],"author":{"id":"MDQ6VXNlcjc0MTY5MzU=","is_bot":false,"login":"ttnghia","name":"Nghia Truong"},"body":"Currently, the API `lists::index_of` can only search for the first or last index of the given key in the lists. In some cases, we need to search for all the positions where the key appears in the search space (lists). For example, we want to remove an element from the lists:\r\n```\r\nremove({1, 2, 3, 4, 5}, 3) ==> {1, 2, 4, 5}\r\n```\r\n\r\nIn order to implement such API (`remove`), we need to support `duplicate_find_option::FIND_ALL` for `lists::index_of` so we can search for all indices of the search key as a gather map and generate the output using that gather map.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5PWs5w","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thanks @ttnghia for raising this issue. Would the \"find_all\" behavior in [parsing_utils.cu](https://github.com/rapidsai/cudf/blob/e67b94b19056282325bd5bad823fd66aeafd92c5/cpp/src/io/utilities/parsing_utils.cu#L117) be useful for this new option?","createdAt":"2022-11-29T21:39:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12212#issuecomment-1331351152","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5PW1IL","author":{"login":"ttnghia"},"authorAssociation":"CONTRIBUTOR","body":"No, it is similar but totally different here. That `parsing_utils.cu#find_all_from_set()` is dealing only with `char` type. For general lists (which may be nested) then the implementation is very different.","createdAt":"2022-11-29T22:09:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12212#issuecomment-1331384843","viewerDidAuthor":false}],"createdAt":"2022-11-21T16:56:31Z","id":"I_kwDOBWUGps5W63JU","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":null,"number":12212,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Support `duplicate_find_option::FIND_ALL` for `lists::index_of`","updatedAt":"2023-01-07T00:07:08Z","url":"https://github.com/rapidsai/cudf/issues/12212"}
