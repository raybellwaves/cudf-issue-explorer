{"assignees":[],"author":{"id":"MDQ6VXNlcjE5MDEwNTk=","is_bot":false,"login":"abellina","name":"Alessandro Bellina"},"body":"We currently support in the Java side some combinations of allocators and wrappers that make it easy to setup pools (default, arena, and now async), backing allocators (cuda, managed memory). But it is getting to the point that the options in these allocators don't all fit the min/max pool size pattern.\r\n\r\n- The non-pooled allocators don't have a minimum or maximum setting.\r\n- The async allocator doesn't support managed memory, and it also has a third setting \"threshold\" that isn't exposed in RMM but it probably could/should, and we don't really have a way to express that.\r\n- The allocators are composed with the tracking and likely the limiting adapters as well, by default. \r\n\r\nFor general users of the cuDF JNI side of things the above combinations may not be desired. We propose exposing an RMM that would allow better composability of the various allocators we use and test with (note this is a good chance to clean up some tech debt as well for allocators we no longer use or intend to support). ","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps43eMVP","author":{"login":"abellina"},"authorAssociation":"CONTRIBUTOR","body":"One issue that was raised was that a `DeviceMemoryBuffer` could instead be composed using a java \"MemoryResource\", rather than having to create other classes like `CudaMemoryBuffer` to accomplish this. We could then pass other resources like a potential \"AsyncMemoryResource\" instance, or some hierarchy of other resources (the logging resource + pool for example). Ideally this issue would tackle this problem as well.","createdAt":"2021-09-30T01:06:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9209#issuecomment-930661711","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps45xqBt","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-11-15T21:03:35Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9209#issuecomment-969318509","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps495X03","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-02-13T22:03:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9209#issuecomment-1038449975","viewerDidAuthor":false}],"createdAt":"2021-09-09T22:15:09Z","id":"MDU6SXNzdWU5OTI3MDE5NzQ=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxNDA1MTQ1NjIz","name":"cuDF (Java)","description":"Affects Java cuDF API.","color":"006b75"}],"milestone":null,"number":9209,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA][JNI] expose an RMM allocator API in cuDF JNI","updatedAt":"2024-02-23T18:42:47Z","url":"https://github.com/rapidsai/cudf/issues/9209"}
