{"assignees":[],"author":{"id":"MDQ6VXNlcjMxODc5Mzg=","is_bot":false,"login":"gerashegalov","name":"Gera Shegalov"},"body":"**Is your feature request related to a problem? Please describe.**\r\nI wish I could use libcudf's segmented_reduce without much pre/post-processing to implement SQL 3VL \r\n\r\nCurrent implementation is \"null begets null\" with https://docs.rapids.ai/api/libcudf/stable/group__aggregation__reduction.html#gae36b126703c20e1836f5eb02adaa965d\r\n> <html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\nnull_handling | IfÂ INCLUDE, the reduction is valid if all elements in a segment are valid, otherwise null\r\n-- | --\r\n\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\r\n\r\n**Describe the solution you'd like**\r\nIn SQL 3VL, a valid result is returned when the result does not depend on the \"unknowns\" .  E.g. given in Spark\r\n```\r\n>>> sql(\"select null or true\").show()\r\n+--------------+\r\n|(NULL OR true)|\r\n+--------------+\r\n|          true|\r\n+--------------+\r\n```\r\nby extension one would expect `ANY` aggregation which is just OR-ing to be valid `true` if one of the segment values is 1 regardless of presence of NULLs.\r\n\r\nSimilar argument can be made for min/max aggregations if the segment contains a minimum/maximum value for the type such as INT_MIN/INT_MAX  \r\n\r\n**Describe alternatives you've considered**\r\nRun multiple reductions https://github.com/NVIDIA/spark-rapids/blob/branch-22.06/sql-plugin/src/main/scala/com/nvidia/spark/rapids/higherOrderFunctions.scala#L371-L384 to implement 3VL\r\n\r\n**Additional context**\r\n[spark.sql.legacy.followThreeValuedLogicInArrayExists](https://spark.apache.org/docs/latest/sql-migration-guide.html)","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5FhLmD","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-06-25T17:03:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10977#issuecomment-1166326147","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5LCiV5","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-09-27T04:31:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10977#issuecomment-1258956153","viewerDidAuthor":false}],"createdAt":"2022-05-26T02:14:43Z","id":"I_kwDOBWUGps5KckxU","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":null,"number":10977,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Allow SQL-like 3VL for segmented_reduce","updatedAt":"2024-02-23T18:42:35Z","url":"https://github.com/rapidsai/cudf/issues/10977"}
