{"assignees":[],"author":{"id":"MDQ6VXNlcjM0NDEzMjE=","is_bot":false,"login":"revans2","name":"Robert (Bobby) Evans"},"body":"**Is your feature request related to a problem? Please describe.**\r\nSpark supports an `array_sort` SQL method that will sort arrays, but it takes a lambda function that calculates and returns the comparison between the elements of the array instead of going off of a config for doing the ordering.\r\n\r\nThe docs for this are at https://spark.apache.org/docs/latest/api/sql/index.html#array_sort\r\n\r\n```\r\nThe comparator will take two arguments representing two elements of the array. It returns -1, 0, or 1 as the first element is less than, equal to, or greater than the second element. If the comparator function returns other values (including null), the function will fail and raise an error.\r\n```\r\n\r\n**Describe the solution you'd like**\r\nI would love a segmented_sorted_order that takes an AST function similar to an inequality join and follows the rules described above. I am fine if it is more lenient than Spark requires and does not throw exceptions if the values do not fully conform to exactly what is requested here.\r\n\r\nWe may also need some extensions to what the AST can do.  Because of the tight rules that Spark has the implementations often use case/when and if/else expressions. We probably need to file a separate issue for this, but I wanted to call it out here because without it, there isn't a lot that we can do.\r\n\r\n**Describe alternatives you've considered**\r\nWe don't really have any other alternative. We could do some code analysis of the function and see if it matches some known patterns for ascending/descending and nulls preceding or following. But this is very limiting, and we would prefer to do it as a performance improvement instead.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5HauoP","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-07-28T14:04:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11162#issuecomment-1198189071","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Mro90","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thank you @revans2 for starting this discussion of Spark's `array_sort` API and it's `func` argument. The documentation you shared includes two examples. Are these typical of the user-provided `func` arguments - are there other patterns you could share?\r\n\r\n`case when left < right then -1 when left > right then 1 else 0 end`: is this just a verbose write-out of the default behavior?\r\n`case when left is null and right is null then 0 when left is null then -1 when right is null then 1 when left < right then 1 when left > right then -1 else 0 end`: is this kind of elaborate null handling typical of how the `func` argument is used?","createdAt":"2022-10-21T06:16:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11162#issuecomment-1286508404","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5MuCsh","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"Yes this is very typical of what a user would provide.","createdAt":"2022-10-21T15:41:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11162#issuecomment-1287138081","viewerDidAuthor":false}],"createdAt":"2022-06-28T14:00:41Z","id":"I_kwDOBWUGps5MvCbE","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":21,"title":"Expression evaluation","description":"","dueOn":null},"number":11162,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Support segmented_sorted_order using an AST function for comparison or something similar","updatedAt":"2022-10-24T22:05:53Z","url":"https://github.com/rapidsai/cudf/issues/11162"}
