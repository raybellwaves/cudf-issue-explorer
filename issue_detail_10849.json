{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"Related to #10754, the current implementation of `from_dlpack` requires unit-stride fortran order, and produces appropriate error messages in the unsupported cases\r\n\r\nConsider\r\n\r\n```python\r\nimport cudf\r\nimport cupy\r\na = cupy.arange(10)\r\nb = a[::2]\r\nc = cudf.from_dlpack(b.__dlpack__())\r\n=> RuntimeError: from_dlpack of 1D DLTensor only for unit-stride data\r\nb = cupy.broadcast_to(a[1], (10,)) # b is stride-0\r\n=> RuntimeError: from_dlpack of 1D DLTensor only for unit-stride data\r\n\r\na = cupy.arange(12).reshape(3, 4).copy(order=\"F\")\r\nb = a[::2, :]\r\nc = cudf.from_dlpack(b.__dlpack__())\r\n=> RuntimeError: from_dlpack of 2D DLTensor only for column-major unit-stride data\r\n```\r\n\r\nSince `from_dlpack` copies in all cases right now, I think that things can be handled like so:\r\n\r\n1. Non-fortran-order: useful error\r\n2. unit-stride: current `cudaMemcpyAsync` one column at a time\r\n3. fastest-dimension is stride-0 (broadcasted arrays): `std::fill` for the 1D case, just getting the strides right for the 2D case\r\n4. fastest-dimension is stride-N (sliced arrays): `cudaMemcpy2DAsync` with appropriate choices of pitch and stride for the source array\r\n\r\nHowever, I'm not really sure of the performance implications of these choices, and if the current approach of producing an error and requiring that the caller copy to contiguous fortran-order first before calling `from_dlpack` is not better. For example, for case 4 is it faster to copy to a contiguous buffer first rather than copying column by column?","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5DSKm9","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"The silently bad behaviour was turned into actual `logic_error`s in #10850, it would still be possible to support more fortran-order or broadcasted inputs if desired.","createdAt":"2022-05-17T12:56:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10849#issuecomment-1128835517","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5FAE89","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-06-16T13:14:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10849#issuecomment-1157648189","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Lr-ly","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-10-06T11:04:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10849#issuecomment-1269819762","viewerDidAuthor":false}],"createdAt":"2022-05-13T13:56:20Z","id":"I_kwDOBWUGps5JoNrx","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":null,"number":10849,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[ENH] Support more input data layouts in `cudf.from_dlpack`","updatedAt":"2024-02-23T18:42:38Z","url":"https://github.com/rapidsai/cudf/issues/10849"}
