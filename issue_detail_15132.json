{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently core pylibcudf owning objects are difficult to construct. Columns are constructed using a complete signature involving nearly raw pointers, while Scalars are really only constructible from pyarrow scalars. While this approach is sufficient for now due to the interop layers baked into cuDF's Cython, in the long run this will not be a reasonable API for users. We need to define simpler ways for users to create these objects, ideally without sacrificing the performance of the lowest level APIs in cases where power users want to access them.\r\n\r\n**Describe the solution you'd like**\r\nWe should define a `singledispatch` `classmethod` factory `from_any` that accepts an arbitrary input and attempts to construct from it. Each specialization should be a trivial one-line passthrough to a separate `classmethod` factory of the appropriate type, such that users who know what input they have could always call the appropriate factory themselves. For instance:\r\n\r\n```\r\nclass Column:\r\n    @singledispatchmethod\r\n    @classmethod\r\n    def from_any(cls, obj):\r\n        raise ValueError(\"Not supported\")\r\n\r\n    @from_any.register(np.ndarray)\r\n    def from_any(cls, obj):\r\n        return cls.from_numpy_array(obj)\r\n\r\n    @classmethod\r\n    def from_numpy_array(cls, obj : np.ndarray):\r\n        ...\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nWe could wrap the `singledispatch` function in a higher-level fused-type Cython function that could do compile-time dispatch on known C types. That would offer a minor performance benefit in a limited number of cases, but at the cost of unnecessary complexity IMO, especially since the vast majority of user inputs are not going to be Cython-typed objects but will instead come in as PyObjects that need to be introspected at runtime via `isinstance` anyway (which is what `singledispatch` does).\r\n\r\n**Additional context**\r\nThe current Column constructor is not the most usable and we may eventually want to make the current constructor into a factor and instead have the constructor be something more user-friendly. ","closed":false,"closedAt":null,"comments":[],"createdAt":"2024-02-24T00:19:14Z","id":"I_kwDOBWUGps6ARKnO","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"LA_kwDOBWUGps8AAAABoeP23w","name":"pylibcudf","description":"Issues specific to the pylibcudf package","color":"e99695"}],"milestone":null,"number":15132,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Add standard data ingestion pipelines to pylibcudf","updatedAt":"2024-05-28T23:33:42Z","url":"https://github.com/rapidsai/cudf/issues/15132"}
