{"assignees":[{"id":"MDQ6VXNlcjM5NDM3NjE=","login":"bdice","name":"Bradley Dice"}],"author":{"id":"MDQ6VXNlcjM5NDM3NjE=","is_bot":false,"login":"bdice","name":"Bradley Dice"},"body":"Recently, some issues were identified where `std::pow` was being used with fixed-point values (#14210, #14233, #14242). There are many places in libcudf where we require an \"integer power\" operator, because `std::pow` uses floating-point values and thus gives erroneous results when handling high-precision integral values like `decimal128`. [This thread](https://github.com/rapidsai/cudf/pull/14233#discussion_r1340671836) covers a few key changes that are needed in libcudf:\r\n- Consolidating existing \"integer power\" operators:\r\n  - https://github.com/rapidsai/cudf/blob/7825790eac838e7a852d9b2429c64e78710cee28/cpp/include/cudf/fixed_point/fixed_point.hpp#L93\r\n  - https://github.com/rapidsai/cudf/blob/7825790eac838e7a852d9b2429c64e78710cee28/cpp/src/binaryop/compiled/operation.cuh#L251\r\n  - Changes from #14233\r\n  - Changes from #14242\r\n- Using a lookup table where possible (#9346), and exponentiation-by-squaring if outside the lookup table's bounds\r\n\r\nRelated: https://github.com/rapidsai/cudf/issues/10178","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-10-03T06:21:35Z","id":"I_kwDOBWUGps5ypNRi","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":null,"number":14243,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"Consolidate and optimize integer power implementations in libcudf","updatedAt":"2024-02-23T18:02:00Z","url":"https://github.com/rapidsai/cudf/issues/14243"}
