{"assignees":[],"author":{"id":"MDQ6VXNlcjc0MTY5MzU=","is_bot":false,"login":"ttnghia","name":"Nghia Truong"},"body":"During debugging a Parquet issue, I found that the Parquet metadata is not correctly written by cudf. In particular, in a round trip test, a pair of metadata `{\"key_str\", \"\"}` is written then read as `{\"key_str\", null}` in Spark. This is due to the `CompactProtocolFieldWriter` does not write empty value string:\r\n```\r\nsize_t CompactProtocolWriter::write(KeyValue const& k)\r\n{\r\n  CompactProtocolFieldWriter c(*this);\r\n  c.field_string(1, k.key);\r\n  if (not k.value.empty()) { c.field_string(2, k.value); }                 <================ here\r\n  return c.value();\r\n}\r\n```\r\n\r\nWe should write all value strings even for empty value.\r\n\r\nHowever, I'm not sure if this is the expected behavior of compact protocol?","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5lbiWj","author":{"login":"etseidl"},"authorAssociation":"CONTRIBUTOR","body":"The `value` in `KeyValue` is an optional field in the spec, so it's correct to write nothing if it isn't set.  In #14000 I've started using `std::optional` for optional fields, to distinguish from merely empty but present fields. Perhaps that could be done throughout the Parquet thrift objects.","createdAt":"2023-08-31T20:12:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701717411","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5lbo3N","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"@etseidl I assume that the key-value pair is optional, but is it okay to include the key without the value? ","createdAt":"2023-08-31T20:34:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701744077","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5lbqdf","author":{"login":"etseidl"},"authorAssociation":"CONTRIBUTOR","body":"> @etseidl I assume that the key-value pair is optional, but is it okay to include the key without the value? \r\n\r\nAccording to the thrift idl, yes.\r\n\r\n```thrift\r\n struct KeyValue {\r\n  1: required string key\r\n  2: optional string value\r\n}\r\n```\r\n\r\nAlso optional in `FileMetaData`\r\n```thrift\r\nstruct FileMetaData {\r\n  ...\r\n  /** Optional key/value metadata **/\r\n  5: optional list<KeyValue> key_value_metadata\r\n}\r\n```","createdAt":"2023-08-31T20:39:33Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701750623","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5lcLB9","author":{"login":"ttnghia"},"authorAssociation":"CONTRIBUTOR","body":"That's interesting. Then such \"optional\" should mean the user can specify it as an optional, instead of the current behavior (the library ignores writing empty string without the user's knowledge). So #14000 should be the way to go instead.","createdAt":"2023-08-31T22:54:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701884029","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5lcS5y","author":{"login":"etseidl"},"authorAssociation":"CONTRIBUTOR","body":"> That's interesting. Then such \"optional\" should mean the user can specify it as an optional, instead of the current behavior (the library ignores writing empty string without the user's knowledge). So #14000 should be the way to go instead.\r\n\r\nYes, I think making more use of `optional` would make things clearer (although I didn't notice someone beat me to it :sweat_smile:  @PointKernel apparently) https://github.com/rapidsai/cudf/blob/ad9fa501192332ca8ce310ffe967473ec0945a97/cpp/src/io/parquet/compact_protocol_reader.hpp#L265","createdAt":"2023-08-31T23:42:36Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14024#issuecomment-1701916274","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5lxCxB","author":{"login":"PointKernel"},"authorAssociation":"MEMBER","body":"Yeah, using `std::optional` to properly handle optional field reading/writing was on my TODO list but then got distracted by other tasks.","createdAt":"2023-09-05T21:51:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14024#issuecomment-1707355201","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps50FRwe","author":{"login":"vuule"},"authorAssociation":"CONTRIBUTOR","body":"This issue has been at least partially addressed. We need to make another pass over `CompactProtocolReader::read` functions to verify that all optional fields are treated as such.","createdAt":"2024-02-16T00:12:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14024#issuecomment-1947540510","viewerDidAuthor":false}],"createdAt":"2023-08-31T18:25:18Z","id":"I_kwDOBWUGps5v0oMs","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3NTAz","name":"2 - In Progress","description":"Currently a work in progress","color":"fef2c0"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"}],"milestone":{"number":22,"title":"Parquet continuous improvement","description":"","dueOn":null},"number":14024,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] `CompactProtocolFieldWriter` does not write empty value string in key-value pair","updatedAt":"2024-02-16T23:37:45Z","url":"https://github.com/rapidsai/cudf/issues/14024"}
