{"assignees":[{"id":"MDQ6VXNlcjEyNzE2OTc5","login":"PointKernel","name":"Yunsong Wang"},{"id":"MDQ6VXNlcjE0ODc2NTg1","login":"divyegala","name":"Divye Gala"}],"author":{"id":"MDQ6VXNlcjM5NDM3NjE=","is_bot":false,"login":"bdice","name":"Bradley Dice"},"body":"**Is your feature request related to a problem? Please describe.**\r\nWhile reviewing #10030, I found that the column and table algorithms for `distinct_count` have completely different flags for null and NaN handling. The column API has `null_policy` (include/exclude) and `nan_policy` (NaN is/isn't null), while the table API has `null_equality` (nulls are equal/unequal).\r\n\r\nThis also applies to `unordered_distinct_count`, introduced in #10030.\r\n\r\n**Describe the solution you'd like**\r\nThe distinct count APIs for column/table should use the same flags (meaning that all three flags should probably be available to both APIs). This would also allow the column API to be a pass-through implementation of the table API, with a table composed of only that column, rather than having two implementations ([table](https://github.com/rapidsai/cudf/blob/2c6b0dac61a6671642bb5b076e910e20e2bdd1b6/cpp/src/stream_compaction/distinct_count.cu#L38-L62), [column](https://github.com/rapidsai/cudf/blob/2c6b0dac61a6671642bb5b076e910e20e2bdd1b6/cpp/src/stream_compaction/distinct_count.cu#L140-L168)).","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4_E_Vc","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-03-03T17:09:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10183#issuecomment-1058272604","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5FiSqO","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-06-26T19:02:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10183#issuecomment-1166617230","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Rrcnx","author":{"login":"divyegala"},"authorAssociation":"MEMBER","body":"Diving into this issue with @PointKernel led us to figure out this is more complex than it appears. In general, `distinct` and `distinct_count` should share the same configuration parameters, but as of now, they do not. The configuration parameters that appear in these APIs are:\r\n\r\n1. `null_policy` : `{EXCLUDE, INCLUDE}`\r\n2. `nan_policy` : `{NAN_IS_NULL, NAN_IS_VALID}`\r\n3. `null_equality` : `{EQUAL, UNEQUAL}`\r\n4. `nan_equality` : `{ALL_EQUAL, UNEQUAL}`\r\n\r\nThese 4 knobs all interplay with each other, and the right way to do this would be:\r\n\r\n- Add 1 and 2 to the implementation of `distinct`, which currently exposes 3 and 4, while also using the new row comparators\r\n- Write a common function inspired from `distinct` that builds a hash map, to be shared with `distinct_count`\r\n- `distinct` uses the actual map and post-processes to build the result table, `distinct_count` just directly returns the size of the map\r\n- This also helps update `distinct_count` to the new experimental comparators\r\n- Start sharing tests/benchmarks between both these functions as they will essentially be sharing the same code path\r\n","createdAt":"2023-01-04T00:01:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/10183#issuecomment-1370343921","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Rrdp_","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"@divyegala Yes, exactly! I agree this is a good plan for implementation.","createdAt":"2023-01-04T00:08:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10183#issuecomment-1370348159","viewerDidAuthor":false}],"createdAt":"2022-02-01T17:00:15Z","id":"I_kwDOBWUGps5C0Iin","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":25,"title":"Helps libcudf C++ integrations","description":"","dueOn":null},"number":10183,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Unify distinct_count column/table APIs.","updatedAt":"2023-01-04T00:08:21Z","url":"https://github.com/rapidsai/cudf/issues/10183"}
