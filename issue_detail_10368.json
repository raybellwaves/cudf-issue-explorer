{"assignees":[],"author":{"id":"MDQ6VXNlcjU2Njk1OTMw","is_bot":false,"login":"nvdbaranec","name":""},"body":"(updated Aug 2023)\r\n\r\n### Background\r\n\r\nWe found a kernel indexing overflow issue, first discovered in the `fused_concatenate` kernels (https://github.com/rapidsai/cudf/issues/10333) and this issue is present in a number of our CUDA kernels that take the following form:\r\n\r\n```\r\nsize_type output_index = threadIdx.x + blockIdx.x * blockDim.x;  \r\nwhile (output_index < output_size) {\r\n  output_index += blockDim.x * gridDim.x;\r\n}\r\n```\r\n\r\nIf we have an output_size of say 1.2 billion and a grid size that's the same, the following happens:  Some late thread id, say 1.19 billion attempts to add 1.2 billion (blockDim.x * gridDim.x) and overflows the size_type (signed 32 bits). \r\n\r\nWe made a round of fixes in #10448, and then later found another instance of this error in #13838. Our first pass of investigation was not adequate to contain the issue, so we need to take another close look.\r\n\r\n\r\n### Part 1 - First pass fix kernels with this issue\r\n\r\n| Source file | Kernels | Status | \r\n|---|---|---|\r\n| `copying/concatenate.cu` | `fused_concatenate_kernel` |  #10448 |\r\n| `valid_if.cuh` | `valid_if_kernel` |  #10448 |\r\n| `scatter.cu` | `marking_bitmask_kernel` |  #10448 |\r\n| `replace/nulls.cu` | `replace_nulls_strings` | #10448 |\r\n| `replace/nulls.cu` | `replace_nulls` |  #10448 |\r\n| `rolling/rolling_detail.cuh` | `gpu_rolling` |  #10448 |\r\n| `rolling/jit/kernel.cu` | `gpu_rolling_new` | #10448 |\r\n| `transform/compute_column.cu` | `compute_column_kernel`  | #10448 |\r\n|`copying/concatenate.cu` | `fused_concatenate_string_offset_kernel` |  #13838 |\r\n| `replace/replace.cu` |   `replace_strings_first_pass` <br>   `replace_strings_second_pass` <br>  `replace_kernel` | #13905 |\r\n| `copying/concatenate.cu` |   `concatenate_masks_kernel` <br>   `fused_concatenate_string_offset_kernel` <br>   `fused_concatenate_string_chars_kernel` <br>  `fused_concatenate_kernel` (int64) | #13906 | | \r\n| `hash/helper_functions.cuh` |   `init_hashtbl` | #13895  |\r\n| `null_mask.cu` |  `set_null_mask_kernel` <br>   `copy_offset_bitmask` <br>   `count_set_bits_kernel` | #13895  | \r\n| `transform/row_bit_count.cu` |   `compute_row_sizes` | #13895  | \r\n| `multibyte_split.cu` |   `multibyte_split_init_kernel` <br>   `multibyte_split_seed_kernel` (auto??) <br>   `multibyte_split_kernel`  | #13910 | \r\n| IO modules: parquet, orc, json | | #13910 | \r\n| `io/utilities/parsing_utils.cu` |   `count_and_set_positions` (uint64_t)  | #13910 |  \r\n| `conditional_join_kernels.cuh` |   `compute_conditional_join_output_size` <br>   `conditional_join` | #13971 | \r\n| `merge.cu` |   `materialize_merged_bitmask_kernel`  | #13972 | \r\n| `partitioning.cu` |   `compute_row_partition_numbers`  <br>  `compute_row_output_locations` <br>   `copy_block_partitions`  | #13973  | \r\n| `json_path.cu` |  `get_json_object_kernel`  | #13962 | \r\n | `tdigest` |   `compute_percentiles_kernel` (int)  | #13962 | \r\n| `strings/attributes.cu` |   `count_characters_parallel_fn`  | #13968 |  \r\n| `strings/convert/convert_urls.cu` |   `url_decode_char_counter` (int) <br>   `url_decode_char_replacer` (int)  | #13968 |  \r\n| `text/subword/data_normalizer.cu` |   `kernel_data_normalizer` (uint32_t)  |  #13915  | \r\n| `text/subword/subword_tokenize.cu`  |  `kernel_compute_tensor_metadata` (uint32_t)  |  #13915 | \r\n| `text/subword/wordpiece_tokenizer.cu` |  `init_data_and_mark_word_start_and_ends` (uint32_t) <br>   `mark_string_start_and_ends` (uint32_t) <br>   `kernel_wordpiece_tokenizer` (uint32_t) | #13915  | \r\n\r\n### Part 2 - Take another pass over more challenging kernels\r\n\r\n\r\n| Source file | Kernels | Status | \r\n|---|---|---|\r\n| null_mash.cuh | [subtract_set_bits_range_boundaries_kernel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/detail/null_mask.cuh#L215) | |\r\n| valid_if.cuh | [valid_if_n_kernel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/detail/valid_if.cuh#L154) | |\r\n|copy_if_else.cuh | [copy_if_else_kernel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/detail/copy_if_else.cuh#L41) | |\r\n| gather.cuh | [gather_chars_fn_string_parallel](https://github.com/rapidsai/cudf/blob/b4da39cfbe569e290ae42ca9cf8ff868d5788757/cpp/include/cudf/strings/detail/gather.cuh#L78) | |\r\n| more? | search `gridDim.x` or `blockDim.x` to find more examples | | \r\n\r\n\r\n\r\n\r\n### Part 3 - Use [ranger](https://github.com/harrism/ranger) to prevent grid stride loop overflow\r\n* incorporate the ranger header as a libcudf utility\r\n* use ranger instead of manual indexing in libcudf kernels\r\n\r\n\r\n### Additional information\r\n\r\nThere are also a number of kernels that have this pattern but probably don't ever overflow because they are indexing by bitmask words.  ([Example](https://github.com/rapidsai/cudf/blob/4c9ef5161268e2486938546deef00f7fc84c9a95/cpp/include/cudf/detail/copy_range.cuh#L41))\r\nAdditional, In this kernel, `source_idx` probably overflows, but harmlessly.\r\n\r\nA snippet of code to see this in action:\r\n```\r\nsize_type const size = 1200000000;\r\nauto big = cudf::make_fixed_width_column(data_type{type_id::INT32}, size, mask_state::UNALLOCATED);  \r\nauto x = cudf::rolling_window(*big, 1, 1, 1, cudf::detail::sum_aggregation{}); \r\n```\r\n\r\nNote:  rmm may mask out of bounds accesses in some cases, so it's helpful to run with the plain cuda allocator.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4-29aV","author":{"login":"nvdbaranec"},"authorAssociation":"CONTRIBUTOR","body":"The fix in basically all of these cases is quite simple:  just make the index a `size_t`","createdAt":"2022-02-28T19:35:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1054594709","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps4-3AjF","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"I'd love to just add an algorithm to do this.\r\n\r\nhttps://godbolt.org/z/hK95z7zff","createdAt":"2022-02-28T19:53:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1054607557","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps4_ofoA","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Or even a simple range helper for `for` loops: https://github.com/harrism/hemi#simple-grid-stride-loops","createdAt":"2022-03-15T05:29:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1067579904","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps4_of95","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"> The fix in basically all of these cases is quite simple: just make the index a `size_t`\r\n\r\nI think the general approach should be:\r\n1. Use an algorithm (thrust:: or std::) if possible before ever writing a custom kernel -- this way you write a per-element device functor instead, and indexing is handled for you.\r\n2. If a custom kernel must be written, it should use device-side algorithms instead of raw loops.\r\n3. If a raw grid-stride loop is required and an existing algorithm won't work, we should provide utilities to abstract the iteration and or the range and use auto for the type to avoid these mistakes.","createdAt":"2022-03-15T05:32:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1067581305","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5BmE1Q","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-04-16T01:30:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1100500304","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Bu1O7","author":{"login":"nvdbaranec"},"authorAssociation":"CONTRIBUTOR","body":"Still relevant.","createdAt":"2022-04-19T15:31:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1102795707","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5CLoM3","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Created https://github.com/harrism/ranger as a solution to this. Needs to be moved into libcudf.","createdAt":"2022-04-26T23:29:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1110344503","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5D5kYz","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-05-27T00:11:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1139164723","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5D7jn-","author":{"login":"nvdbaranec"},"authorAssociation":"CONTRIBUTOR","body":"Still relevant.","createdAt":"2022-05-27T14:43:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1139685886","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5FiERq","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-06-26T15:03:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1166558314","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5FlpJH","author":{"login":"nvdbaranec"},"authorAssociation":"CONTRIBUTOR","body":"Still relevant.","createdAt":"2022-06-27T15:25:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1167495751","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5K8_JB","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-09-26T05:30:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1257501249","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5PRWh1","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thanks @harrism for creating the [ranger](https://github.com/harrism/ranger) repo! Do you think we are ready to kick off an integration with libcudf, or does ranger need more development first?","createdAt":"2022-11-29T01:12:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1329948789","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5eEgX8","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"@GregoryKimball I have now created a PR to use ranger in libcuspatial. You guys could use this as an example if you want to do the same in libcudf. https://github.com/rapidsai/cuspatial/pull/1178","createdAt":"2023-06-06T08:59:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1578239484","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5jwM-Y","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"wrt attempting to find locations where this might be happening. In _host_ code, clang and gcc will warn if you add `-Wsign-conversion` (not covered by `-Wall -Wextra`) [under some circumstances](https://gcc.godbolt.org/z/hEb35jTMf). Unfortunately there is no such option for nvcc.\r\n\r\n```c++\r\n#include <cstdint>\r\nint what(int upper)\r\n{\r\n  int i = 0; // no warning if this is a std::int64_t\r\n  unsigned int stride = 10;\r\n  while (i < upper) {\r\n    i = i + stride; // clang warns for this, so does gcc\r\n  }\r\n  i = 0;\r\n  while (i < upper) {\r\n    i += stride; // gcc warns for this, clang does not.\r\n  }\r\n  return i;\r\n}\r\n```\r\n\r\n","createdAt":"2023-08-10T16:56:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/10368#issuecomment-1673580440","viewerDidAuthor":false}],"createdAt":"2022-02-28T19:30:02Z","id":"I_kwDOBWUGps5Ez8N1","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3NDE3","name":"1 - On Deck","description":"To be worked on next","color":"bfd4f2"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":20,"title":"Stabilizing large workflows (OOM, spilling, partitioning)","description":"","dueOn":null},"number":10368,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"Use \"ranger\" to prevent grid stride loop overflow","updatedAt":"2024-02-23T17:56:38Z","url":"https://github.com/rapidsai/cudf/issues/10368"}
