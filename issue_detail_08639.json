{"assignees":[],"author":{"id":"MDQ6VXNlcjEwNzg0NDg=","is_bot":false,"login":"bryevdv","name":"Bryan Van de Ven"},"body":"cc @trxcllnt @galipremsagar \r\n\r\nLooking into implementing zero-copy `from_arrow` for node-rapids for Arrow arrays stored in IPC format in shared memory, we noticed that Python cudf [`from_arrow`](https://github.com/rapidsai/cudf/blob/branch-21.08/python/cudf/cudf/core/column/column.py#L222) delegates to `libcudf.interop.from_arrow` which will always result in a copy. Evidently previously it was possible to avoid a copy when and arrow table had been created via ` GpuArrowReader` from GPU memory. \r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg3MzA0NTA0Ng==","author":{"login":"beckernick"},"authorAssociation":"MEMBER","body":"@bryevdv it looks like we've been delegating to `from_arrow` for quite a while based on the [git blame](https://github.com/rapidsai/cudf/blame/fba09e66d822ee55654d6a362abb5190dd2c1521/python/cudf/cudf/core/column/column.py#L285) [history](https://github.com/rapidsai/cudf/blame/7ad07b49e73ddbaca32e16cf491953a5e98b79bf/python/cudf/cudf/core/column/column.py#L433) (two separate hyperlinks). Is this a recent change in behavior?","createdAt":"2021-07-02T14:34:25Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-873045046","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg3MzEwNTYzMA==","author":{"login":"trxcllnt"},"authorAssociation":"CONTRIBUTOR","body":"@beckernick no, the change happened when we switched Python to using `libcudf.from_arrow`. Previously all the [`from_arrow` logic was handled in Python](https://github.com/rapidsai/cudf/blob/b164b382b9b778d3eccf643e533b30afe955ddab/python/cudf/cudf/core/column/column.py#L1106-L1108), and we zero-copy moved the Arrow buffers into cuDF buffers [via `buffers_from_pyarrow`](https://github.com/rapidsai/cudf/blob/b164b382b9b778d3eccf643e533b30afe955ddab/python/cudf/cudf/utils/utils.py#L110-L173).","createdAt":"2021-07-02T16:07:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-873105630","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps46PwI5","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-11-23T22:03:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-977207865","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps46PwoV","author":{"login":"bryevdv"},"authorAssociation":"NONE","body":"Still needs to be addressed, AFAIK.","createdAt":"2021-11-23T22:05:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-977209877","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps46P28p","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Is it not possible for C++ to also zero copy similarly where applicable? The reason we moved to the C++ impl was to avoid duplicates logic between C++ and Python. ","createdAt":"2021-11-23T22:37:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-977235753","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps46djAt","author":{"login":"trxcllnt"},"authorAssociation":"CONTRIBUTOR","body":"@shwina yeah it would be possible, but the current implementation returns a `unique_ptr<cudf::table>`, meaning it must copy the input data so the return can be a valid owning type. For true zero-copy, we'd need a version that returns a `cudf::table_view` (from which a `cudf::table` could be constructed if a copy was desired).","createdAt":"2021-11-28T02:20:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-980824109","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps46mApm","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"cc @jrhemstad for advice on the API here, but maybe we could return something like a `pair<table_view, memory_owner>`? In the IPC case, the `memory_owner` would own nothing?","createdAt":"2021-11-30T21:36:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-983042662","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59fdmR","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I think the new solutions to this issue will come from work on https://github.com/rapidsai/cudf/issues/14926.","createdAt":"2024-05-11T00:12:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8639#issuecomment-2105399697","viewerDidAuthor":false}],"createdAt":"2021-07-01T20:24:51Z","id":"MDU6SXNzdWU5MzUxODg5NDg=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":8639,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Shared-memory from_arrow no longer zero-copy","updatedAt":"2024-05-11T00:12:14Z","url":"https://github.com/rapidsai/cudf/issues/8639"}
