{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nIn pandas, the `idxmin` and `idxmax` aggregations will always break ties in favor of the lower index. For instance, \r\n```\r\n>>> import pandas as pd\r\n>>> df = pd.DataFrame({'idx': [0, 0], 'x': [1, 1]})\r\n>>> df.groupby('idx').agg('idxmin')\r\n     x\r\nidx\r\n0    0\r\n```\r\ncan be relied upon to always return `0`. `cudf` does not make this promise, although it frequently gives the same result in practice. I have a dataset where I'm able to reproduce this discrepancy, but I haven't been able to generate a truly \"minimal\" example yet because various attempt to systematically reduce my column of size 100 have failed to consistently reproduce the problem. I can give this another shot if someone is interested.\r\n\r\n**Describe the solution you'd like**\r\nThe reason for this discrepancy is likely that (as pointed out by @shwina) `cudf` utilizes hash maps in the groupby->aggregation, which likely destroys any stability guarantees with respect to the input ordering for equal elements. Allowing calling code to specify an algorithm would be a poor API choice for `libcudf`, but it would be reasonable to expose an API to request stability in any internal sorting. This would allow `cudf` to match the `pandas` behavior.\r\n\r\n**Additional context**\r\nThe [pandas documentation of idxmin](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html) (and idxmax) does not actually promise this behavior. I suspect that the behavior is chosen to match that of `numpy`, which _does_ [promise this behavior](https://numpy.org/doc/stable/reference/generated/numpy.argmin.html) (see the Notes section). That being the case, we could simply choose not to support this in `cudf`, which would save us from having to reimplement alternative algorithms in `libcudf`. This could lead to problems for `pandas` conversions down the line, though.\r\n","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDg0OTgxMTkyMg==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-05-27T17:31:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7756#issuecomment-849811922","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps49geO6","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-02-07T21:05:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7756#issuecomment-1031922618","viewerDidAuthor":false}],"createdAt":"2021-03-30T00:16:23Z","id":"MDU6SXNzdWU4NDM5MzQyMzE=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":7756,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA]: Match pandas ordering convention for idxmin/idxmax","updatedAt":"2024-05-10T23:52:06Z","url":"https://github.com/rapidsai/cudf/issues/7756"}
