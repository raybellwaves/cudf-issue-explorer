{"assignees":[],"author":{"id":"MDQ6VXNlcjE2MDA1Njkw","is_bot":false,"login":"vuule","name":"Vukasin Milovanovic"},"body":"As of 23.10, the CSV reader cannot take advantage of [kvikIO](https://github.com/rapidsai/kvikio) and [GPUDirect Storage](https://developer.nvidia.com/gpudirect-storage) due to several processing steps that require the input data to be present in the system memory. These host-side processing steps include:\r\n1. Decompression;\r\n2. Skipping the partial data row at the start of the byte range (if reading a byte range);\r\n3. Skipping the [byte order mark](https://en.wikipedia.org/wiki/Byte_order_mark) (BOM) chars; \r\n4. Parsing the column names in the header;\r\n\r\nDecompression (1) is most likely faster on the CPU (not verified) since all data is compressed in a single block. For CSV files with decompression we may choose to decompress on the host side (also see #5142 and #12255). (2) could readily be processed on the device with `thrust::find` and (3) could be accomplished by a single thread kernel. For (4), we can copy the header data from the device and keep the column name parsing code (also see #12582), which avoids keeping input data on the host at the cost of a small D2H copy.\r\n\r\nHigh level proposal:\r\nWhen reading compressed CSV files, read to host and decompress, then wrap the host buffer into a datasource and pass to `load_data_and_gather_row_offsets`. When reading uncompressed input, just forward the source to `load_data_and_gather_row_offsets`. There, use `device_read` to load chunks to device memory. Items (2) and (3) can be done here (BOM skipping is currently outside of `load_data_and_gather_row_offsets`).\r\n\r\nThis approach brings several benefits:\r\n* maintains \"byte range\" support and avoids loading data outside of the requested byte range\r\n* enables direct device reads for uncompressed inputs\r\n* allows the CSV reader to use kvikIO and increases consistency between IO formats","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-08-01T22:35:14Z","id":"I_kwDOBWUGps5tM_Sc","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":{"number":12,"title":"CSV continuous improvement","description":"","dueOn":null},"number":13797,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Avoid host-side processing in CSV reader","updatedAt":"2023-08-10T16:47:14Z","url":"https://github.com/rapidsai/cudf/issues/13797"}
