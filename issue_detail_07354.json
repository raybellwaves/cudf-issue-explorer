{"assignees":[{"id":"MDQ6VXNlcjMxOTA0MDU=","login":"shwina","name":"Ashwin Srinath"},{"id":"MDQ6VXNlcjY0ODg4NDg=","login":"karthikeyann","name":"Karthikeyan"}],"author":{"id":"MDQ6VXNlcjI2MTY5Nzcx","is_bot":false,"login":"miguelusque","name":"Miguel MartÃ­nez"},"body":"**Is your feature request related to a problem? Please describe.**\r\nHi!\r\n\r\nWhile porting some existing code from Pandas to cuDF, I have just noticed that `groupby.filter` method is not supported.\r\n\r\nThe code I am porting is the following:\r\n\r\n> import pandas as pd\r\n> df1 = pd.read_csv('./data/ml-20m/ratings.csv')\r\n> df1 = df1.groupby(USER_COLUMN).filter(lambda x: len(x) >= MIN_RATINGS)\r\n\r\nI have already found a workaround for it, but I think it would be great to add support to `groupby.filter` method.\r\n\r\n**Describe the solution you'd like**\r\nHaving `groupby.filter` method available in cudf.\r\n\r\nThanks!\r\n\r\nMiguel","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc3NjExNzk3Mw==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"Relevant Pandas API Docs: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.DataFrameGroupBy.filter.html","createdAt":"2021-02-09T17:45:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7354#issuecomment-776117973","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3NjEyMzYxMA==","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Similar to `apply()` the best approach we have right now for this is to iterate over the groups sequentially and apply the UDF on each group. This will only be efficient on the GPU for a small number of large groups (and slow for a large number of small groups).","createdAt":"2021-02-09T17:54:16Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7354#issuecomment-776123610","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3NjI5NzYyMA==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":">  This will only be efficient on the GPU for a small number of large groups (and slow for a large number of small groups).\r\n\r\nBut can be improved with multi-stream concurrency, which we plan to add in the future.\r\n\r\nIf we can use Numba to compile a (limited) filter syntax to PTX, we could apply this in parallel in a single kernel. How general are the filters that people want to run? Is it as broad as `apply()`?","createdAt":"2021-02-09T22:51:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/7354#issuecomment-776297620","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3NjI5ODcwMQ==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"> How general are the filters that people want to run? Is it as broad as `apply()`?\r\n\r\nYes, it's unfortunately similar to apply where it expects a function that takes in a DataFrame and returns either a scalar boolean value or a column of boolean values. Because the function expects to take in a DataFrame, it can use completely arbitrary DataFrame APIs so there's no easy way for us to pipeline it through Numba.","createdAt":"2021-02-09T22:54:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7354#issuecomment-776298701","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5NzExNDU2Nw==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-03-11T23:17:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7354#issuecomment-797114567","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5ZcXym","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Note that for many simple cases, there's a way to work around the lack of support for `groupby.filter` using `groupby.apply` + `merge`:\r\n\r\n```python\r\ndef groupby_filter(df, key, func):\r\n    if not isinstance(key, list):\r\n        key = [key]\r\n    keep_group = df.groupby(key).apply(func).to_frame()\r\n    keep_group.columns = [\"_\"]\r\n    keep_row = df[key].merge(keep_group, left_on=key, right_index=True)[\"_\"].sort_index()\r\n    return df.loc[keep_row]\r\n```\r\n\r\nExample usage:\r\n\r\n```python\r\n>>> df = cudf.datasets.randomdata(100_000)\r\n>>> pdf = df.to_pandas()\r\n```\r\n\r\n```python\r\n# Pandas:\r\n>>> pdf.groupby('id').filter(lambda group: (group.x > group.y).all())                                                                                                                                              \r\n         id         x         y\r\n5222   1106 -0.394735 -0.787261\r\n16999  1120  0.849243  0.171776\r\n17870  1113 -0.270606 -0.938197\r\n20487  1106  0.392992 -0.868924\r\n24426   863 -0.199523 -0.831697\r\n33665  1124  0.915199 -0.033524\r\n34860  1122  0.305254  0.244650\r\n37147  1122  0.982420 -0.252851\r\n53573  1119 -0.457173 -0.575891\r\n63077   874  0.914197 -0.133111\r\n72263  1106  0.924446  0.187110\r\n75129  1126 -0.820924 -0.831940\r\n77157   874  0.286803 -0.908891\r\n80028  1117  0.182344 -0.297617\r\n85099  1124  0.454558  0.011887\r\n93097   889  0.333730 -0.539914\r\n93482  1106 -0.448811 -0.646975\r\n```\r\n\r\n```python\r\n# cuDF:\r\nIn [39]: groupby_filter(df, 'id', lambda group: (group.x > group.y).all())\r\nOut[39]: \r\n         id         x         y\r\n5222   1106 -0.394735 -0.787261\r\n16999  1120  0.849243  0.171776\r\n17870  1113 -0.270606 -0.938197\r\n20487  1106  0.392992 -0.868924\r\n24426   863 -0.199523 -0.831697\r\n33665  1124  0.915199 -0.033524\r\n34860  1122  0.305254  0.244650\r\n37147  1122  0.982420 -0.252851\r\n53573  1119 -0.457173 -0.575891\r\n63077   874  0.914197 -0.133111\r\n72263  1106  0.924446  0.187110\r\n75129  1126 -0.820924 -0.831940\r\n77157   874  0.286803 -0.908891\r\n80028  1117  0.182344 -0.297617\r\n85099  1124  0.454558  0.011887\r\n93097   889  0.333730 -0.539914\r\n93482  1106 -0.448811 -0.646975\r\n```\r\n\r\nSome things to keep in mind:\r\n\r\n* The `groupby_filter` function above assumes the default index (`RangeIndex`) on the input dataframe `df` -- or at least, a monotonically increasing index.\r\n* The groupby keys are always assumed to be column names of the input DataFrame\r\n* In general, the performance will be good only for a small number of large groups, and quite bad for a large number of small groups.","createdAt":"2023-04-07T20:17:06Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7354#issuecomment-1500609702","viewerDidAuthor":false}],"createdAt":"2021-02-09T17:44:16Z","id":"MDU6SXNzdWU4MDQ3NjkxNTg=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":7354,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Agg groupby.filter support","updatedAt":"2024-02-23T18:43:10Z","url":"https://github.com/rapidsai/cudf/issues/7354"}
