{"assignees":[],"author":{"id":"MDQ6VXNlcjM0NDEzMjE=","is_bot":false,"login":"revans2","name":"Robert (Bobby) Evans"},"body":"**Describe the bug**\r\nThis is very similar to https://github.com/rapidsai/cudf/issues/14239, and because that is not done, then it is fine for this to be a dupe of that.\r\n\r\nIn Spark we are handed a read schema and some JSON data. Our goal is to pull out the parts of the JSON data that match the read schema.  But for strings, this gets to be a little complicated, and any type can be coerced into a string. If the data is an array it is coerced into a string by converting the tokens to a JSON formatted string, if the data is a dict it is coerced into a string the same way. \r\n\r\n`mixed_types_as_string` was added in part to help make this happen, especially in the case of nested types. But that appears to only work at a top level column.\r\n\r\n```\r\n  std::string data = \"{\\\"data\\\": {\\\"A\\\": 0, \\\"B\\\": 1}}\\n{\\\"data\\\": [1,0]}\\n\";\r\n\r\n  std::map<std::string, cudf::io::schema_element> data_types;\r\n  std::map<std::string, cudf::io::schema_element> child_types;\r\n  child_types.insert(std::pair{\"LIST\", cudf::io::schema_element{cudf::data_type{cudf::type_id::STRING, 0}, {}}});\r\n  data_types.insert(std::pair{\"data\", cudf::io::schema_element{cudf::data_type{cudf::type_id::LIST, 0}, child_types}});\r\n\r\n  cudf::io::json_reader_options in_options =\r\n    cudf::io::json_reader_options::builder(cudf::io::source_info{data.data(), data.size()})\r\n      .dtypes(data_types)\r\n      .recovery_mode(cudf::io::json_recovery_mode_t::RECOVER_WITH_NULL)\r\n      .normalize_single_quotes(true)\r\n      .normalize_whitespace(true)\r\n      .mixed_types_as_string(true)\r\n      .keep_quotes(true)\r\n      .lines(true);\r\n  cudf::io::table_with_metadata result = cudf::io::read_json(in_options);\r\n```\r\n\r\nThrows an exception about trying to create a nested column using a fixed width column factory.\r\n\r\n```\r\nC++ exception with description \"CUDF failure at: .../cpp/include/cudf/column/column_factories.hpp:342: Invalid, non-fixed-width type.\" thrown in the test body.\r\n```","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps52u9Qy","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"Just to be clear this also happens for schemas that have a STRUCT with strings in them, not just LISTS.","createdAt":"2024-03-12T16:07:55Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15260#issuecomment-1992021042","viewerDidAuthor":false}],"createdAt":"2024-03-08T22:02:39Z","id":"I_kwDOBWUGps6Bv_4d","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":13,"title":"Nested JSON reader","description":"Data-parallel reader for nested JSON text data","dueOn":null},"number":15260,"projectCards":[],"projectItems":[],"reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"state":"OPEN","title":"[BUG] mixed_type_as_string throws exception for nested data with nested STRING schema request","updatedAt":"2024-03-12T16:07:57Z","url":"https://github.com/rapidsai/cudf/issues/15260"}
