{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MjIxMjg5","is_bot":false,"login":"jrhemstad","name":"Jake Hemstad"},"body":"**Describe the bug**\r\n\r\nIn order to use a scalar in device code, you have to use [`get_scalar_device_view`](https://github.com/rapidsai/cudf/blob/1ead2d55562b9cd1b80568b86b8b51ab616f3cb8/cpp/include/cudf/scalar/scalar_device_view.cuh#L194). The problem is, `get_scalar_device_view` takes a `scalar` by non-const ref, which means if your scalar is a `const`, then you have to do a `const_cast` to cast away the constness, which invokes undefined behavior. This is bad. \r\n\r\n**Expected behavior**\r\n\r\nI shouldn't have to `const_cast` to use `get_scalar_device_view` with a const scalar. \r\n\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDYwMzU2MDkzMA==","author":{"login":"devavret"},"authorAssociation":"CONTRIBUTOR","body":"It's been a while but I think the reason is that we cannot overload functions on constness. So there isn't a way to return a `const scalar_device_view` based on the constness of the input. We could make it take by const ref but then we get a `scalar_device_view` that is mutable.\r\n\r\nAnother option would be to make new classes for `mutable_scalar_device_view` for each type. Then we can add const qualified methods to each typed `scalar` like `numeric_scalar<T>.device_view() const` and `numeric_scalar<T>.mutable_device_view()`.","createdAt":"2020-03-24T23:41:40Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-603560930","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDYwNzUyOTYzMA==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"This is borderline a feature request.","createdAt":"2020-04-01T22:56:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-607529630","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3ODMzODU3OQ==","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"> This is borderline a feature request.\r\n\r\nIt's definitely a bug. As a result, we've got `const_cast`s in the code that are resulting in undefined behavior. ","createdAt":"2020-08-21T15:02:35Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-678338579","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDY3ODg0MjM0MA==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Can I assign you @jrhemstad ?","createdAt":"2020-08-23T23:57:26Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-678842340","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5ODk2MjcxOQ==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-03-14T19:14:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-798962719","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc5ODk2MjcyOA==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-03-14T19:14:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-798962728","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgwNDU5NDE5Nw==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Still relevant","createdAt":"2021-03-23T03:45:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-804594197","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgwNTIwNDAxOA==","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"This should be feasible to resolve. While @devavret is correct that you cannot overload functions based on the constness of parameters using pass-by-value semantics, the compiler can differentiate between const and non-const reference/pointer parameters. However, how would we want to address the following:\r\n1. As @devavret suggested previously, would we want separate types for mutable and non-mutable scalars, mirroring columns views?\r\n2. If we chose not to have separate types, the `_is_valid` member would need to be templated to support both const and non-const bool types. Furthermore, `scalar_device_view_base::set_valid` is currently marked `noexcept`: we would probably want to either avoid defining this method for const types (probably using `std::is_const_v` in some fashion), or mark it as conditionally `noexcept (std::is_const_v<BoolType>)` and raise an exception. The former seems like a much better solution, but I don't know if we make any API promises that would be violated by such a change.\r\n\r\nHappy to work on this if it's worth prioritizing.","createdAt":"2021-03-23T20:07:02Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-805204018","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgwNTcyNjEzMQ==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"It's worth prioritizing, just not sure how high. :)","createdAt":"2021-03-24T11:01:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/4365#issuecomment-805726131","viewerDidAuthor":false}],"createdAt":"2020-03-06T20:21:37Z","id":"MDU6SXNzdWU1NzcxNTU2MjM=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":null,"number":4365,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] `get_scalar_device_view` doesn't support `const scalar` ","updatedAt":"2024-02-23T18:43:33Z","url":"https://github.com/rapidsai/cudf/issues/4365"}
