{"assignees":[{"id":"MDQ6VXNlcjEzNTIxMDA4","login":"isVoid","name":"Michael Wang"}],"author":{"id":"MDQ6VXNlcjg0NTczODg=","is_bot":false,"login":"beckernick","name":"Nick Becker"},"body":"cuDF Python would like to back the CategoricalColumn with the Dictionary type. Work has been initiated toward this goal in https://github.com/rapidsai/cudf/pull/8567","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps45xqBb","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-11-15T21:03:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8573#issuecomment-969318491","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5nEzLE","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"This desire came up again recently in relation to #14138, where it is noted that we implement a lot of \"heavyweight\" algorithms as a sequence of calls in Python, rather than pushing down into libcudf.\r\n\r\n@isVoid's implementation work in #8567 stalled due to some differences in the way libcudf and pandas (and hence cudf) choose to model dictionary-encoded columns.\r\n\r\nIn libcudf, the keys of the dictionary are required to be sorted, and the encoding looks up the value by indexing into the keys array. This restricts dictionary encoding to keys that admit a total order, and (I think) doesn't have a hook for a user-provided comparator.\r\n\r\nIn pandas, categoricals (dictionary encoded columns) come in two flavours\r\n\r\n1. ordered\r\n2. unordered\r\n\r\nThe latter do not require that the keys admit a total order (or indeed a partial one), and can be applied even in the case where the key type does have a \"natural\" ordering, e.g.:\r\n\r\n```\r\nn [5]: col = pd.Categorical([1, 2, 3], ordered=False)\r\n\r\nIn [6]: col.min() # => TypeError\r\n```\r\n\r\nOrdered categoricals either use the natural ordering induced by the key type (this matches libcudf), _or_ allow for a user-defined ordering. This enables the user to impose a total order on naturally unordered key types (for example floats), and/or provide one that is different from the natural order:\r\n\r\n```\r\ncol = pd.Categorical([3, 2, 1], ordered=True)\r\ncol.min() # => 1\r\n\r\ncol = pd.Categorical([3, 2, 1], categories=[3, 1, 2], ordered=True)\r\ncol.min() # => 3\r\n```\r\n\r\nAIUI, it was interfacing these differences that caused too many hacks/workarounds on the python side.\r\n\r\nIn light of this, we should consider if the libcudf side would need some extensions to support cudf's use case of dictionary encoding. Or if there is a smart way of managing things in a translation layer that doesn't require huge amounts of special-casing.","createdAt":"2023-09-21T10:40:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/8573#issuecomment-1729311428","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5nPfCm","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Another reason Michael's work stalled is that due to the fact that it's not directly mapping to a libcudf type categorical data in cudf is special-cased all over the place and therefore requires a large amount of work to track. We were hoping that it would be simpler to work on that after we had refactored cudf internals to a place where the categorical logic was better isolated to just the categorical column, or at least more contained in some other way. I'm not opposed to revisiting the work now, but just an FYI that I'd hope this would become substantially easier after we restructure cudf internals around pylibcudf over the next couple of releases.","createdAt":"2023-09-22T23:03:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/8573#issuecomment-1732112550","viewerDidAuthor":false}],"createdAt":"2021-06-21T16:21:54Z","id":"MDU6SXNzdWU5MjYzOTAzMTU=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":null,"number":8573,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[{"content":"ROCKET","users":{"totalCount":1}}],"state":"OPEN","title":"[FEA] Use libcudf Dictionary type for CategoricalColumn in Python","updatedAt":"2024-02-23T18:42:23Z","url":"https://github.com/rapidsai/cudf/issues/8573"}
