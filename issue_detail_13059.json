{"assignees":[{"id":"MDQ6VXNlcjExMjY5ODE=","login":"wence-","name":"Lawrence Mitchell"}],"author":{"id":"MDQ6VXNlcjg0NTczODg=","is_bot":false,"login":"beckernick","name":"Nick Becker"},"body":"Calling the numpy function `all`  on a DataFrame returns a Series[bool] rather than Bool. For behavioral compatibility, we'd like to match pandas behavior.\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport cudf\r\n\r\ndf = cudf.DataFrame({\"a\":[True,False], \"b\":[True,True]})\r\nprint(np.all(df), \"\\n\")\r\nprint(np.all(df.to_pandas()))\r\na    False\r\nb     True\r\ndtype: bool \r\n\r\nFalse\r\n```","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5a9ics","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"This is a consequence of cudf's `DataFrame.all` method not handling an `axis=None` keyword argument correctly. Most pandas reductions like this support `axis=0` or `axis=1` (for reducing over rows or columns) and use `axis=None` as a default which gets converted to `axis=0`.\r\n\r\nHowever, `all` (and `any`) support `axis=None` to mean reducing over both rows _and_ columns. Right now cudf does not handle this distinction correctly.\r\n\r\nI don't know if other reductions also support `axis=None` to mean reduce to scalar.","createdAt":"2023-04-27T17:37:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1526081324","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5a-QG2","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"I couldn't find a way to do `np.sum(df, ...)` and have it reduce over all axes (even for a Pandas DataFrame):\r\n\r\n```python\r\n>>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]})\r\n>>>  np.sum(df, axis=None)  # defaults to 0\r\n>>>  np.sum(df, axis=(0, 1))  # ValueError\r\n>>> np.sum(df.values, axis=None)   # works for arrays\r\n8\r\n>>> np.sum(df.values, axis=(0, 1))\r\n8\r\n```","createdAt":"2023-04-27T19:38:11Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1526268342","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bDJOw","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"As of pandas 2, `axis=None` means \"both rows and columns\" for reductions over dataframes (see https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html#pandas-dataframe-sum)\r\n\r\nSo we can fix this en-masse as part of the pandas-2 changes?","createdAt":"2023-04-28T13:17:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1527550896","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bDMdG","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Argh, but not all reductions, so `axis=None` as a default means different things depending on what type of reduction one is doing (e.g. `df.sum(axis=None)` returns [a scalar](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html), but `df.var(axis=None)` returns [a series](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.var.html))","createdAt":"2023-04-28T13:27:19Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1527564102","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bDOvj","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Ah, but that [appears to be an oversight](https://github.com/pandas-dev/pandas/issues/21597). FWIW, this is a subset of the enhancement request in #12335.","createdAt":"2023-04-28T13:34:47Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1527573475","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bPBPv","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Sorry just getting caught up after a few days deep in the weeds of some other work. Yes, this is something we can fix once we switch over to pandas 2.0 compatibility. Unless something has changed since I last looked, we will still need to support the axis keyword, but the default behavior will be a reduction over all axes. Note that `np.all` supports providing multiple axes i.e. `np.all(..., axis=(1, 2))`. Obviously for a DataFrame the only valid multiple would be `(0, 1)`, but it would be good verify whether pandas 2 aliases that to `None` (i.e. all axes) and if so mimic that behavior.\r\n\r\nWe can probably close this issue as a dup of https://github.com/rapidsai/cudf/issues/12335. ","createdAt":"2023-05-02T00:23:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1530663919","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bQqiZ","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"> Obviously for a DataFrame the only valid multiple would be `(0, 1)`, but it would be good verify whether pandas 2 aliases that to `None` (i.e. all axes) and if so mimic that behavior.\r\n\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nprint(pd.__version__) # => 2.1.0.dev0+683.g56537f4490\r\ndf = pd.DataFrame(np.zeros((3, 3)))\r\nnp.all(df, axis=None) # => False\r\nnp.all(df, axis=(0, 1)) # => ValueError No axis named (0, 1) for object type DataFrame\r\n```\r\n\r\nWhich is what we have right now in cudf.","createdAt":"2023-05-02T08:42:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1531095193","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5bVTHv","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"OK good that helps, so we only need to address the `None` case. ","createdAt":"2023-05-03T00:26:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13059#issuecomment-1532309999","viewerDidAuthor":false}],"createdAt":"2023-04-04T20:50:38Z","id":"I_kwDOBWUGps5inpc3","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":13059,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Calling the numpy function `all` on a DataFrame returns a Series[bool] rather than Bool","updatedAt":"2023-05-03T00:26:15Z","url":"https://github.com/rapidsai/cudf/issues/13059"}
