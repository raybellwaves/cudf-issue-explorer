{"assignees":[],"author":{"id":"MDQ6VXNlcjEyNzI1MTEx","is_bot":false,"login":"GregoryKimball","name":"Gregory Kimball"},"body":"\r\n**Is your feature request related to a problem? Please describe.**\r\nThe Arrow 15 specification includes a definition of \"[arrow::StringViewType](https://arrow.apache.org/docs/cpp/api/datatype.html#classarrow_1_1_string_view_type)\" - an alternate representation of the \"[arrow::StringType](https://arrow.apache.org/docs/cpp/api/datatype.html#classarrow_1_1_string_type)\". You may find \"String view\" also referred to as [Umbra string](https://www.cidrdb.org/cidr2020/papers/p29-neumann-cidr20.pdf) or prefix string. \r\n\r\nA string view consists of two columns:\r\n1. A column of 16 byte fixed-width elements. First 4 bytes contain the string size\r\n* If size < 12, then the string is stored inline in the remaining 12 bytes (short string optimization)\r\n* If size > 12, then the string is stored separately in the second column. Remaining 12 bytes are 8 bytes for pointer to the string + 4 bytes for the first 4 chars of the string\r\n2. A column of characters storing the suffix strings\r\n\r\nString view type enables some performance optimizations:\r\n* ability to slice strings (e.g. `left(10)`) in place without a copy\r\n* ability to replace with smaller strings (e.g. `replace(\"aa\", \"a\")`) in place without a copy\r\n* inlined strings can be written in any order and without knowing the column size\r\n* better memory access patterns for the first 4 bytes (e.g. `startswith(\"a\")`)\r\n\r\n**Describe the solution you'd like**\r\nLet's add interop support for string view in `from_arrow` with CUDA C++ code to accept string views and convert them to libcudf strings columns. We may also want to add string view compatibility to `to_arrow`, so we can hand off libcudf strings columns to host libraries that expect string views. We should be able to write CUDA C++ code to efficiently transform `arrow::StringViewType` buffers in to `arrow::StringType` buffers.\r\n\r\n**Describe alternatives you've considered**\r\nForce libcudf users to convert their string views into strings on the host before passing the data to the device.\r\n\r\n**Additional context**\r\nVelox supports a string view type ([ref1](https://facebookincubator.github.io/velox/develop/vectors.html#flat-vectors-scalar-types), [ref2](https://engineering.fb.com/2024/02/20/developer-tools/velox-apache-arrow-15-composable-data-management/)), [Polars has switched](https://pola.rs/posts/polars-string-type/) to a string view representation, and [DuckDB supports](https://15721.courses.cs.cmu.edu/spring2023/slides/22-duckdb.pdf) string view.\r\n\r\nWe may choose to investigate using string views in libcudf at some point, but for the foreseeable future string view refactoring will be lower priority than [supporting large strings](https://github.com/rapidsai/cudf/issues/13733) and [improving performance with long strings](https://github.com/rapidsai/cudf/issues/13048).","closed":false,"closedAt":null,"comments":[],"createdAt":"2024-03-13T23:40:41Z","id":"I_kwDOBWUGps6CPh2F","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":25,"title":"Helps libcudf C++ integrations","description":"","dueOn":null},"number":15298,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Accelerate conversion from `arrow::StringViewType` to `arrow::StringType` in libcudf interop","updatedAt":"2024-03-22T18:35:59Z","url":"https://github.com/rapidsai/cudf/issues/15298"}
