{"assignees":[],"author":{"id":"MDQ6VXNlcjg0NTczODg=","is_bot":false,"login":"beckernick","name":"Nick Becker"},"body":"For pandas API compatibility, we can implement [Series](https://pandas.pydata.org/docs/reference/api/pandas.Series.between_time.html) and [DataFrame.between_time](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.between_time.html). `between_time` \"select[s] values between particular times of the day (e.g., 9:00-9:30 AM). By setting start_time to be later than end_time, you can get the times that are not between the two times.\"\r\n\r\nIf the index is not a DatetimeIndex, this method throws a TypeError. DateTimes without time components are considered as if the time component were \"0:00:00\". Valid `{start, end}_time` must be in the interval [0:00 and 24:00).\r\n\r\nThe API documentation does not indicate what resolutions are valid or invalid for `{start, end}_time`, but it is documented as only including granularity down to seconds in the [utility function](https://github.com/pandas-dev/pandas/blob/d9488016443ccd81a02321797c491eab7b404863/pandas/core/indexes/datetimes.py#L819-L833):\r\n```\r\n        Return index locations of values between particular times of day\r\n        (e.g., 9:00-9:30AM).\r\n        Parameters\r\n        ----------\r\n        start_time, end_time : datetime.time, str\r\n            Time passed either as object (datetime.time) or as string in\r\n            appropriate format (\"%H:%M\", \"%H%M\", \"%I:%M%p\", \"%I%M%p\",\r\n            \"%H:%M:%S\", \"%H%M%S\", \"%I:%M:%S%p\",\"%I%M%S%p\").\r\n        include_start : bool, default True\r\n        include_end : bool, default True\r\n```\r\n\r\n```python\r\nimport pandas as pd\r\n​\r\ni = pd.date_range('2018-04-09', periods=4, freq='1D20min')\r\nts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\r\n​\r\nprint(ts)\r\nprint(ts.between_time('0:15', '0:45'))\r\nprint(ts.between_time('0:45', '0:15'))\r\n                     A\r\n2018-04-09 00:00:00  1\r\n2018-04-10 00:20:00  2\r\n2018-04-11 00:40:00  3\r\n2018-04-12 01:00:00  4\r\n                     A\r\n2018-04-10 00:20:00  2\r\n2018-04-11 00:40:00  3\r\n                     A\r\n2018-04-09 00:00:00  1\r\n2018-04-12 01:00:00  4\r\n```\r\n\r\n```python\r\ni = pd.Series([\"2021-01-01\", \"2021-02-10\"], dtype=\"datetime64[ns]\")\r\ns = pd.Series([0,1], index=i)\r\nprint(s, \"\\n\")\r\nprint(s.between_time(\"0:00:01\", \"23:59:59\"), \"\\n\")\r\nprint(s.between_time(\"0:00\", \"0:15\"))\r\n2021-01-01    0\r\n2021-02-10    1\r\ndtype: int64 \r\n\r\nSeries([], dtype: int64) \r\n\r\n2021-01-01    0\r\n2021-02-10    1\r\ndtype: int64\r\n```\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5EV_rP","author":{"login":"drsxr"},"authorAssociation":"NONE","body":"Hi, if you are implementing **between_time** for compatibility, may I also recommend and request implementing the **at_time** function as well.  In my current code the lack of these functions necessitates switching back and forth between vanilla pandas and cudf in order to use these functions, which not only slows down the code but is quite inelegant.  Thanks so much!!! ","createdAt":"2022-06-04T13:51:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9634#issuecomment-1146616527","viewerDidAuthor":false}],"createdAt":"2021-11-08T21:40:22Z","id":"I_kwDOBWUGps4-dmfa","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":9634,"projectCards":[{"project":{"name":"v22.12 Release"},"column":{"name":"Issue-P2"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Series and DataFrame between_time","updatedAt":"2022-06-04T13:51:35Z","url":"https://github.com/rapidsai/cudf/issues/9634"}
