{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nNumerous pylibcudf APIs currently accept optional arguments because the corresponding libcudf APIs do. In C++, libcudf essentially forbids boolean parameters in favor of enums, which are at least self-documenting at the call site (unlike boolean parameters). However, if there are multiple such parameters the caller still has to remember the order of these parameters. In Python, we can solve this problem using keyword-only arguments, which forces the caller to access the parameters by name and therefore automatically protects against misuse by incorrect ordering. However, this solution does not work for `cdef` (and therefore `cpdef`) functions in Cython because such functions are effectively C functions and all arguments are therefore ultimately passed in order to these functions.\r\n\r\nIn a related vein, some libcudf APIs could be naturally exposed in pylibcudf using a single API with an additional parameter. For instance the stable variants on libcudf's sorting APIs would be very natural to expose in pylibcudf with an extra parameter `sort(..., stable : bool)`. However, this again runs into the same issue above where we would want to use a keyword-only argument but are stymied by the fact that this is unsupported.\r\n\r\n**Describe the solution you'd like**\r\nWe should determine a standard practice for this kind of API in pylibcudf and document it in the developer guide. It is not clear to me what a good solution is though. One option would be to make these APIs `def` functions. That would allow using keyword-only arguments, but at the cost of not being able to take advantage of Cython call syntax with typed arguments in Cython contexts, which I'd like to avoid at this stage since at the moment the entire pylibcudf API supports usage in a pure Cython context and removing that is a broader conversation. We can revisit that option if we can't come up with any alternatives, though","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps509LP0","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"CC @wence- ","createdAt":"2024-02-24T01:09:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15136#issuecomment-1962193908","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps51EScQ","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"I think we should probably:\r\n\r\n1. Continue the current practice of just spelling out the different variants in the `cpdef` layer\r\n2. Provide `def`-only functions that expose the (no-default) kwarg setup.\r\n\r\nIf we are doing (2), then I think we could also think if we want to provide a slightly more python API to the `Table` and `Column` algorithms (perhaps as namespaced methods on the objects)","createdAt":"2024-02-26T12:41:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15136#issuecomment-1964058384","viewerDidAuthor":false}],"createdAt":"2024-02-24T01:08:38Z","id":"I_kwDOBWUGps6ARQ4i","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"LA_kwDOBWUGps8AAAABoeP23w","name":"pylibcudf","description":"Issues specific to the pylibcudf package","color":"e99695"}],"milestone":null,"number":15136,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Determine the best way to emulate keyword-only parameters in cpdef functions","updatedAt":"2024-05-28T23:33:43Z","url":"https://github.com/rapidsai/cudf/issues/15136"}
