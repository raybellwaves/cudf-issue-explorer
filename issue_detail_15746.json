{"assignees":[],"author":{"id":"U_kgDOBco0Mw","is_bot":false,"login":"NVnavkumar","name":"Navin Kumar"},"body":"**Is your feature request related to a problem? Please describe.**\r\nSome notes from #11979 here: The `$` matches at the position right before a line terminator in regular expressions. In cuDF (and in Python), this is right before a  newline`\\n`. However, in Spark (or rather the JDK), the line terminator can be any one of the following sequences: `\\r`, `\\n`, `\\r\\n`, `\\^E`, `\\u2028`, or `\\u2029` (unless UNIX_LINES mode is activated) (see https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#lt). \r\n\r\n\r\n**Describe the solution you'd like**\r\nIt would be useful if we could configure the concept of line terminator sequences in cuDF. Ideally, this could be an optional parameter that would support a simple array of strings for line terminator sequences.  But this also be a flag that enables a `JDK_MODE` which would enabling the more complex handling that can be enabled when calling the corresponding methods from the CUDF Java library.\r\n\r\n**Describe alternatives you've considered**\r\nCurrently, [spark-rapids](https://github.com/NVIDIA/spark-rapids) handles `$` by doing a heavy translation from a JDK regular expression to another regular expression supported by cuDF that handles the multiple possible line terminator sequences that the JDK uses.  With this translation, we are limited to only using the `$` in simple scenarios at the end of the regular expression, we cannot use them in choice `|` right now among other constructions because of the complexity (see https://github.com/NVIDIA/spark-rapids/issues/10764)\r\n\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps591AB2","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"This has been requested before: https://github.com/rapidsai/cudf/issues/11979\r\nSupporting an array of single characters may be doable but supporting `\\r\\n` will likely not be possible.","createdAt":"2024-05-14T20:02:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15746#issuecomment-2111045750","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-kOW5","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thank you @NVnavkumar for raising this topic. Would you please share more information about this?\r\n* what is the performance for a line terminator pattern that only matches `\\n` versus the workarounds Spark-RAPIDS has for the set of `JDK_MODE` line terminators?\r\n* would you please share a few examples of how line terminators interact with multiline regex patterns in Spark?\r\n* As @davidwendt mentioned, supporting a `\\r\\n` line terminator may not be possible. What other options do we have to help Spark return correct results in this case?\r\n* Would there be benefit to adding a `JDK_MODE` flag that supports line terminators of `\\r`, `\\n`,` \\^E`, `\\u2028`, or `\\u2029` but not `\\r\\n`?","createdAt":"2024-05-21T20:54:02Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15746#issuecomment-2123425209","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5_T5GO","author":{"login":"NVnavkumar"},"authorAssociation":"CONTRIBUTOR","body":"> Thank you @NVnavkumar for raising this topic. Would you please share more information about this?\r\n> \r\n> * what is the performance for a line terminator pattern that only matches `\\n` versus the workarounds Spark-RAPIDS has for the set of `JDK_MODE` line terminators?\r\n> * would you please share a few examples of how line terminators interact with multiline regex patterns in Spark?\r\n> * As @davidwendt mentioned, supporting a `\\r\\n` line terminator may not be possible. What other options do we have to help Spark return correct results in this case?\r\n> * Would there be benefit to adding a `JDK_MODE` flag that supports line terminators of `\\r`, `\\n`,` \\^E`, `\\u2028`, or `\\u2029` but not `\\r\\n`?\r\n\r\nAddressing these questions here:\r\n\r\n* I'm still working on measuring the performance impact here, and trying to ascertain that for certain strings that only include newlines (`\\n`), what is the performance impact of the transpiled regex vs sending the original regex into cudf directly. The theory is that these would get pretty close to the Spark output so transpilation overhead can be reduced.\r\n\r\n* Line terminators actually dictate both `^` and `$` behavior, since they dictate ultimately both the start and end of the line. Sometimes we want to use these in more complicated ways like choice (e.g.`abc|$` matches `abc` or we just want the end of the line, see https://github.com/NVIDIA/spark-rapids/issues/10764 for corresponding spark-rapids issue). In multiline mode, this means that they basically become a matcher for the line terminator characters themselves or the end of the string.\r\n\r\n* One option we have (and we might even have it in lieu of this issue), is to substitute `\\r\\n` for `\\n`, and then run the cudf regexp engine. However, this substitution adds an additional GPU operation **and** manipulates the original string, so for some operations (like extract), we won't get the same output since we won't be able to include the original line terminator in the output. Another option is we could simplify the transpilation to something like `\\r\\n$|$`. If that works, that might be a better option to maintain compatibility with Spark. I also would like to propose that Spark could disable such a transpilation under a \"maximizeCompatiblity\" flag for perfomance purposes.\r\n\r\n* Using the second option described in the previous paragraph, this could still be potentially very useful with the simplified transpilation.\r\n\r\nI will try to update with some performance numbers soon.","createdAt":"2024-05-28T19:01:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15746#issuecomment-2135921038","viewerDidAuthor":false}],"createdAt":"2024-05-14T19:17:48Z","id":"I_kwDOBWUGps6I3Y68","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxNTE1NjE2MjUz","name":"strings","description":"strings issues (C++ and Python)","color":"0e8a16"}],"milestone":null,"number":15746,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Make line terminator sequence handling in regular expression engine a configurable option","updatedAt":"2024-05-28T19:01:12Z","url":"https://github.com/rapidsai/cudf/issues/15746"}
