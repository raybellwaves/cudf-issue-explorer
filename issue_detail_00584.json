{"assignees":[],"author":{"id":"MDQ6VXNlcjE0MTY0NDA=","is_bot":false,"login":"andrewseidl","name":"Andrew Seidl"},"body":"<!--\r\n\r\nThanks for opening an issue! To help the libGDF team handle your information\r\nefficiently, please first ensure that there is no other issue present that\r\nalready describes the issue you have\r\n(search at https://github.com/gpuopenanalytics/libgdf/issues?&q=is%3Aissue).\r\n\r\nIf there is no issue present please jump to a section below and delete the\r\nirrelevant one depending on whether you are:\r\n\r\n * Making a feature request.\r\n * Reporting a bug.\r\n\r\nFor more general \"how do I do X?\" type questions, please speak visit\r\nhttp://gpuopenanalytics.com/#/COMMUNITY for links to Slack and Google\r\nGroups.\r\n\r\n-->\r\n\r\n## Feature request\r\n\r\nIn similar spirit of #117, would be good to start using [`clang-tidy`](https://clang.llvm.org/extra/clang-tidy/) as a linter on the codebase to catch some errors, style violations, etc.\r\n\r\nArrow's setup would be a good place to start, which includes a [CMake target](https://github.com/apache/arrow/blob/44c2fa7d7d4e7a1c1645c85f87d557c4fc510c33/cpp/CMakeLists.txt#L552-L560) to run the tool and a [custom version of `run-clang-tidy`](https://github.com/apache/arrow/blob/master/cpp/build-support/run-clang-tidy.sh) which supports ignoring some files.\r\n\r\n<!--\r\n\r\nPlease include details of the feature you would like to see, why you would\r\nlike to see it/the use case\r\n\r\n-->","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQ0OTE1NTg1Mw==","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"Duplicate https://github.com/rapidsai/cudf/issues/479","createdAt":"2018-12-20T22:27:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-449155853","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps41R1lQ","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@jrhemstad @harrism Now that we've merged rapidsai#6695 I think there is interest in enabling clang-tidy on the libcudf code base so I'm reopening this issue. If we'd prefer to consolidate discussion on #479 we can close this again and reopen that, but offhand it seems like #479 grew into a much more involved discussion about defining a style guide and enabling clang-tidy with some minimal configuration seems like a simpler goal to start with.","createdAt":"2021-08-05T22:45:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-893868368","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps41b-ZQ","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Agree! @teju85 is interested in having a shared cross-rapids clang-tidy config. This makes sense as we have more or less converged on a shared RAPIDS clang-format config. ","createdAt":"2021-08-11T06:01:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-896525904","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps41cAq9","author":{"login":"teju85"},"authorAssociation":"MEMBER","body":"Thank you Mark for adding me to this discussion. Yes, I'm certainly interested in a more uniform tidy config across RAPIDS!\r\n\r\nBTW, we already have clang-tidy running as part of CI for cuml for almost a year now (though not super stringent, yet). cuML CI is [here](https://github.com/rapidsai/cuml/blob/branch-21.10/ci/checks/style.sh#L92). However, when it was introduced, we were at clang v8.0.1 which wasn't particularly great with .cu/.cuh files! So, the [tidy wrapper script](https://github.com/rapidsai/cuml/blob/branch-21.10/cpp/scripts/run-clang-tidy.py) had to take in a bunch of hacks :(. If someone can pick up this flow, improve and generalize it for RAPIDS-wide usage, that'd be awesome.\r\n\r\nFinally, I'm not particularly attached to these scripts or a particular style (eg: google, cpp-core, etc) and will happily accept if there's a better solution for RAPIDS. However, I'd like for atleast all the key devs to be involved and their requirements heard before finalizing on a tidy style guide. Because in my personal opinion, tidying has a bigger benefit in terms of code uniformity and readability, especially for folks working across RAPIDS projects.","createdAt":"2021-08-11T06:21:52Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-896535229","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps41cA1X","author":{"login":"teju85"},"authorAssociation":"MEMBER","body":"JFYI, there's a similar [wrapper script in raft](https://github.com/rapidsai/raft/blob/branch-21.10/cpp/scripts/run-clang-tidy.py), but has not yet been added to CI workflow.","createdAt":"2021-08-11T06:23:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-896535895","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GZTYL","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@codereport would #10064 close this? We can always add more rules a la #10174 later as we decide that they are useful. Is there a reason we closed those PRs, or are they worth someone picking up?","createdAt":"2022-07-11T23:11:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-1181038091","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5O7Gu5","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"I would like to pick up the work in #10064 after we've completed #12002","createdAt":"2022-11-22T18:58:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-1324116921","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5PAPRh","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"As a first step I would prioritize finding a way to run clang-tidy in CI. PRs that fix clang-tidy errors are nice, but we inevitably accumulate more without CI checking for us.","createdAt":"2022-11-23T18:02:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-1325462625","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5RwalB","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Based on what I found in #581, I think getting this working is going to first involve expending significant effort in ensuring that all of our dependencies compile with clang to start with. I know that cuML is already running clang-tidy, but they also have significant logic built around wrapping the clang-tidy invocation so I assume that they are also doing some preprocessing to only lint the files that they can compile. I could be wrong, though, and perhaps there's a simpler path here.\r\n\r\nEDIT: It looks like [cuML is skipping cu files altogether](https://github.com/rapidsai/cuml/blob/branch-23.02/cpp/scripts/run-clang-tidy.py#L43).","createdAt":"2023-01-05T01:48:02Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-1371646273","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5ThnNP","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Clang can compile .cu files. Otherwise clangd intellisense wouldn't work.","createdAt":"2023-01-24T02:31:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-1401320271","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5TiHn3","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Clang can compile cu files, but there are various headers in libcu++/thrust/cuco/etc that compile under nvcc but not clang (for various reasons). I don't use Intellisense so I can't say exactly what is currently working and what isn't, perhaps it just skips TUs that don't compile.","createdAt":"2023-01-24T06:31:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/584#issuecomment-1401453047","viewerDidAuthor":false}],"createdAt":"2018-08-29T18:00:18Z","id":"MDU6SXNzdWUzOTMyMzMxMjQ=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":26,"title":"Helps developer velocity","description":"","dueOn":null},"number":584,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"Add clang-tidy for automatic linting","updatedAt":"2024-02-23T17:59:36Z","url":"https://github.com/rapidsai/cudf/issues/584"}
