{"assignees":[],"author":{"id":"MDQ6VXNlcjM5NDM3NjE=","is_bot":false,"login":"bdice","name":"Bradley Dice"},"body":"**Describe the bug**\r\nThe test `test_groupby_diff_row_mixed_numerics` failed randomly in CI. The randomly generated values resulted in overflow during subtraction in a datetime column, which caused pandas to fail (cudf may also fail, but that line had not yet run).\r\n\r\n<details>\r\n<summary>Traceback here</summary>\r\n\r\n```\r\nError Message\r\n\r\nOverflowError: Overflow in int64 addition\r\n\r\nStacktrace\r\n\r\nnelem = 10, shift_perc = 0.5, direction = 1\r\n\r\n    @pytest.mark.parametrize(\"nelem\", [10, 50, 100, 1000])\r\n    @pytest.mark.parametrize(\"shift_perc\", [0.5, 1.0, 1.5])\r\n    @pytest.mark.parametrize(\"direction\", [1, -1])\r\n    def test_groupby_diff_row_mixed_numerics(nelem, shift_perc, direction):\r\n        t = rand_dataframe(\r\n            dtypes_meta=[\r\n                {\"dtype\": \"int64\", \"null_frequency\": 0, \"cardinality\": 10},\r\n                {\"dtype\": \"int64\", \"null_frequency\": 0.4, \"cardinality\": 10},\r\n                {\"dtype\": \"float32\", \"null_frequency\": 0.4, \"cardinality\": 10},\r\n                {\"dtype\": \"decimal64\", \"null_frequency\": 0.4, \"cardinality\": 10},\r\n                {\r\n                    \"dtype\": \"datetime64[ns]\",\r\n                    \"null_frequency\": 0.4,\r\n                    \"cardinality\": 10,\r\n                },\r\n                {\r\n                    \"dtype\": \"timedelta64[ns]\",\r\n                    \"null_frequency\": 0.4,\r\n                    \"cardinality\": 10,\r\n                },\r\n            ],\r\n            rows=nelem,\r\n            use_threads=False,\r\n        )\r\n        pdf = t.to_pandas()\r\n        gdf = cudf.from_pandas(pdf)\r\n        n_shift = int(nelem * shift_perc) * direction\r\n    \r\n>       expected = pdf.groupby([\"0\"]).diff(periods=n_shift)\r\n\r\ncudf/tests/test_groupby.py:1960: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/groupby/groupby.py:948: in wrapper\r\n    return self._python_apply_general(curried, self._obj_with_exclusions)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/groupby/groupby.py:1309: in _python_apply_general\r\n    keys, values, mutated = self.grouper.apply(f, data, self.axis)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/groupby/ops.py:852: in apply\r\n    res = f(group)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/groupby/groupby.py:937: in curried\r\n    return f(x, *args, **kwargs)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/frame.py:8435: in diff\r\n    new_data = self._mgr.diff(n=periods, axis=axis)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/internals/managers.py:374: in diff\r\n    return self.apply(\"diff\", n=n, axis=axis)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/internals/managers.py:327: in apply\r\n    applied = getattr(b, f)(**kwargs)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/internals/blocks.py:1754: in diff\r\n    new_values = values - values.shift(n, axis=axis)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/ops/common.py:69: in new_method\r\n    return method(self, other)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/arrays/datetimelike.py:1336: in __sub__\r\n    result = self._sub_datetime_arraylike(other)\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/arrays/datetimes.py:721: in _sub_datetime_arraylike\r\n    new_values = checked_add_with_arr(self_i8, -other_i8, arr_mask=arr_mask)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\narr = array([[ 8466425224569324595, -9223372036854775808,  1593875653891806295,\r\n        -9223372036854775808, -9223372036854775808, -8738661699754510466]])\r\nb = array([[-9223372036854775808, -9223372036854775808, -9223372036854775808,\r\n        -9223372036854775808, -9223372036854775808, -8466425224569324595]])\r\narr_mask = array([[ True,  True,  True,  True,  True, False]]), b_mask = None\r\n\r\n    def checked_add_with_arr(\r\n        arr: np.ndarray,\r\n        b,\r\n        arr_mask: np.ndarray | None = None,\r\n        b_mask: np.ndarray | None = None,\r\n    ) -> np.ndarray:\r\n        \"\"\"\r\n        Perform array addition that checks for underflow and overflow.\r\n    \r\n        Performs the addition of an int64 array and an int64 integer (or array)\r\n        but checks that they do not result in overflow first. For elements that\r\n        are indicated to be NaN, whether or not there is overflow for that element\r\n        is automatically ignored.\r\n    \r\n        Parameters\r\n        ----------\r\n        arr : array addend.\r\n        b : array or scalar addend.\r\n        arr_mask : np.ndarray[bool] or None, default None\r\n            array indicating which elements to exclude from checking\r\n        b_mask : np.ndarray[bool] or None, default None\r\n            array or scalar indicating which element(s) to exclude from checking\r\n    \r\n        Returns\r\n        -------\r\n        sum : An array for elements x + b for each element x in arr if b is\r\n              a scalar or an array for elements x + y for each element pair\r\n              (x, y) in (arr, b).\r\n    \r\n        Raises\r\n        ------\r\n        OverflowError if any x + y exceeds the maximum or minimum int64 value.\r\n        \"\"\"\r\n        # For performance reasons, we broadcast 'b' to the new array 'b2'\r\n        # so that it has the same size as 'arr'.\r\n        b2 = np.broadcast_to(b, arr.shape)\r\n        if b_mask is not None:\r\n            # We do the same broadcasting for b_mask as well.\r\n            b2_mask = np.broadcast_to(b_mask, arr.shape)\r\n        else:\r\n            b2_mask = None\r\n    \r\n        # For elements that are NaN, regardless of their value, we should\r\n        # ignore whether they overflow or not when doing the checked add.\r\n        if arr_mask is not None and b2_mask is not None:\r\n            not_nan = np.logical_not(arr_mask | b2_mask)\r\n        elif arr_mask is not None:\r\n            not_nan = np.logical_not(arr_mask)\r\n        elif b_mask is not None:\r\n            not_nan = np.logical_not(b2_mask)\r\n        else:\r\n            not_nan = np.empty(arr.shape, dtype=bool)\r\n            not_nan.fill(True)\r\n    \r\n        # gh-14324: For each element in 'arr' and its corresponding element\r\n        # in 'b2', we check the sign of the element in 'b2'. If it is positive,\r\n        # we then check whether its sum with the element in 'arr' exceeds\r\n        # np.iinfo(np.int64).max. If so, we have an overflow error. If it\r\n        # it is negative, we then check whether its sum with the element in\r\n        # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\r\n        # error as well.\r\n        i8max = lib.i8max\r\n        i8min = iNaT\r\n    \r\n        mask1 = b2 > 0\r\n        mask2 = b2 < 0\r\n    \r\n        if not mask1.any():\r\n            to_raise = ((i8min - b2 > arr) & not_nan).any()\r\n        elif not mask2.any():\r\n            to_raise = ((i8max - b2 < arr) & not_nan).any()\r\n        else:\r\n            to_raise = ((i8max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any() or (\r\n                (i8min - b2[mask2] > arr[mask2]) & not_nan[mask2]\r\n            ).any()\r\n    \r\n        if to_raise:\r\n>           raise OverflowError(\"Overflow in int64 addition\")\r\nE           OverflowError: Overflow in int64 addition\r\n\r\n/opt/conda/envs/rapids/lib/python3.9/site-packages/pandas/core/algorithms.py:1112: OverflowError\r\n```\r\n\r\n</details>\r\n\r\nCI log: https://gpuci.gpuopenanalytics.com/job/rapidsai/job/gpuci/job/cudf/job/prb/job/cudf-gpu-test/CUDA=11.5,GPU_LABEL=driver-495,LINUX_VER=ubuntu20.04,PYTHON=3.9/6540/testReport/junit/cudf.tests/test_groupby/test_groupby_diff_row_mixed_numerics_1_0_5_10_/\r\n\r\nFailing line:\r\nhttps://github.com/rapidsai/cudf/blob/0581975e0132bd4189b579595e480a94d94a7917/python/cudf/cudf/tests/test_groupby.py#L1960\r\n\r\n**Steps/Code to reproduce bug**\r\nFailures are random, based on the seed.\r\n\r\nHere is a minimal reproduction in pure pandas:\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nmin_timedelta = np.timedelta64(-(2**63) + 1)\r\nmax_timedelta = np.timedelta64(2**63 - 1)\r\n\r\ndf = pd.DataFrame({\"id\": [0, 0], \"data\": [min_timedelta, max_timedelta]})\r\n\r\n# This fails:\r\ndf.diff()\r\n# [traceback...] OverflowError: Overflow in int64 addition\r\n\r\n# This also fails:\r\ndf.groupby(\"id\").diff()\r\n# [traceback...] OverflowError: Overflow in int64 addition\r\n\r\n# Weirdly, the diff succeeds on just the Series:\r\ndf[\"data\"].diff()\r\n# 0                           NaT\r\n# 1   -1 days +23:59:59.999999998\r\n# Name: data, dtype: timedelta64[ns]\r\n```\r\n\r\nHere's how cudf currently handles those cases:\r\n\r\n```python\r\n>>> gdf = cudf.from_pandas(df)\r\n>>> gdf.diff()  # Implemented in #9817, but not yet available in branch-22.04\r\n...\r\nAttributeError: DataFrame object has no attribute diff\r\n>>> gdf.groupby(\"id\").diff()  # Silently overflows, but represents time differently than pandas\r\n                         data\r\n0                        <NA>\r\n1  -0 days 00:00:00.000000002\r\n>>> gdf[\"data\"].diff()  # Calls through to numba?\r\n...\r\nValueError: Cannot determine Numba type of <class 'cudf.core.column.timedelta.TimeDeltaColumn'>\r\n...\r\nNotImplementedError: dtype timedelta64[ns] is not yet supported via `__cuda_array_interface__`\r\n>>> \r\n```\r\n\r\n**Expected behavior**\r\nThis test should not randomly fail. We should fix a seed and/or choose bounds on the data that prevent overflow.\r\n\r\n**Additional context**\r\nFound while reviewing PR #10143.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4_LCGM","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-03-06T00:08:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10214#issuecomment-1059856780","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5EVcOO","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-06-04T00:10:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10214#issuecomment-1146471310","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-OW-x","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"The underlying issue here is that [`rand_dataframe` seeds itself by producing a random number](https://github.com/rapidsai/cudf/blob/branch-24.06/python/cudf/cudf/testing/dataset_generator.py#L309). That should be fixed to either require a user-provided seed, or use a sensible default like 0 to produce reproducible results.","createdAt":"2024-05-17T14:08:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10214#issuecomment-2117693361","viewerDidAuthor":false}],"createdAt":"2022-02-03T22:45:25Z","id":"I_kwDOBWUGps5C-TxW","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":10214,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] test_groupby_diff_row_mixed_numerics failed randomly with overflow in datetime subtraction","updatedAt":"2024-05-17T14:08:39Z","url":"https://github.com/rapidsai/cudf/issues/10214"}
