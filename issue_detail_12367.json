{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nThe `io::detail::make_column` method converts a `column_buffer` object into a `cudf::column`. The conversion moves data out from underneath the buffer, invalidating the buffer afterward. As a result, the object should not be used afterwards. At present, however, that information is something that the user has to know a priori. One such example is [this finalize_output method in the parquet reader](https://github.com/rapidsai/cudf/blob/branch-23.02/cpp/src/io/parquet/reader_impl.cpp#L300) that implicitly handles this logic by only interacting with buffers that would not have been previously modified. It would be better if that information were communicated to the developer more explicitly.\r\n\r\n**Describe the solution you'd like**\r\nAfter #12364 `make_column` can be made into a class method. This method should be modified to only be invokable on rvalue-references (see the \"member functions with ref-qualifier\" section of [the cppreference docs for member functions] on how to do this). That would force calling code to do something like `std::move(column_buffer).make_column`, making it much more obvious that the buffer is no longer usable afterwards.\r\n\r\n**Describe alternatives you've considered**\r\nNone\r\n\r\n**Additional context**\r\nMaking this change will also force careful reconsideration of all code currently using column buffers to ensure that usage patterns are safe. Some patterns may be valid at present (for instance, it looks like some code is currently checking the size of a buffer after its buffers have been moved because the size attribute is still accurate) but are antipatterns that should be refactored.\r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2022-12-13T02:19:31Z","id":"I_kwDOBWUGps5ZAGcO","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"}],"milestone":{"number":26,"title":"Helps developer velocity","description":"","dueOn":null},"number":12367,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Invalidate io::detail::column_buffer objects when they are converted to columns","updatedAt":"2024-02-23T17:59:15Z","url":"https://github.com/rapidsai/cudf/issues/12367"}
