{"assignees":[],"author":{"id":"MDQ6VXNlcjg4MTMwMDI=","is_bot":false,"login":"razajafri","name":"Raza Jafri"},"body":"**Describe the bug**\r\nWhile instantiating ColumnViews in a loop. We could run into a case where somewhere in the middle of the instantiations we see a `CudfException`. Any attempt to call `close()` on successfully instantiated `ColumnView`s might throw another `CudfException`, causing us to be irrecoverable. \r\n\r\n```\r\ntry {\r\n  columnViews[i] = new ColumnView();\r\n} catch (Throwable e) { \r\n  for (ColumnView cv: columnViews) {\r\n    if (cv != null) cv.close(); // this could again throw\r\n  }\r\n  throw t;\r\n}\r\n```\r\nRefer to https://github.com/rapidsai/cudf/pull/13262/files#diff-50ba2711690aca8e4f28d7b491373a4dd76443127c8b452a77b6c1fe2388d9e3R815-R828 for the exact example of this case. \r\n\r\n**Expected behavior**\r\nWe should be able to recover ideally although, not sure if we can. Is this an irrecoverable state and can we just let the exception propagate upstream? Could we add the original exception as a suppressed exception in the new exception? ","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-05-08T19:47:50Z","id":"I_kwDOBWUGps5lYJap","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxNDA1MTQ1NjIz","name":"cuDF (Java)","description":"Affects Java cuDF API.","color":"006b75"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":null,"number":13310,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Handle CudfException while instantiating ColumnViews ","updatedAt":"2023-06-07T21:05:59Z","url":"https://github.com/rapidsai/cudf/issues/13310"}
