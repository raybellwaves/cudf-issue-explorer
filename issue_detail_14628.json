{"assignees":[],"author":{"id":"MDQ6VXNlcjEwMTQwNzU4","is_bot":false,"login":"sapcode","name":""},"body":"Dear Rapids.Ai Team,\r\n\r\nin the cuDF python API documentation there are several methods which are not in libcudf for c++:\r\ncudf.dataframe.apply\r\ncudf.dataframe.applymap\r\ncudf.dataframe.apply_rows\r\ncudf.dataframe.apply_chunks\r\n\r\n1) Is there any chance that those functions will be made available in libcudf for c++ ?\r\n2) Is there a way we could call the cuDF python functions from libcudf c++ context or from a general c++ context using pybind11 or  python c-api ?\r\n3) Could you enhance the examples section with such a code which shows how to call python cuDF from c++ ?\r\n\r\nBest regards\r\nDeveloper\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5uoEL9","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"The `apply` functionality of the cudf Python package is implemented using Numba. You can read more about UDF (user-defined function) support here: https://docs.rapids.ai/api/cudf/stable/user_guide/guide-to-udfs/\r\n\r\nBecause this requires JIT compilation with Numba, we don't have a way to expose this in libcudf C++ code. There are two features that are pretty close, however.\r\n\r\n[`cudf::transform`](https://docs.rapids.ai/api/libcudf/nightly/group__transformation__transform.html#gaf79991ded097d2cf7db62edf38181022) achieves a similar kind of thing as `DataFrame.apply`. I haven't used this feature so I can't speak very much to its limitations, but there are tests here that demonstrate using a device function passed as a string, or a precompiled PTX input: https://github.com/rapidsai/cudf/blob/branch-24.02/cpp/tests/transform/integration/unary_transform_test.cpp\r\n\r\nThere is also [`cudf::compute_column`](https://docs.rapids.ai/api/libcudf/nightly/group__transformation__transform#gad01393294fc6de61ca4b323a873520a5) which takes an [AST expression](https://docs.rapids.ai/api/libcudf/nightly/group__expressions). The general idea is that you can take column references within a table (or literal inputs like \"3\") and create expressions, like `col_0 + col_1 * col_2 + 3`. Then you can execute that AST expression over a table to make a new column. You can see examples in the tests here: https://github.com/rapidsai/cudf/blob/branch-24.02/cpp/tests/ast/transform_tests.cpp\r\n\r\nIf you can give us more information about the kinds of user-defined functions you want to execute, that would be very helpful for future library design.","createdAt":"2023-12-14T14:53:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14628#issuecomment-1855996669","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5uoJ1m","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"To add a bit more to @bdice's comment:\r\n\r\nCan you explain your use case in a bit more detail? Would you like to use `cudf.DataFrame.apply` on a libcudf `table_view` because you aren't sure how to replicate the behaviour just using libcudf operations? Or do you have some other reason to want to do this? In almost all cases, the high-level cudf API calls (like `DataFrame.apply`) translate into a (sequence of) calls to libcudf primitives. If you're already in C++ you would, generally speaking, be better off calling those primitives directly. For example `cudf::transform`.\r\n\r\nWe have not put effort into making cudf interoperate bidirectionally with libcudf at the level of API calls: only the data structure level. So to date there is no way to turn a `table_view` into a `DataFrame` from C++. Indeed, the `DataFrame` contains a significant amount of extra metadata that you would need to construct (for example, libcudf doesn't have the concept of row and column indexes).\r\n\r\nSo it _might_ be possible to go bidirectionally between libcudf and cudf, _but_ there are many caveats because the translation from cudf to libcudf objects is a lossy one at the metadata level. We are currently making an effort to have a closer mapping between libcudf types/algorithms and cython-wrapped types/functions in the `pylibcudf` wrapping functions (you can see progress here https://github.com/rapidsai/cudf/issues/13921).","createdAt":"2023-12-14T15:06:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14628#issuecomment-1856019814","viewerDidAuthor":false}],"createdAt":"2023-12-14T13:10:54Z","id":"I_kwDOBWUGps55sW4c","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjQ=","name":"question","description":"Further information is requested","color":"D4C5F9"}],"milestone":null,"number":14628,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[QST] Calling cudf.dataframe.apply from c++ or porting to libcudf ","updatedAt":"2024-03-04T13:59:32Z","url":"https://github.com/rapidsai/cudf/issues/14628"}
