{"assignees":[{"id":"MDQ6VXNlcjE1MzgxNjU=","login":"vyasr","name":"Vyas Ramasubramani"}],"author":{"id":"MDQ6VXNlcjEyNzI1MTEx","is_bot":false,"login":"GregoryKimball","name":"Gregory Kimball"},"body":"**Is your feature request related to a problem? Please describe.**\r\nThe benchmark [bench_merge](https://github.com/rapidsai/cudf/blob/ff3b64325d3ac48fc0e8e0e9e1cf6246dd4aa075/python/cudf/benchmarks/API/bench_dataframe.py#L32) in [bench_dataframe.py](https://github.com/rapidsai/cudf/blob/branch-23.02/python/cudf/benchmarks/API/bench_dataframe.py) yields geometrically-increasing output size when `num_key_cols=2` . As a result, this particular benchmark runs into out-of-memory failures long before any other in the benchmarking suite. \r\n\r\n**Describe the solution you'd like**\r\nI would like to add a data generator with characteristics that make the output row count a roughly constant multiple of the input row count. \r\n\r\n**Describe alternatives you've considered**\r\nOne alternative is to disable this benchmark for row counts >1M. However, cuDF join performance is one of its strongest features and we don't want to restrict our benchmarking to smaller tables.\r\n\r\n**Additional context**\r\nHere is a code snippet that demonstrates the problem as well as a potential solution.\r\n```\r\nimport string\r\nimport cupy\r\nimport cudf\r\n\r\nrandom_state = cupy.random.RandomState(42)\r\ncolumn_generators = {\r\n    \"int\": (lambda nr: random_state.randint(low=0, high=100, size=nr)),\r\n    \"inthc\": (lambda nr: random_state.randint(low=0, high=nr ** 0.5, size=nr)),\r\n}\r\n\r\nfor gen in ['int', 'inthc']:       \r\n    print(f'using column generator key {gen}')\r\n    for nr in [100, 10_000, 100_000, 1_000_000]:               \r\n        df = cudf.DataFrame({f\"{string.ascii_lowercase[i]}\": column_generators[gen](nr)  for i in range(6)})\r\n        m = df.merge(df, on=['a', 'b'])\r\n        print('for input size {}, output size is {} (the ratio is {:.2f})'.format(nr, len(m), len(m)/nr))\r\n```\r\n\r\n```\r\nusing column generator key int\r\nfor input size 100, output size is 100 (the ratio is 1.00)\r\nfor input size 10000, output size is 20234 (the ratio is 2.02)\r\nfor input size 100000, output size is 1100538 (the ratio is 11.01)\r\nfor input size 1000000, output size is 101002012 (the ratio is 101.00)\r\nusing column generator key inthc\r\nfor input size 100, output size is 214 (the ratio is 2.14)\r\nfor input size 10000, output size is 19868 (the ratio is 1.99)\r\nfor input size 100000, output size is 199970 (the ratio is 2.00)\r\nfor input size 1000000, output size is 2000782 (the ratio is 2.00)\r\n```\r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2022-12-01T05:43:36Z","id":"I_kwDOBWUGps5XqVsz","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3OTIx","name":"proposal","description":"Change current process or code","color":"2a2c89"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":29,"title":"Benchmarking","description":"","dueOn":null},"number":12276,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] For cuDF `bench_merge`, make output size scale with input size","updatedAt":"2023-07-23T21:10:21Z","url":"https://github.com/rapidsai/cudf/issues/12276"}
