{"assignees":[],"author":{"id":"MDQ6VXNlcjc0MTY5MzU=","is_bot":false,"login":"ttnghia","name":"Nghia Truong"},"body":"For comparing structs column, both the legacy row comparators and the new experimental row comparators rely on struct flattening procedures. Each of them have their own flattening mechanism: `cudf::structs::detail::flatten_nested_columns` and `cudf::experimental::decompose_structs`. The difference between them are:\r\n * `cudf::structs::detail::flatten_nested_columns` replaces the input structs column with an optional column generated by materializing the input null mask. \r\n * `cudf::experimental::decompose_structs` doesn't materialize any new column. Instead, it replaces the input structs column with a modified version of it, which only has either zero or one child at the innermost level.\r\n\r\nAlthough these APIs produce different output, these APIs do very similar job:\r\n * Both extract the input structs column into a table of children columns, which are much simpler than the input structs column to be compared on device code.\r\n * Both replace the input by a new column, and this new column is mainly used for checking nulls.\r\n\r\nThe issue of each from these approaches are:\r\n * `cudf::structs::detail::flatten_nested_columns` needs to materialize null mask of the input column into a real column.\r\n * `cudf::experimental::decompose_structs` still has a nested structs column in the output. Although that column only has zero or one child at the innermost level, it still causes performance degradation if its nested level is very high.\r\n\r\nAs such, we can unify the two approaches, taking the pros of both while eliminating the cons. The new flattening API should:\r\n * Avoid materializing new columns, and\r\n * Avoid output columns having more than one nested level.\r\n\r\nThis seems to be very straightforward with modifying the existing `cudf::experimental::decompose_structs` API.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5eQ46B","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Hello @ttnghia, thinking about the priority of this suggestion, do we have a way to estimate the performance impact of high nesting levels for the `cudf::experimental::decompose_structs` implementation?","createdAt":"2023-06-07T20:48:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13032#issuecomment-1581485697","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5eQ6kw","author":{"login":"ttnghia"},"authorAssociation":"CONTRIBUTOR","body":"> do we have a way to estimate the performance impact of high nesting levels for the cudf::experimental::decompose_structs implementation?\r\n\r\nWe can run a benchmark comparing sortings of two non-nullable tables:\r\n1. A table with highly nested struct+list\r\n2. A table resulted from calling `cudf::structs::detail::flatten_nested_columns` on the table above.\r\n\r\nThe second table is flattened from the first table so it will have all columns having at max 1 nested level.","createdAt":"2023-06-07T20:52:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13032#issuecomment-1581492528","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5gtqj4","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"@divyegala and I discussed this idea today, and we would like to also monitor the impact to peak memory usage when experimenting with this idea.","createdAt":"2023-07-05T21:58:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13032#issuecomment-1622583544","viewerDidAuthor":false}],"createdAt":"2023-03-29T17:06:37Z","id":"I_kwDOBWUGps5iHwvh","labels":[{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMDEzOTg3OTIx","name":"proposal","description":"Change current process or code","color":"2a2c89"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":{"number":2,"title":"List and Struct data types and operations","description":"","dueOn":null},"number":13032,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Unify `cudf::structs::detail::flatten_nested_columns` and `cudf::experimental::decompose_structs` to improve performance for structs comparison","updatedAt":"2023-07-05T21:58:11Z","url":"https://github.com/rapidsai/cudf/issues/13032"}
