{"assignees":[{"id":"MDQ6VXNlcjMxOTA0MDU=","login":"shwina","name":"Ashwin Srinath"}],"author":{"id":"MDQ6VXNlcjMxOTA0MDU=","is_bot":false,"login":"shwina","name":"Ashwin Srinath"},"body":"In a conversation with @martindurant and @jpivarski, it came up that there's no supported way to exchange data zero copy between cuDF and [Awkward Array](https://awkward-array.org/doc/main/) (which has GPU support).\r\n\r\nThe standard 0-copy mechanisms like dlpack and `__cuda_array_interface__` don't support nested types like lists or structs. And our `to/from_arrow()` methods convert to and from _host_ data so they're not useful when we want to 0-copy _device_ data.\r\n\r\n## Option 1\r\n\r\nWe support a `gpu=True` (or similar) keyword argument in `to_arrow()` which would then return a PyArrow array backed by device data. Now, PyArrow does not seemingly support it, but it's _possible_ to create a PyArrow array backed by device data:\r\n\r\n```python\r\nIn [5]: a = cp.asarray([1, 2, 3])\r\n\r\nIn [6]: buf = pa.foreign_buffer(a.data.ptr, a.nbytes, a)\r\n\r\nIn [7]: type(buf)\r\nOut[7]: pyarrow.lib.Buffer\r\n\r\nIn [8]: print(buf)\r\n<pyarrow.Buffer address=0x7f2f6fa00200 size=24 is_cpu=True is_mutable=False>\r\n```\r\n\r\nThe problem (as can be seen above) is that PyArrow thinks this is a CPU-backed buffer. So attempting to do anything with it segfaults:\r\n\r\n```python\r\nIn [9]: arr = pa.Array.from_buffers(pa.int64(), len(a), buffers=[None, buf])\r\n\r\nIn [10]: print(arr)  # segfault\r\n```\r\n\r\n## Option 2\r\n\r\nWe could expose new `Series.to_buffers()` and `Series.from_buffers()` functions that would produce and consume GPU buffers (along with a schema), presumably in the same order as arrow's [from_buffers](https://arrow.apache.org/docs/python/generated/pyarrow.Array.html#pyarrow.Array.from_buffers) and [buffers](https://arrow.apache.org/docs/python/generated/pyarrow.Array.html#pyarrow.Array.buffers) methods. We could use CuPy arrays to represent the buffers.\r\n\r\n---\r\n\r\nCurious what folks think? Interested also in @kkraus14's thoughts here if any.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5yuRrb","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I think #14926 is pretty relevant here.","createdAt":"2024-02-02T21:36:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1924733659","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5yuVIl","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"I agree that this is kinda the exact use case that #14926 is designed for. Along with something like a PyCapsule based protocol.","createdAt":"2024-02-02T21:49:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1924747813","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5yxEi_","author":{"login":"jpivarski"},"authorAssociation":"NONE","body":"I should add here that, from the Awkward Array side, any format that preserves all of the information is equally good. If given CuPy arrays (option 2), we might internally convert them to a format that follows a pyarrow array's Buffers so that we can reuse code that makes the adjustments between Arrow and Awkward, but that's our business.\r\n\r\nI suggested option 1, making a pyarrow array that would segfault if you touch it, because this works for us (we'll be careful to not dereference the GPU pointers) and if pyarrow ever does add the infrastructure to interpret it correctly, the same interface on cuDF will work for both Awkward and Arrow.","createdAt":"2024-02-03T22:01:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1925466303","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5zZ86y","author":{"login":"martindurant"},"authorAssociation":"NONE","body":"Ping on this, @shwina ; I gather work is ongoing in the linked issue, but I would appreciate a brief summary here of status and what we can expect for awkward integration. ","createdAt":"2024-02-09T16:00:00Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"EYES","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936182962","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5zbcVk","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Thanks, @martindurant - I believe we should see a PR up for #14926 soon. At that point, we would be very grateful if you could provide feedback or perhaps do some early testing!","createdAt":"2024-02-09T20:40:05Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936573796","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5zbc3S","author":{"login":"martindurant"},"authorAssociation":"NONE","body":"Certainly, just let us know","createdAt":"2024-02-09T20:42:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936575954","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5zbnLg","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"Just a note that #14926 will first yield the C++ level functions and C structs, and there would likely need to be a follow up in implementing the Python protocol around it. The issue tracking that work in Arrow is here: https://github.com/apache/arrow/issues/38325","createdAt":"2024-02-09T21:19:49Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936618208","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5zcOYn","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"Wouldn't `nanoarrow` provide a way to access the `DeviceArray` from Cython? ","createdAt":"2024-02-10T00:48:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1936778791","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps50HtSO","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"> Wouldn't nanoarrow provide a way to access the DeviceArray from Cython?\r\n\r\nWould be very grateful if @paleolimbot could advise here!","createdAt":"2024-02-16T10:57:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1948177550","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps50JAn3","author":{"login":"paleolimbot"},"authorAssociation":"NONE","body":"It's been touched on here, but I think the intention is ( https://github.com/apache/arrow/issues/38325 ) to add a protocol `__arrow_c_device_array__()` to mirror how `__arrow_c_array__()` works but with explicit non-CPU support ( https://arrow.apache.org/docs/format/CDataInterface/PyCapsuleInterface.html ).\r\n\r\nWhen nanoarrow for Python has matured a bit it might be able to help export (and test), but the Cython needed to make the required Capsule is pretty compact and any library doing exporting should probably just copy it (or translate it to pybind11 or nanobind): https://github.com/apache/arrow-nanoarrow/blob/main/python/src/nanoarrow/_lib.pyx#L112-L127 .","createdAt":"2024-02-16T14:47:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1948518903","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps51IkRT","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"@martindurant just an update here that I'm waiting for #15047 to take some shape before I try and kick the tires with accessing from Python.","createdAt":"2024-02-26T20:20:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1965179987","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps51InlN","author":{"login":"martindurant"},"authorAssociation":"NONE","body":"@jpivarski , can you please link the experimental conversions code you wrote in awkward?","createdAt":"2024-02-26T20:25:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1965193549","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps51Ip9Z","author":{"login":"jpivarski"},"authorAssociation":"NONE","body":"This is the script that I used to test conversion of CuDF's Arrow data into Awkward. (The other direction should be even easier.)\r\n\r\nhttps://github.com/scikit-hep/awkward/blob/main/studies/cudf-to-awkward.py","createdAt":"2024-02-26T20:27:51Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-1965203289","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps54C73H","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Just wanted to provide a quick status update here. I've put together a prototype of the device data capsule protocols in #15370. It's not usable yet for a number of reasons, largely boiling down to the need for a D2D copy at the moment (although that may still be enough of an improvement over the current D2H2D that our existing to/from_arrow methods do that you'd still find it useful for testing), but we should be able to make some progress on that soon. I've started the discussion on how best to proceed [here](https://github.com/rapidsai/cudf/issues/14926#issuecomment-2014027647).","createdAt":"2024-03-21T23:23:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/14959#issuecomment-2014035399","viewerDidAuthor":false}],"createdAt":"2024-02-02T21:21:47Z","id":"I_kwDOBWUGps5-HOIH","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":14959,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Zero-copy nested types with other GPU libraries (like Awkward array)","updatedAt":"2024-03-21T23:23:39Z","url":"https://github.com/rapidsai/cudf/issues/14959"}
