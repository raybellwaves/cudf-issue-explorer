{"assignees":[],"author":{"id":"MDQ6VXNlcjM0NDEzMjE=","is_bot":false,"login":"revans2","name":"Robert (Bobby) Evans"},"body":"**Describe the bug**\r\nI don't consider this to be too critical, but it is a regression compared to not turning on white space normalization.\r\n\r\nAn unquoted JSON value is not allowed to have white space in the middle of it, but it looks like the white space normalization is cleaning it up, and converting it from invalid JSON to valid JSON, which makes some of my tests fail.\r\n\r\n**Steps/Code to reproduce bug**\r\n\r\n```\r\nTEST_F(JsonWSNormalizationTest, Unquoted_Bad_Boolean_Spaces)\r\n{\r\n  std::string input  = R\"({\"A\": tr ue })\";\r\n  // but it actually is {\"A\":true}\r\n  std::string output = R\"({\"A\":tr ue})\";\r\n  run_test(input, output);\r\n}\r\n\r\nTEST_F(JsonWSNormalizationTest, Unquoted_Bad_Float_Spaces)\r\n{\r\n  std::string input  = R\"({\"A\": 1 . 0 })\";\r\n  // but it actually is {\"A\":1.0}\r\n  std::string output = R\"({\"A\":1 . 0})\";\r\n  run_test(input, output);\r\n}\r\n\r\nTEST_F(JsonWSNormalizationTest, Unquoted_Bad_Sci_Spaces)\r\n{\r\n  std::string input  = R\"({\"A\": 1 E 1 })\";\r\n  // but it actually is {\"A\":1E1}\r\n  std::string output = R\"({\"A\":1 E 1})\";\r\n  run_test(input, output);\r\n}\r\n```\r\n\r\nThe above tests fail, because there are too many white space values being removed.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps52xeum","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"@revans2 thank you for sharing this update - it's hilarious! We will need to brainstorm about our options here. \r\n* Let invalid JSON get corrected. @revans2 are you willing to accept this behavior?\r\n* libcudf could modify the normalization FST to avoid dropping the whitespace that occurs within a JSON value. We would need to add more states to do this, so it would cost more time and memory. @shrshi what do you think?\r\n* Spark-RAPIDS could run a validity check and flag invalid rows, but perhaps this would not work for the cases where Spark needs to recover records from invalid lines (e.g. `{\"A\":1}{\"B\":1 2 3}`). @revans2 what do you think?","createdAt":"2024-03-12T22:25:37Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15280#issuecomment-1992682406","viewerDidAuthor":false}],"createdAt":"2024-03-12T18:56:35Z","id":"I_kwDOBWUGps6CFbQh","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":13,"title":"Nested JSON reader","description":"Data-parallel reader for nested JSON text data","dueOn":null},"number":15280,"projectCards":[],"projectItems":[],"reactionGroups":[{"content":"LAUGH","users":{"totalCount":1}},{"content":"EYES","users":{"totalCount":1}}],"state":"OPEN","title":"[BUG] JSON white space normalization removes too much for unquoted values","updatedAt":"2024-03-12T23:06:20Z","url":"https://github.com/rapidsai/cudf/issues/15280"}
