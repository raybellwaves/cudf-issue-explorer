{"assignees":[{"id":"MDQ6VXNlcjczMDQ1ODI=","login":"shrshi","name":"Shruti Shivakumar"}],"author":{"id":"MDQ6VXNlcjM0NDEzMjE=","is_bot":false,"login":"revans2","name":"Robert (Bobby) Evans"},"body":"**Describe the bug**\r\n\r\nWe recently saw a SIGSEGV when trying to parse some customer data using JSON. As I stripped down and obfuscated the data it switched to the process aborting with the error.\r\n\r\n```\r\ndouble free or corruption (!prev)\r\nAborted (core dumped)\r\n```\r\n\r\nThe code to reproduce this is\r\n\r\n```\r\nTEST_F(JsonReaderTest, JsonLinesCrash)\r\n{\r\n  std::string const fname = \"from_json_1_10_simplified.json\";\r\n\r\n  cudf::io::json_reader_options options =\r\n    cudf::io::json_reader_options::builder(cudf::io::source_info{fname})\r\n    .lines(true)\r\n    .recovery_mode(cudf::io::json_recovery_mode_t::RECOVER_WITH_NULL)\r\n    .normalize_single_quotes(true)\r\n    .normalize_whitespace(true)\r\n    .mixed_types_as_string(true)\r\n    .keep_quotes(true);\r\n\r\n  auto result = cudf::io::read_json(options);\r\n}\r\n```\r\n\r\nand the file is \r\n[from_json_1_10_simplified.json](https://github.com/rapidsai/cudf/files/15313863/from_json_1_10_simplified.json)\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps591iKg","author":{"login":"revans2"},"authorAssociation":"CONTRIBUTOR","body":"Just be aware that I have hit other issues with this data too. IllegalMemoryAccess errors, a hang where it looks like we are in an infinite loop, and exceptions saying that the data looks to be incorrectly formatted (top level arrays mixed with structs appears to make this very unhappy).\r\n\r\nI am happy to share more data/failures as needed. It just takes a lot of work to obfuscate it properly and still have an appropriate repro case. I suspect that they are almost all related to each other in some form.","createdAt":"2024-05-14T21:41:12Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15750#issuecomment-2111185568","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps591k9Z","author":{"login":"shrshi"},"authorAssociation":"CONTRIBUTOR","body":"Thank you for the repro and the dataset, @revans2 \r\nI'm investigating the segfault and get back to you soon.","createdAt":"2024-05-14T21:51:13Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15750#issuecomment-2111197017","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-a-Mv","author":{"login":"karthikeyann"},"authorAssociation":"CONTRIBUTOR","body":"I  ran via `compute-sanitizer `with the repro code. but there are no CUDA errors.\r\n I ran with gdb, and got line of segfault.\r\n```\r\n#16 operator()<int, cudf::io::json::device_json_column> (col=..., i=16, __closure=<synthetic pointer>) at /home/coder/cudf/cpp/src/io/json/json_column.cu:597\r\n597         col.child_columns.clear();  // their references should be deleted too.\r\n```\r\nIf this line is commented out, no segfault occurs.","createdAt":"2024-05-20T18:40:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15750#issuecomment-2120999727","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-dXjY","author":{"login":"karthikeyann"},"authorAssociation":"CONTRIBUTOR","body":"Minimal repro with valgrind errors\r\n```\r\n{ \"Root\": { \"Key\": [ { \"EE\": \"A\" } ] } }\r\n{ \"Root\": { \"Key\": {  } } }\r\n{ \"Root\": { \"Key\": [{ \"YY\": 1}] } }\r\n```\r\nIssue is not in the `clear()` function call, but accessing deleted reference of `col`. when `clear()` is called, the children columns are deleted, but their references still are stored in `columns`. That's what leads to the segfault, it tries to access a deleted object's reference.  This algorithm could be rewritten as graphs algorithm to avoid this issue.","createdAt":"2024-05-21T03:00:36Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15750#issuecomment-2121627864","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-dxzu","author":{"login":"karthikeyann"},"authorAssociation":"CONTRIBUTOR","body":"Created a fix for memory errors #15798. Long term fix should be rewriting the device tree creation algorithm\r\n","createdAt":"2024-05-21T04:50:10Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15750#issuecomment-2121735406","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-dyUH","author":{"login":"karthikeyann"},"authorAssociation":"CONTRIBUTOR","body":"Discussed with @shrshi  offline about the bug and need for refactor of `make_device_json_column()` in [json_column.cu#L477](https://github.com/rapidsai/cudf/blob/5819de376d091c619807070a43994bbecfb2cd6c/cpp/src/io/json/json_column.cu#L477)\r\n\r\n`make_device_json_column` function's complexity increased after addition of more features, and the current algorithm does not use any graph data-structure. It uses vectors to keep track of ignoring columns, mixed types, pruned columns and uses references. This code could be refactored, so it will be easy to add new features too.\r\n\r\nHere are the list of features that is currently supported by   `make_device_json_column` function and few other features that needs to be supported.\r\n\r\n1. constructs nested tree from parent_col_id vector \r\n2. Handle array of arrays too (pandas feature) (eg. `[[1, 2, 3], [4, 5, 6]]`)\r\n3. null literals are ignored (pandas)\r\n4. mixed types support. (spark)\r\n    - current implementation returns mixed types as strings. @revans2 clarified that mixed types need to return requested type and ignore all other types. (Eg. if list is requested, all struct, string, values needs to be ignored for same column path).\r\n5. Request any column as string type and corresponding children columns should be ignored (no extra memory, no extra processing). (spark)\r\n6. Column pruning\r\n7. TODO: optimization to batch the `init_to_zero` call with `cub::DeviceMemcpy::Batched` (consider batching scan of offsets too).\r\n8. OPTIONAL: To support map type. (Need more details about requirements from spark team).\r\n\r\n","createdAt":"2024-05-21T04:52:46Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15750#issuecomment-2121737479","viewerDidAuthor":false}],"createdAt":"2024-05-14T21:17:00Z","id":"I_kwDOBWUGps6I4LhJ","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"}],"milestone":{"number":13,"title":"Nested JSON reader","description":"Data-parallel reader for nested JSON text data","dueOn":null},"number":15750,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] double free or memory corruption when parsing some JSON","updatedAt":"2024-05-21T04:57:07Z","url":"https://github.com/rapidsai/cudf/issues/15750"}
