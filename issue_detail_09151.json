{"assignees":[{"id":"MDQ6VXNlcjEyNzE2OTc5","login":"PointKernel","name":"Yunsong Wang"}],"author":{"id":"MDQ6VXNlcjE1MjIxMjg5","is_bot":false,"login":"jrhemstad","name":"Jake Hemstad"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nIn the hash join implementation, we allow controlling the behavior of whether two null elements are considered equal. If nulls are _not_ equal, then two rows that contain nulls can never be considered equal. We exploit this in the build phase of the hash join by constructing a bitmask from ANDing the bitmasks from all the input columns and using that \"row bitmask\" to filter out any rows that contain a null element from being inserted into the hash table. \r\n\r\nWhen it comes time to probe the hash table, we do not currently take advantage of this some optimization.\r\n\r\n**Describe the solution you'd like**\r\n\r\nWhen probing the hash map and nulls are considered not equal, we should build bitmask from ANDing all of the bitmasks of the probe table and only probe the map when a row does not contain any nulls. \r\n\r\n**Additional context**\r\n\r\nThe hash join implementation is currently going a complete refactor to use the cuCollections `static_multimap`. To support the filtered insert, we added an `insert_if` function. I think we can also add a `retrieve_if` function to support the filtered probing.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps42NUrL","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"@jlowe points out that both the `hash_join` [constructor](https://github.com/rapidsai/cudf/blob/fdcb90a01fe84be8dbd83aa41bc5678b47185e16/cpp/include/cudf/join.hpp#L522-L524) and the [\"probing\" member functions ](https://github.com/rapidsai/cudf/blob/fdcb90a01fe84be8dbd83aa41bc5678b47185e16/cpp/include/cudf/join.hpp#L545) allow specifying the `null_equality` parameter.\r\n\r\nThis is problematic as a user could specify contradicting options in the build vs probe. The `null_equality` should be specified exactly once in the `hash_join` constructor and then stored for future probing operations. ","createdAt":"2021-08-31T17:57:58Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9151#issuecomment-909462219","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps42Neic","author":{"login":"jlowe"},"authorAssociation":"MEMBER","body":"Filed #9155 to track separately the potential `null_equality` parameter mismatch problem in the `cudf::hash_join` API.","createdAt":"2021-08-31T18:41:44Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9151#issuecomment-909502620","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps45xqE3","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-11-15T21:03:48Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9151#issuecomment-969318711","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps495X1M","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-02-13T22:03:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9151#issuecomment-1038449996","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GrPOo","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@PointKernel I think we can close this now, right? Based on the work in #10248 we don't actually see a perf benefit here due to the effects on the performance of the hash map when the load factor is higher?","createdAt":"2022-07-15T17:11:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9151#issuecomment-1185739688","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5GrWo9","author":{"login":"PointKernel"},"authorAssociation":"MEMBER","body":"This feature is still desired since #10248 is the exploration to reduce actual map size (thus memory footprint) by using precomputed row bitmasks while the goal of this work is to perform conditional probing when nulls are present. The issue depends on https://github.com/NVIDIA/cuCollections/pull/139.","createdAt":"2022-07-15T17:52:59Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9151#issuecomment-1185770045","viewerDidAuthor":false}],"createdAt":"2021-08-31T15:23:59Z","id":"MDU6SXNzdWU5ODM5OTE2Nzk=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":{"number":18,"title":"Refactor using cuco containers","description":"","dueOn":null},"number":9151,"projectCards":[{"project":{"name":"v22.12 Release"},"column":{"name":"Issue-Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Filter join probe table rows that contain nulls when nulls are not equal","updatedAt":"2023-06-07T21:22:10Z","url":"https://github.com/rapidsai/cudf/issues/9151"}
