{"assignees":[],"author":{"id":"MDQ6VXNlcjg0NTczODg=","is_bot":false,"login":"beckernick","name":"Nick Becker"},"body":"**Is your feature request related to a problem? Please describe.**\r\nAs a user, I'd like to be able to call `last_valid_index` or `first_valid_index` to get the index of the first/last non-null value in a Series.\r\n\r\n**Describe the solution you'd like**\r\nI'd like to be able to do the following with cudf:\r\n```\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nser1 = [1,2,3,4]\r\nser2 = [1,2,3,None]\r\npdf = pd.DataFrame({'a':ser1, 'b':ser2})\r\nprint(pdf.b.last_valid_index())\r\n2\r\n```\r\n\r\n**Additional context**\r\nThe pandas implementation is [here](https://github.com/pandas-dev/pandas/blob/v0.24.2/pandas/core/generic.py#L10195). This will help with API compatibility.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5HGkRo","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"This is also desired for SQL `COALESCE` support in dask-sql (cc: @randerzander). One possible solution in pure Python is something like this (suggested by @GregoryKimball):\r\n\r\n```python\r\nimport cudf \r\n\r\nser1 = [1,2,3,4]\r\nser2 = [1,2,3,None]\r\ndf = cudf.DataFrame({'a':ser1, 'b':ser2})\r\n\r\nprint('first_valid_index', df.b.dropna().index[0])\r\nprint('last_valid_index', df.b.dropna().index[-1])\r\n```\r\n\r\nHowever, `dropna()` is going to allocate an entirely new column and copy all non-null results just to fetch a single value. The best performance would be achieved if this were implemented in libcudf using a combination of `thrust::lower_bound` for `first_valid_index` (`thrust::upper_bound` for `last_valid_index`) with a validity iterator over the null mask. This might be a reasonable scope for a small function in libcudf, perhaps defined in `cpp/include/cudf/search.hpp`.","createdAt":"2022-07-22T20:15:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/1480#issuecomment-1192903784","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5HGq4q","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Since #3754 requests `COALESCE` support for Spark I think we want a libcudf implementation that can be used by both.","createdAt":"2022-07-22T20:59:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/1480#issuecomment-1192930858","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5eAwJZ","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"I closed #3754 because Spark-RAPIDS is happy to use `replace_nulls` and no longer needs a dedicated `coalesce` function. I would be happy to solve this with either a cuDF-python change or a small libcudf function.","createdAt":"2023-06-05T18:15:25Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/1480#issuecomment-1577255513","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps59fawN","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"cf #6759 ","createdAt":"2024-05-10T23:47:09Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/1480#issuecomment-2105388045","viewerDidAuthor":false}],"createdAt":"2019-04-22T18:36:54Z","id":"MDU6SXNzdWU0MzU4MzY2OTU=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDE2MzMyOTQ4","name":"good first issue","description":"Good for newcomers","color":"7057ff"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":1480,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Implement find_valid_index and its permutations (first_ and last_)","updatedAt":"2024-05-10T23:47:10Z","url":"https://github.com/rapidsai/cudf/issues/1480"}
