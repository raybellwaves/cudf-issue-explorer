{"assignees":[],"author":{"id":"MDQ6VXNlcjMxOTA0MDU=","is_bot":false,"login":"shwina","name":"Ashwin Srinath"},"body":"This is related to https://github.com/rapidsai/cudf/issues/10408.\r\n\r\nIt's possible to use a combination of `explode()` and `groupby()` to support common aggregations on `list` columns:\r\n\r\n```python\r\nIn [23]: df\r\nOut[23]:\r\n            a\r\n0   [1, 3, 2]\r\n1      [1, 4]\r\n2  [9, 0, -1]\r\n\r\nIn [24]: df.explode('a').groupby(level=0).max()\r\nOut[24]:\r\n   a\r\n0  3\r\n1  4\r\n2  9\r\n```\r\n\r\nScans can similarly be computed via an additional call to `groupby-collect()`:\r\n\r\n```python\r\nIn [33]: df.explode('a').groupby(level=0).cummax().groupby(level=0).collect()\r\nOut[33]:\r\n           a\r\n0  [1, 3, 3]\r\n1     [1, 4]\r\n2  [9, 9, 9]\r\n```\r\n\r\nWhen an aggregation/scan supported by groupby, like `.max()` or `.min()` is called on a list column, we could transparently use this combination of explode + groupby to support that operation. That could look something like:\r\n\r\n```python\r\n>>> df\r\n            a\r\n0   [1, 3, 2]\r\n1      [1, 4]\r\n2  [9, 0, -1]\r\n\r\n>>> df['a'].list.max()\r\n0    3\r\n1    4\r\n2    9\r\nName: a, dtype: int64\r\n\r\n>>> df['a'].list.cummax()\r\n0    [1, 3, 3]\r\n1       [1, 4]\r\n2    [9, 9, 9]\r\nName: a, dtype: list\r\n```","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-04-24T19:29:51Z","id":"I_kwDOBWUGps5kP6hv","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"}],"milestone":null,"number":13208,"projectCards":[],"projectItems":[],"reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"state":"OPEN","title":"[FEA] Support aggregations/scans on lists via groupby","updatedAt":"2024-02-23T18:02:35Z","url":"https://github.com/rapidsai/cudf/issues/13208"}
