{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY1Mw==","is_bot":false,"login":"mattf","name":"Matthew Farrellee"},"body":"**Is your feature request related to a problem? Please describe.**\r\nrewriting code from pandas into cudf, using `import cudf as pd`\r\n\r\n**Describe the solution you'd like**\r\n`cudf.Timestamp` matching https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5NpvK2","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I suspect that the main reason we haven't bothered with this in the past is that it is a scalar and we tend to support `pd.Timestamp` directly in most places that would allow it so the benefits performance-wise are quite limited. Aside from strict API compatibility concerns, the one other benefit that I could see here is if `cudf.Timestamp` existed more like `cudf.Scalar` as a way to avoid needing constant H2D copies each time.\r\n\r\n@brandon-b-miller @shwina what do you think about that (in the context of previous Scalar work)?","createdAt":"2022-11-03T23:26:50Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12052#issuecomment-1302786742","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5O5-Eq","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"A `Timestamp` sounds like a `cudf.Scalar` with `dtype=datetime64[resolution]`, and we can already construct those:\r\n\r\n```python\r\n>>> cudf.Scalar(pd.Timestamp('2001-01-01 00:00:01'))\r\n>>> Scalar(2001-01-01T00:00:01.000000, dtype=datetime64[us])\r\n```\r\n\r\nSo should we just make it so that `cudf.Timestamp` is a `cudf.Scalar` (inheritance relationship)?","createdAt":"2022-11-22T15:04:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12052#issuecomment-1323819306","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5O6Cbw","author":{"login":"brandon-b-miller"},"authorAssociation":"CONTRIBUTOR","body":"I see no reason why the scalar machinery couldn't be used to back `cudf.Timestamp` from a technical perspective. \r\n\r\nOne question I would have is what would we do with the `cudf.Scalar` constructor when a timestamp is passed? Would we return a `cudf.Timestamp` at that point or would we still allow construction of a `cudf.Scalar` object of `datetime` dtype, that _isn't_ a `cudf.Timestamp`?","createdAt":"2022-11-22T15:16:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12052#issuecomment-1323837168","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5O6ESj","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"> Would we return a cudf.Timestamp at that point or would we still allow construction of a cudf.Scalar object of datetime dtype, that isn't a cudf.Timestamp?\r\n\r\nAssuming we all like the inheritance relationship, I would strongly be in favor of the latter than the former. Returning a subclass from a superclass ctor _a la_ `cudf.Index` is frustrating to support.\r\n\r\nIt doesn't feel too icky to do the latter to me. For instance, `pd.Timestamp` inherits from `datetime.datetime`, which is a fully constructible and usable type in and of itself. ","createdAt":"2022-11-22T15:21:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/12052#issuecomment-1323844771","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5PARQn","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Yeah, I'm a hard no on having `cudf.Scalar(...)` return a `cudf.Timestamp`. I'm fine with the inheritance relationship though.\r\n\r\nWhile we're at it we should also look at #5882.","createdAt":"2022-11-23T18:10:07Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12052#issuecomment-1325470759","viewerDidAuthor":false}],"createdAt":"2022-11-03T12:49:31Z","id":"I_kwDOBWUGps5Vglus","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":12052,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] cudf.Timestamp","updatedAt":"2022-11-23T18:10:07Z","url":"https://github.com/rapidsai/cudf/issues/12052"}
