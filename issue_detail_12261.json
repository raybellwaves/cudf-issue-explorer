{"assignees":[],"author":{"id":"MDQ6VXNlcjEyNzE2OTc5","is_bot":false,"login":"PointKernel","name":"Yunsong Wang"},"body":"**Is your feature request related to a problem? Please describe.**\r\n`cuco::static_map` and `cuco::static_multimap` are used to perform hash-based operations in libcudf. Depending on https://github.com/NVIDIA/cuCollections/issues/110, a lot of existing use cases could be replaced with `cuco::static_set` or `cuco:static_multiset` since the payload part in the hash map is not used.\r\n\r\nMoreover, some libcudf implementations are still using `concurrent_unordered_map` or `unordered_multiset` and they should be refactored with `cuco::static_set/multiset` as well.\r\n\r\n**Describe the solution you'd like**\r\nReplace existing implementations with new data structures like `cuco::static_set`, `cuco::static_multiset` or `cuco::static_map`.\r\n\r\nThere should also be benchmarks showing the performance changes after replacement for most works listed below.\r\nNote: under \"Related APIs\", the `ref::` prefix refers to the cuco device-side API.\r\n\r\n## Part 1: Updates ready to be addressed in libcudf\r\n|Algorithm|Desired Data Structure|Related APIs|PRs|Notes|\r\n|---|---|---|---|---|\r\n|distinct_count|`cuco::static_set`|`insert`, `insert_if`| ✅#13343 | |\r\n|orc dictionary encoding (issue #10495)|`cuco::static_map` (legacy) |`ref::insert`, `ref::find`| ✅#13580 | Similar to parquet dictionary encoding but the current implementation is still using a custom dictionary | |\r\n|byte_pair_encoding|`cuco::static_map`|`insert_async`, `ref::find`| ✅#13807 | uses heterogeneous lookup |\r\n|json_tree|`cuco::static_set`|`insert_if_async`, `ref::find`| ✅#13928 |  |\r\n|search/contains_table|`cuco::static_set`|`insert_async`, `insert_if_async`, `contains_async`, `contains_if_async` |✅#14064 | Needs migration from `cudf::detail::unordered_multiset` |\r\n|search/contains_column|`cuco::static_set`|`insert_async`, `insert_if_async`, `contains_async`| ✅#14238 | Needs migration from `cudf::detail::unordered_multiset`. `unordered_multiset` can be removed once this is done.|\r\n|hash-based groupby (issue #10401)|`cuco::static_set`|`ref::insert_and_find`, `retrieve_all`| ✅#14813 | Needs migration from `concurrent_unordered_map`|\r\n| legacy json reader | `cuco::static_map` |`insert_async`, `ref::find`| ✅ #15813 | ~Needs migration from `concurrent_unordered_map`. Looks like a rational use of hash map. To be replaced by `cuco::static_map`~ Deleted in #15813 | |\r\n| distinct | `cuco::static_set`  | | #15285  | Needs migration from `cuco::static_map` (legacy), and then in Part 2, further migration to `cuco::reduction_map` |\r\n\r\n## Part 2: Updates depending on upstream cuco changes\r\n|Algorithm|Desired Data Structure|Related APIs|PRs|Notes|\r\n|---|---|---|---|---|\r\n| semi/anti joins | `cuco::static_set` ? could be ready today for migration, but might need `cuco::static_multiset` updates first |  | TBD | see #9973. currently using `cuco::static_multimap` (legacy) |\r\n| joins |  `cuco::static_multiset` | `count`, `count_outer`, `retrieve`, `retrieve_outer`| `insert_async`, `insert_if_async` | Needs migration from `cuco::static_multimap` (legacy) Related issues: #11176, #13116 |\r\n| mixed joins |  `cuco::static_multiset` | see \"joins\" | TBD | Needs migration from `cuco::static_multimap` (legacy) |\r\n| parquet dictionary encoding | `cuco::static_map`  (experimental)  | probably unblocked? | `ref::insert`, `ref::find` | Needs migration from `cuco::static_map` (legacy) |\r\n| orc dictionary encoding |`cuco::static_map` (experimental) | probably unblocked?  | `ref::insert`, `ref::find` | Needs migration from `cuco::static_map` (legacy)  | |\r\n| distinct | `cuco::static_reduction_map` | | TBD  |  see #13157. Reduction map not yet implemented in cuco, could just have `cuco::static_map` specialization with a new API \"insert_or_apply\" |\r\n\r\n\r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2022-11-29T23:23:28Z","id":"I_kwDOBWUGps5XjJVG","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3NTAz","name":"2 - In Progress","description":"Currently a work in progress","color":"fef2c0"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwyNTQ2NTIxMDI0","name":"improvement","description":"Improvement / enhancement to an existing function","color":"bfd4f2"}],"milestone":{"number":18,"title":"Refactor using cuco containers","description":"","dueOn":null},"number":12261,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[{"content":"HEART","users":{"totalCount":6}}],"state":"OPEN","title":"[FEA] Refactor hash-based algorithms with new cuco data structures","updatedAt":"2024-05-26T03:09:28Z","url":"https://github.com/rapidsai/cudf/issues/12261"}
