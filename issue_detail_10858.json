{"assignees":[{"id":"MDQ6VXNlcjQ1Nzk1OTkx","login":"davidwendt","name":"David Wendt"}],"author":{"id":"MDQ6VXNlcjI2MTY5Nzcx","is_bot":false,"login":"miguelusque","name":"Miguel MartÃ­nez"},"body":"**Describe the bug**\r\nHi, I am facing the following OOM when invoking normalize_characters() on a relatively small dataset, which uses less than 2 GB of VRAM on a 16GB v100.\r\n\r\nIn case it helps, normalize_spaces() works without issues in the same dataframe.\r\n\r\nPlease, find below how to reproduce it.\r\n \r\n![image](https://user-images.githubusercontent.com/26169771/168416343-b712b4bf-e92b-44b4-babb-6f303130a87e.png)\r\n\r\n**Steps/Code to reproduce bug**\r\n\r\n> import cudf\r\n> import pandas as pd\r\n> \r\n> df = cudf.DataFrame({\"text\": pd.util.testing.rands_array(256, 5000000)})\r\n> #df[\"text\"] = df[\"text\"].str.normalize_spaces()\r\n> df[\"text\"] = df[\"text\"].str.normalize_characters(do_lower=False)\r\n> \r\n\r\n**Expected behavior**\r\nNo OOM\r\n\r\n**Environment overview (please complete the following information)**\r\n - Environment location: [Bare-metal, Docker, Cloud(specify cloud provider)]\r\n - Method of cuDF install: [conda, Docker, or from source]\r\n   - If method of install is [Docker], provide `docker pull` & `docker run` commands used\r\n\r\n**Environment details**\r\nDGX-v100, cudf 22.04\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5DNsSz","author":{"login":"shwina"},"authorAssociation":"CONTRIBUTOR","body":"cc: @davidwendt is this currently expected memory overhead?","createdAt":"2022-05-16T13:17:56Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-1127662771","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5DOJKz","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"Yes, this is the expected memory overhead. From what I can tell, the working memory size math looks like the following:\r\n```\r\n(bytes  * 3 * sizeof(uint32)) +  (bytes * sizeof(uint32)) = (bytes * 12) + (bytes * 4) = bytes * 16\r\nwhere bytes = number of bytes in the chars child column\r\n```\r\nSo the working memory required is ~16x the number of bytes in the strings column.\r\nThis does not include any working memory required by various thrust calls or the size of the output column.\r\nMy recommendation would be to slice the column and then call normalize on the slices. \r\nUse the 16x math to help determine the slices.\r\n","createdAt":"2022-05-16T14:57:25Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-1127781043","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5E8vi5","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-06-15T18:03:11Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-1156774073","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5FgxOv","author":{"login":"miguelusque"},"authorAssociation":"MEMBER","body":"Hi! \r\n\r\nI think this issue is still relevant. IMHO, a 16x memory requirement for a normalize characters operation is a bit high.\r\n\r\nCould anyone please consider an alternative implementation? Thanks!","createdAt":"2022-06-25T07:46:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-1166218159","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5HJrYi","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-07-25T08:03:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-1193719330","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-OYOW","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"@davidwendt I see that you've assigned yourself, did you spend any time considering alternative implementations here? Is this an issue for which you think we could use memory more sparingly with a suitable alternative implementation, or is there some fundamental blocker that would make this unfixable?","createdAt":"2024-05-17T14:10:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-2117698454","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-Rv4L","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"Yes, I believe there are alternative implementations that could reduce memory usage.\r\nThere is no fundamental blocker -- just priority and time. ","createdAt":"2024-05-18T01:59:03Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-2118581771","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5-cQRV","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Cool. Marking as backlogged.","createdAt":"2024-05-20T22:41:54Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10858#issuecomment-2121335893","viewerDidAuthor":false}],"createdAt":"2022-05-14T07:50:56Z","id":"I_kwDOBWUGps5JqnKw","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxNTE1NjE2MjUz","name":"strings","description":"strings issues (C++ and Python)","color":"0e8a16"}],"milestone":{"number":20,"title":"Stabilizing large workflows (OOM, spilling, partitioning)","description":"","dueOn":null},"number":10858,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] OOM when invoking normalize_characters on a relatively small dataframe","updatedAt":"2024-05-20T22:41:59Z","url":"https://github.com/rapidsai/cudf/issues/10858"}
