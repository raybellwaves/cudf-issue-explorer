{"assignees":[],"author":{"id":"MDQ6VXNlcjMyMTY2MjU3","is_bot":false,"login":"JacoCheung","name":"Junzhang"},"body":"**Describe the bug**\r\nHi teams. I'm from HugeCTR team. I know that`libcudf::read_parquet()` is gpu-accelerated and I'm using it to load data for my application. Recently, I found out `arrow` also has implemented a file_reader which is a cpu reader. I have some performance results for both readers, and the cudf performance seems not promising. I have tested on 3 datasets, and the row_group distributition is illustrated in the left table. For arrow reader, I was parallelizing the reading of each columnchunk. The result demonstrated that for all three files, the arrow was much faster than cudf, 6x for criteo  in particular. The criteo is a prevalent dataset used in recommendation system.\r\n\r\n![image](https://user-images.githubusercontent.com/32166257/210726184-b360cdcb-bd2d-48a8-998f-6da32fd9cb20.png)\r\n\r\nFor both readers, I used c++ api to read data. \r\n\r\n**Steps/Code to reproduce bug**\r\n\r\nSince I was using the C++ api, so one has to compile following two code snippets manually,\r\nThe files linked to are actually cpp source files (Sorry for the file suffix). The compiling command is prepended in the source files. \r\n[read_arrow.txt](https://github.com/rapidsai/cudf/files/10350353/read_arrow.txt)\r\n[read_cudf.txt](https://github.com/rapidsai/cudf/files/10350354/read_cudf.txt)\r\n\r\nAfter compilation, running the executables:\r\n- Running arrow reader: `./arrow_parquet <filepath> false`\r\n- Running cudf reader: `./cudf_parquet <filepath>`\r\n\r\n**Expected behavior**\r\nMore performant data reading.\r\n\r\n**Environment overview**\r\nI was using Selene cluster (DGX-A100). Docker image [dockerfile](https://github.com/NVIDIA-Merlin/Merlin/blob/v22.12.00/docker/dockerfile.merlin)\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5X3VPK","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thanks @JacoCheung for sharing these results.\r\n\r\n* Would you please explain the \"features\" and \"row_group\" information in the table you shared above? I'm not sure how to interpret this information. I would like to convert it to a list of the columns and their types to better evaluate your observations.\r\n* Did you perform OS cache clearing before each read operation? Generally we recommend this to make sure the order of read operations does not impact the speed of each operation.\r\n* Would you please share nsys profiles of the 'criteo' data set in particular? (If you like we can follow up on profile or dataset exchange on Slack?)\r\n* It looks like you are using the RMM pool - that's great! How does the CUDA memory resource compare?","createdAt":"2023-03-17T16:51:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12479#issuecomment-1474122698","viewerDidAuthor":false}],"createdAt":"2023-01-05T08:10:28Z","id":"I_kwDOBWUGps5ancTg","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":{"number":22,"title":"Parquet continuous improvement","description":"","dueOn":null},"number":12479,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] libcudf::read_parquet performance worse than arrow::file_reader","updatedAt":"2024-02-16T23:28:59Z","url":"https://github.com/rapidsai/cudf/issues/12479"}
