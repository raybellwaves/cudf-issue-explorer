{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MjIxMjg5","is_bot":false,"login":"jrhemstad","name":"Jake Hemstad"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\n`--expt-relaxed-constexpr` is a convenient way to reuse existing `constexpr` host code, e.g., things like `std::max`.\r\n\r\nHowever, it can lead to some pretty surprising behavior. Consider:\r\n\r\n```\r\nconstexpr int bar(int j){\r\n    if(j<0){\r\n        throw;\r\n    }\r\n    return 42;\r\n}\r\n__global__ void kernel(int * i){\r\n    *i = bar(-1);\r\n}\r\n```\r\n\r\nhttps://godbolt.org/z/frb8c6cd7\r\n\r\nOne might expect this to fail to compile as `throw` is not valid in device code. However, not only does it happily compile, but it just stores the value 42. \r\n\r\nThis example looks pretty harmless:\r\n```\r\nint foo(int i){\r\n    return i * 2;\r\n}\r\nconstexpr int bar(int j){\r\n    if(j<0){\r\n        return foo(j);\r\n    }\r\n    return 42;\r\n}\r\n__global__ void kernel( int * i){\r\n    *i = bar(-1);\r\n}\r\n```\r\nBut this too results in an ill-formed program without a diagnostic.\r\n\r\nhttps://godbolt.org/z/aTzGaMrGd\r\n\r\n**Describe the solution you'd like**\r\n\r\nWe should think pretty hard about if we want to risk such egregious undefined behavior in libcudf. \r\n\r\nAs such, we may want to consider moving towards disabling `--expt-relaxed-constexpr`. At the very least, we should be preferring `CUDA_HOST_DEVICE_CALLABLE` whenever possible (for functions that need be called from both host and device). \r\n\r\n**Additional Context**\r\n\r\nThe only place it is 100% safe to use a `constexpr` function in device code with `--expt-relaxed-constexpr` is when used in a context that requires constant evaluation. Then it will fail to compile if the `constexpr` function contains things that would result in an ill-formed program: https://godbolt.org/z/47qfnPnc9","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDgxMTU4Njk3OQ==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"@karthikeyann please be aware of this with respect to #7713 ","createdAt":"2021-04-01T02:13:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7795#issuecomment-811586979","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgxMTU4NzQxMQ==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"> At the very least, we should be preferring CUDA_HOST_DEVICE_CALLABLE whenever possible.\r\n\r\nNo, we should prefer `CUDA_DEVICE_CALLABLE` or no annotation whenever possible. We should use `CUDA_HOST_DEVICE_CALLABLE` only for functions that are required to be called from both host and device.","createdAt":"2021-04-01T02:14:57Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7795#issuecomment-811587411","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgxMTkyMDA3Nw==","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"\r\n> only for functions that are required to be called from both host and device.\r\n\r\nThis was implied. The whole point of `--expt-relaxed-constexpr` is to call existing host `constexpr` functions from device, which implies it can be/is called from both host and device. ","createdAt":"2021-04-01T13:46:47Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7795#issuecomment-811920077","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgxMzM2MjI3OA==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"I want to be very explicit because it is not obvious to everyone (a fact that is evident in our code).","createdAt":"2021-04-05T12:09:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}},{"content":"HEART","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/7795#issuecomment-813362278","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzMjY0NTQ5NA==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-05-05T12:25:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7795#issuecomment-832645494","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgzMzE1MjM0Nw==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Still valid","createdAt":"2021-05-06T01:08:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7795#issuecomment-833152347","viewerDidAuthor":false}],"createdAt":"2021-03-31T20:14:16Z","id":"MDU6SXNzdWU4NDcyNTk4NjQ=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":null,"number":7795,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Consider disabling `--expt-relaxed-constexpr`","updatedAt":"2024-02-23T17:59:28Z","url":"https://github.com/rapidsai/cudf/issues/7795"}
