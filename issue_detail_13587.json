{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"As noted by [@harrism in #13577](https://github.com/rapidsai/cudf/pull/13577#discussion_r1230283942_).\r\n \r\n> I would agree with you @bdice  if `size_in_bits` took a size in bytes argument. But as it is, you have to write `data_buffer->size() * size_in_bits<std::byte>()`, which is kinda dumb.  `size_in_bits(data_buffer->size())` would be OK.  I think `* CHAR_BIT` is OK too.\r\n\r\nThis could be solved by removing the template argument from `size_in_bits` and just implementing it as a `constexpr` function that multiplies its argument by `CHAR_BIT`. All of the usages in `static_assert`s would still work (since the call would just change from `size_in_bits<T>()` to `size_in_bits(sizeof(T))`).","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-06-19T08:50:37Z","id":"I_kwDOBWUGps5pFhvO","labels":[],"milestone":null,"number":13587,"projectCards":[],"projectItems":[],"reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"state":"OPEN","title":"Let `size_in_bits` take a `bytes` argument, rather than just being a templated function to multiply `sizeof(T)` by `CHAR_BIT`.","updatedAt":"2023-06-19T08:50:37Z","url":"https://github.com/rapidsai/cudf/issues/13587"}
