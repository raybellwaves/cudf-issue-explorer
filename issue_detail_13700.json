{"assignees":[],"author":{"id":"MDQ6VXNlcjIxOTczNDY0","is_bot":false,"login":"gaohao95","name":""},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\n`cudf::hash_join` makes it possible to build the hash table once and probe it multiple times. But it only supports inner join, left join and full join. I wish `cudf::hash_join` can support left-semi and left-anti join as well.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5iJiB_","author":{"login":"GregoryKimball"},"authorAssociation":"CONTRIBUTOR","body":"Thank you @gaohao95 for suggesting this. We will do some scoping and return to this request.","createdAt":"2023-07-22T20:28:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13700#issuecomment-1646665855","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5iQbk8","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"There are some important limitations to be aware of.\r\n- Conceptually, semi/anti joins actually use a different data structure than inner/left/full joins (maps vs multimaps). The reason is that with inner/left/full joins each row in one table could corresponding to multiple rows in the other table, i.e. the multimap supports non-unique keys. Therefore, the reuse would be limited between two disjoint sets of APIs: semi_join could reuse a map built for anti_join and vice versa, but it could not use a multimap built for inner/left/full joins.\r\n- The current implementation of semi/anti joins relies internally on `cudf::contains`, which is what builds the hash map internally. Therefore, beyond the previous conceptual limitation, supporting this functionality would also require a deeper refactor to expose the hash table in some way.\r\n- There is ongoing work to refactor cuco data structures and expand their usage within libcudf. I would not recommend making any changes to the join APIs until that work is further along.","createdAt":"2023-07-24T19:16:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13700#issuecomment-1648474428","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5iQtYE","author":{"login":"gaohao95"},"authorAssociation":"CONTRIBUTOR","body":"Thanks @vyasr! Those are good points!\r\n\r\n> Therefore, the reuse would be limited between two disjoint sets of APIs: semi_join could reuse a map built for anti_join and vice versa, but it could not use a multimap built for inner/left/full joins.\r\n\r\nIn my use case (broadcast join) this is fine. An object is only needed to probe a single join type.\r\n\r\n> There is ongoing work to refactor cuco data structures and expand their usage within libcudf. I would not recommend making any changes to the join APIs until that work is further along.\r\n\r\nThis is not a blocker for us so we can wait.","createdAt":"2023-07-24T20:19:23Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13700#issuecomment-1648547332","viewerDidAuthor":false}],"createdAt":"2023-07-16T00:38:38Z","id":"I_kwDOBWUGps5rqzba","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":27,"title":"Joins continuous improvement","description":"","dueOn":null},"number":13700,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Support left-semi and left-anti joins in `cudf::hash_join`","updatedAt":"2023-07-24T20:19:24Z","url":"https://github.com/rapidsai/cudf/issues/13700"}
