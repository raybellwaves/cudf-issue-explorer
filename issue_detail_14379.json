{"assignees":[],"author":{"id":"MDQ6VXNlcjEwNjQ3MDgy","is_bot":false,"login":"mroeschke","name":"Matthew Roeschke"},"body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently when using `cudf.pandas`,  there's no way to capture or act on the cudf exception thrown whether the operation succeeds or fails on during the pandas path.\r\n\r\n```python\r\nIn [1]: %load_ext cudf.pandas\r\n\r\nIn [2]: import pandas as pd\r\n\r\nIn [3]: try:\r\n   ...:    pd.to_datetime(\"2020-01-01\", utc=True)\r\n   ...: except NotImplementedError:\r\n   ...:     print(\"hello\")\r\n\r\nIn [4]: import cudf\r\n\r\nIn [5]: cudf.to_datetime(\"2020-01-01\", utc=True)\r\nNotImplementedError: utc is not yet implemented\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nIf `_fast_slow_function_call` was structured like:\r\n\r\n```python\r\nIn [8]: def f():\r\n   ...:     try:\r\n   ...:         raise NotImplementedError(\"fast doesn't work\")\r\n   ...:     except Exception as err_fast:\r\n   ...:         try:\r\n   ...:             raise ValueError(\"Slow doesn't work\")\r\n   ...:         except Exception as err_slow:\r\n   ...:             raise ExceptionGroup(\"Fast and slow did't work\", [err_fast, err_slow])\r\n   ...: \r\n\r\nIn [9]: f()\r\nTraceback (most recent call last):\r\n  File \"<ipython-input-8-f0c78d1a1137>\", line 6, in f\r\n    raise ValueError(\"Slow doesn't work\")\r\nValueError: Slow doesn't work\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n  + Exception Group Traceback (most recent call last):\r\n  |   File \"/opt/miniconda3/envs/pandas-dev/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3548, in run_code\r\n  |     exec(code_obj, self.user_global_ns, self.user_ns)\r\n  |   File \"<ipython-input-9-c43e34e6d405>\", line 1, in <module>\r\n  |     f()\r\n  |   File \"<ipython-input-8-f0c78d1a1137>\", line 8, in f\r\n  |     raise ExceptionGroup(\"Fast and slow did't work\", [err_fast, err_slow])\r\n  | ExceptionGroup: Fast and slow did't work (2 sub-exceptions)\r\n  +-+---------------- 1 ----------------\r\n    | Traceback (most recent call last):\r\n    |   File \"<ipython-input-8-f0c78d1a1137>\", line 3, in f\r\n    |     raise NotImplementedError(\"fast doesn't work\")\r\n    | NotImplementedError: fast doesn't work\r\n    +---------------- 2 ----------------\r\n    | Traceback (most recent call last):\r\n    |   File \"<ipython-input-8-f0c78d1a1137>\", line 6, in f\r\n    |     raise ValueError(\"Slow doesn't work\")\r\n    | ValueError: Slow doesn't work\r\n    +------------------------------------\r\n\r\nIn [10]: try:\r\n    ...:     f()\r\n    ...: except* NotImplementedError:\r\n    ...:     print(\"Try doing something else\")\r\n    ...: \r\nTry doing something else\r\n  + Exception Group Traceback (most recent call last):\r\n  |   File \"/opt/miniconda3/envs/pandas-dev/lib/python3.11/site-packages/IPython/core/interactiveshell.py\", line 3548, in run_code\r\n  |     exec(code_obj, self.user_global_ns, self.user_ns)\r\n  |   File \"<ipython-input-10-e0e980fb6b7c>\", line 2, in <module>\r\n  |     f()\r\n  |   File \"<ipython-input-8-f0c78d1a1137>\", line 8, in f\r\n  |     raise ExceptionGroup(\"Fast and slow did't work\", [err_fast, err_slow])\r\n  | ExceptionGroup: Fast and slow did't work (1 sub-exception)\r\n  +-+---------------- 1 ----------------\r\n    | Traceback (most recent call last):\r\n    |   File \"<ipython-input-8-f0c78d1a1137>\", line 3, in f\r\n    |     raise NotImplementedError(\"fast doesn't work\")\r\n    | NotImplementedError: fast doesn't work\r\n    | \r\n    | During handling of the above exception, another exception occurred:\r\n    | \r\n    | Traceback (most recent call last):\r\n    |   File \"<ipython-input-8-f0c78d1a1137>\", line 6, in f\r\n    |     raise ValueError(\"Slow doesn't work\")\r\n    | ValueError: Slow doesn't work\r\n    +------------------------------------\r\n```\r\n\r\n**Additional context**\r\n\r\nAdmittedly I don't have a definitive use case where capturing the cudf exception is necessary, and using ExceptionGroup might break \"drop in replacement\" potential of `cudf.pandas`, but noting that this is a limitation in the current design  \r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-11-08T23:12:38Z","id":"I_kwDOBWUGps52Sc5Q","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"LA_kwDOBWUGps8AAAABlj4eYg","name":"cudf.pandas","description":"Issues specific to cudf.pandas","color":"984DFB"}],"milestone":{"number":35,"title":"Proxying - cudf.pandas","description":"","dueOn":null},"number":14379,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Allow capturing cudf specific exceptions in `cudf.pandas` by using ExceptionGroup in Python 3.11","updatedAt":"2024-04-15T18:09:40Z","url":"https://github.com/rapidsai/cudf/issues/14379"}
