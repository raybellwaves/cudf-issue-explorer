{"assignees":[{"id":"MDQ6VXNlcjU2MDczMzA=","login":"mythrocks","name":"MithunR"}],"author":{"id":"MDQ6VXNlcjU2MDczMzA=","is_bot":false,"login":"mythrocks","name":"MithunR"},"body":"This is a follow-up item that arose from https://github.com/rapidsai/cudf/pull/13727.\r\n\r\nIt turns out that `COUNT_ALL` and `COUNT_VALID` are not supported in `cudf::reduce()` as `reduce_aggregation`s.\r\n(This is likely because their values can trivially computed from the results of `column::size()` and `column::null_count()`.)\r\n\r\nHowever, this causes obfuscation in any code that attempts to dispatch reduce aggregations generically. E.g. [Here](https://github.com/rapidsai/cudf/pull/13727/files#diff-ee2fd30f5a96f800a146b5b8262244eeb73a7758834b6ff41f9b4343fe281c56R133).\r\n\r\nIt would be good to have `cudf::reduce()` support `COUNT_ALL` and `COUNT_VALID` natively, so as not to require special handling in the calling code.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5i2zDf","author":{"login":"davidwendt"},"authorAssociation":"CONTRIBUTOR","body":"I disagree with this change. I think [`cudf::reduce`](https://docs.rapids.ai/api/libcudf/stable/group__aggregation__reduction.html#ga48cc284a9371891975a6219cd3d2e36e) has become too monolithic and difficult to maintain as more aggregations are added. Special rules have to be applied and adjusted (and documented) concerning combinations of parameters and parameter types. For example, certain aggregations do not accept `init` values and others only accept specific `output_type`s.\r\n\r\nI'd like to see libcudf split up the reduce algorithms into functional names like `cudf::reduction::any(), cudf::reduction::all(), cudf::reduction::max(), etc`\r\nInternally the reduce/aggregation types are implemented as `cudf::reduction::detail::any(), cudf::reduction::detail::all(), cudf::reduction::detail::max(), etc`\r\nThis will make it easier to maintain and document as well as add new reductions in the future without breaking the monolithic API. I can open a separate issue to further discuss this more practically. \r\n\r\nRegardless, I don't think we should provide a convenience wrapper on the existing `cudf::column::size()` or `cudf::column::null_count()`","createdAt":"2023-07-31T14:52:20Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13756#issuecomment-1658532063","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5jGZnw","author":{"login":"mythrocks"},"authorAssociation":"CONTRIBUTOR","body":"Thank you for your perspective, @davidwendt.\r\n\r\n> Special rules have to be applied and adjusted (and documented) concerning combinations of parameters and parameter types. \r\n\r\nI see what you mean.\r\n\r\nWhat's your view on the code such as the following?\r\n```c++\r\n  auto const reduce_results = [&] {\r\n    auto const return_dtype = cudf::detail::target_type(input.type(), aggr.kind);\r\n    if (aggr.kind == aggregation::COUNT_ALL) {\r\n      return cudf::make_fixed_width_scalar(input.size(), stream);\r\n    } else if (aggr.kind == aggregation::COUNT_VALID) {\r\n      return cudf::make_fixed_width_scalar(input.size() - input.null_count(), stream);\r\n    } else {\r\n      return cudf::reduction::detail::reduce(input,\r\n                                             *convert_to<cudf::reduce_aggregation>(aggr),\r\n                                             return_dtype,\r\n                                             std::nullopt,\r\n                                             stream,\r\n                                             rmm::mr::get_current_device_resource());\r\n    }\r\n  }();\r\n```\r\nThis is the special-casing that I would like to avoid.  If `cudf::reduce()` worked with `COUNT`, there would be less friction here.\r\n\r\nCC @harrism (who had advice on this in the past).","createdAt":"2023-08-02T17:09:53Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13756#issuecomment-1662622192","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5jGkNn","author":{"login":"ttnghia"},"authorAssociation":"CONTRIBUTOR","body":"From my perspective, putting the commonly used feature at the lower level (libcudf) is better than at the application level. Why? Because we can just call libcudf API and avoid reimplementing that same feature multiple times in multiple applications, even such implementation is very simple.","createdAt":"2023-08-02T17:29:31Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13756#issuecomment-1662665575","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5jGniP","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"If we were able to eliminate the enum `aggregation::Kind` by moving to a functional interface like `cudf::reduction::any()` then I would support the expectation that users should call `cudf::column::size()` as @davidwendt proposes. We wouldn't need a `cudf::reduction::count()`. I think that this interface is the direction we ought to go, but I haven't scoped any of what that work would require.\r\n\r\nHowever, as it stands with `aggregation::Kind` today, I am not a fan of a design that allows only certain aggregations to be used as a reduction. If the reduction API accepts an enum `aggregation::Kind`, it should support all values of that enum (to the extent possible) even if they are redundant with an existing function, for \"application level\" / \"special casing\" reasons as @ttnghia and @mythrocks pointed out above.\r\n\r\nGiven the tension between these two potential next steps, I would encourage spending more effort towards the functional API that @davidwendt proposed, but I wouldn't oppose expanding the existing reduction API's `aggregation::Kind` support if we think there is enough justification, particularly potential for reuse in other parts of libcudf's aggregation code paths.","createdAt":"2023-08-02T17:39:45Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13756#issuecomment-1662679183","viewerDidAuthor":false}],"createdAt":"2023-07-25T22:42:31Z","id":"I_kwDOBWUGps5sjmu9","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":28,"title":"Aggregations continuous improvement","description":"","dueOn":null},"number":13756,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Support `COUNT_ALL` and `COUNT_VALID` as `reduce` aggregations","updatedAt":"2023-08-18T16:17:24Z","url":"https://github.com/rapidsai/cudf/issues/13756"}
