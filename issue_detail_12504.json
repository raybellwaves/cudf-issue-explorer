{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY1Mw==","is_bot":false,"login":"mattf","name":"Matthew Farrellee"},"body":"**Describe the bug**\r\nrewriting code with `import cudf as pd`\r\n\r\n**Steps/Code to reproduce bug**\r\n```\r\nIn [1]: import cudf as pd\r\n\r\nIn [2]: pd.__version__\r\nOut[2]: '22.12.0'\r\n\r\nIn [3]: df = pd.DataFrame(columns=['a'])\r\n\r\nIn [4]: df.loc[0] = [1]\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\nCell In [4], line 1\r\n----> 1 df.loc[0] = [1]\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/dataframe.py:149, in _DataFrameIndexer.__setitem__(self, key, value)\r\n    147 if not isinstance(key, tuple):\r\n    148     key = (key, slice(None))\r\n--> 149 return self._setitem_tuple_arg(key, value)\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/dataframe.py:393, in _DataFrameLocIndexer._setitem_tuple_arg(self, key, value)\r\n    386 # Otherwise, there are two situations. The key on row axis\r\n    387 # can be a scalar or 1d. In either of the situation, the\r\n    388 # ith element in value corresponds to the ith row in\r\n    389 # the indexed object.\r\n    390 # If the key is 1d, a broadcast will happen.\r\n    391 else:\r\n    392     for i, col in enumerate(columns_df._column_names):\r\n--> 393         self._frame[col].loc[key[0]] = value[i]\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/series.py:285, in _SeriesLocIndexer.__setitem__(self, key, value)\r\n    283     value = cudf.Series(value)\r\n    284     value = value._align_to_index(self._frame.index, how=\"right\")\r\n--> 285 self._frame.iloc[key] = value\r\n\r\nFile ~/.local/lib/python3.9/site-packages/nvtx/nvtx.py:101, in annotate.__call__.<locals>.inner(*args, **kwargs)\r\n     98 @wraps(func)\r\n     99 def inner(*args, **kwargs):\r\n    100     libnvtx_push_range(self.attributes, self.domain.handle)\r\n--> 101     result = func(*args, **kwargs)\r\n    102     libnvtx_pop_range(self.domain.handle)\r\n    103     return result\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/series.py:236, in _SeriesIlocIndexer.__setitem__(self, key, value)\r\n    231     if to_dtype != self._frame._column.dtype:\r\n    232         self._frame._column._mimic_inplace(\r\n    233             self._frame._column.astype(to_dtype), inplace=True\r\n    234         )\r\n--> 236 self._frame._column[key] = value\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/column/column.py:496, in ColumnBase.__setitem__(self, key, value)\r\n    494     if not isinstance(key, cudf.core.column.NumericalColumn):\r\n    495         raise ValueError(f\"Invalid scatter map type {key.dtype}.\")\r\n--> 496     out = self._scatter_by_column(key, value_normalized)\r\n    498 if out:\r\n    499     self._mimic_inplace(out, inplace=True)\r\n\r\nFile ~/.local/lib/python3.9/site-packages/cudf/core/column/column.py:580, in ColumnBase._scatter_by_column(self, key, value)\r\n    576     return libcudf.copying.boolean_mask_scatter([value], [self], key)[\r\n    577         0\r\n    578     ]._with_type_metadata(self.dtype)\r\n    579 else:\r\n--> 580     return libcudf.copying.scatter([value], key, [self])[\r\n    581         0\r\n    582     ]._with_type_metadata(self.dtype)\r\n\r\nFile /usr/lib/python3.9/contextlib.py:79, in ContextDecorator.__call__.<locals>.inner(*args, **kwds)\r\n     76 @wraps(func)\r\n     77 def inner(*args, **kwds):\r\n     78     with self._recreate_cm():\r\n---> 79         return func(*args, **kwds)\r\n\r\nFile copying.pyx:265, in cudf._lib.copying.scatter()\r\n\r\nIndexError: index out of bounds for column of size 0\r\n\r\nIn [5]: pdf = df.to_pandas()\r\n\r\nIn [6]: pdf\r\nOut[6]: \r\nEmpty DataFrame\r\nColumns: [a]\r\nIndex: []\r\n\r\nIn [7]: pdf.loc[0] = [1]\r\n\r\nIn [8]: pdf\r\nOut[8]: \r\n   a\r\n0  1\r\n```\r\n\r\n\r\n**Expected behavior**\r\nsame behavior as `import pandas as pd`\r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-01-09T21:16:15Z","id":"I_kwDOBWUGps5a-g3D","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":12504,"projectCards":[{"project":{"name":"Bug Squashing"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] IndexError during assignment through loc[]","updatedAt":"2023-06-06T03:54:35Z","url":"https://github.com/rapidsai/cudf/issues/12504"}
