{"assignees":[{"id":"MDQ6VXNlcjczMDQ1ODI=","login":"shrshi","name":"Shruti Shivakumar"}],"author":{"id":"MDQ6VXNlcjEyNzI1MTEx","is_bot":false,"login":"GregoryKimball","name":"Gregory Kimball"},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nFirst pass changes:\r\n- [ ] I believe [this line](https://github.com/rapidsai/cudf/blob/bb6ae07079f3c36dca8387bab578b75d06be6b33/cpp/benchmarks/io/json/nested_json.cpp#L91) in the benchmark `nested_json.cpp` should use `max_list_size` instead of `max_struct_size`. We should also add `int64` nvbench axes for these two size values, sticking with a standard value of `{10}`, and adding the ability to sweep these parameters in custom tests.\r\n- [ ] Add JSON versus JSON Lines benchmark. We have a `parquet_reader_options` benchmark and we could add something similar e.g. `json_reader_options`. This benchmark can start by choosing a single data type and a device buffer data source. As a follow-on step we would want to allow data type and IO source to be nvbench enum axes.\r\n- [ ] Add `_normalize_single_quotes` and `_normalize_whitespace` to the `json_reader_options` benchmark. Since the JSON writer can't generate single quotes or extra whitespace, these normalization steps will not change the resulting table, but we should track the added runtime.\r\n- [ ] Add `_recovery_mode` and `_mixed_types_as_string` to the `json_reader_options` benchmark as \"no-op\" tests. The benchmark would use the the existing data generator without invalid records and without mixed types.\r\n- [ ] Add post-processing to the generated data to introduce mixed types, and then benchmark against similar data without mixed types. The approach could be using the existing data generator, but then changing one list entry into a struct entry, e.g. `[1,2,3]` => `{\"a\": [1,2,3]}`\r\n\r\nLower priority ideas. If we have reason to believe these benchmarks would highlight performance issues, then we should raise their priority.\r\n- [ ] For the quote and whitespace normalization options, create a modified data generator or character buffer post-processing to introduce un-normalized data. For instance, we could replace `\"` with `'` for quote normalization and `:` with ` : ` for whitespace normalization.\r\n- [ ] Update the data generator to introduce invalid JSON lines and exercises the `_recovery_mode` as nulls code path. We could add a fraction of invalid records as well as valid records followed by invalid characters.\r\n- [ ] Add a normalization benchmark into the `benchmarks/io/json/` suite that measures the runtime of `detail::normalize_single_quotes` and the upcoming detil API for whitespace normalization. This benchmark would not test the overall reader, but only the FST-based normalization functions.\r\n\r\n","closed":false,"closedAt":null,"comments":[],"createdAt":"2024-02-13T21:15:10Z","id":"I_kwDOBWUGps5_JR0n","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3NDE3","name":"1 - On Deck","description":"To be worked on next","color":"bfd4f2"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTg1MjQ0MTQy","name":"cuIO","description":"cuIO issue","color":"fef2c0"},{"id":"MDU6TGFiZWwxNDA1MTQ2OTc1","name":"Spark","description":"Functionality that helps Spark RAPIDS","color":"7400ff"}],"milestone":{"number":13,"title":"Nested JSON reader","description":"Data-parallel reader for nested JSON text data","dueOn":null},"number":15041,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Update JSON reader benchmarks to include JSON lines and normalization","updatedAt":"2024-03-06T22:50:53Z","url":"https://github.com/rapidsai/cudf/issues/15041"}
