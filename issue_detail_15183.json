{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\npylibcudf objects support many of the standard operations that Python objects expect to work via dunder methods that map to language operator -- such as `len(x) == x.__len__()` -- via methods instead. The reason for preferring methods is that methods are typed and as such are preferable in pure Cython contexts because they can immediately produce typed outputs and because they can avoid Python function call overhead when invoked on Cython-typed inputs. The downside of this approach is that when pylibcudf is used as a Python library it is more verbose and less idiomatic to have to use `col.size()` than `len(col)`. \r\n\r\n**Describe the solution you'd like**\r\nI'm not entirely convinced that implementing all operators is worthwhile given the potential (albeit minor) typing issues/performance footguns it introduces in Cython code, but I think we should at least consider it and can use this issue to document our conclusions one way or another. If we do choose to move forward, I think it makes sense to implement things like binary operators on Columns and Scalars. Tables are a harder sell; most likely we will only want to implement simple operators like `len` and require users to manually handle binary operations on a per-column basis since the isomorphism between a Table and a 2D array is weak at best and binary operations likely have far too many edge cases to be worth pursuing.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps52f_gT","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"wrt binops on columns, adding some sugar in the python wrappers is probably not a big deal. However, usage would likely be quite noisy, since I would not want to add dtype casting to the magic, so users would probably have to do `a = plc.unary.cast(a) + b` anyway ","createdAt":"2024-03-11T10:31:05Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15183#issuecomment-1988098067","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps52-GTH","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Agreed, pylibcudf should have no hidden performance traps.","createdAt":"2024-03-13T22:19:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15183#issuecomment-1995990215","viewerDidAuthor":false}],"createdAt":"2024-02-28T23:55:40Z","id":"I_kwDOBWUGps6AwDAB","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"LA_kwDOBWUGps8AAAABoeP23w","name":"pylibcudf","description":"Issues specific to the pylibcudf package","color":"e99695"}],"milestone":null,"number":15183,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Consider implementing standard operators on pylibcudf Columns, Scalars, and possibly Tables","updatedAt":"2024-05-28T23:33:45Z","url":"https://github.com/rapidsai/cudf/issues/15183"}
