{"assignees":[{"id":"MDQ6VXNlcjQ1Nzk1OTkx","login":"davidwendt","name":"David Wendt"}],"author":{"id":"MDQ6VXNlcjM5NDM3NjE=","is_bot":false,"login":"bdice","name":"Bradley Dice"},"body":"This is issue contains a few proposals for improving the segmented reduction code introduced in #9621.\r\n\r\n## Investigate sort-groupby aggregations\r\n(Idea from @ttnghia)\r\n\r\nWith the ability to perform segmented reductions, sort-based groupby may be able to use [`group_offsets`](https://github.com/rapidsai/cudf/blob/57ff6f55b9fd44e8a8e10282d3f95d5f38e299ef/cpp/src/groupby/sort/sort_helper.cu#L188) to define its segments, rather than materializing a full column of sorted/monotonic [`group_labels`](https://github.com/rapidsai/cudf/blob/57ff6f55b9fd44e8a8e10282d3f95d5f38e299ef/cpp/src/groupby/sort/sort_helper.cu#L213). In effect, this allows us to replace a call to [`thrust::reduce_by_key`](https://github.com/rapidsai/cudf/blob/57ff6f55b9fd44e8a8e10282d3f95d5f38e299ef/cpp/src/groupby/sort/group_single_pass_reduction_util.cuh#L186) algorithm with a call to [`cub::DeviceSegmentedReduce::Reduce`](https://github.com/rapidsai/cudf/blob/7ff195677fc52ffc21e8c1060b0f270587d6995b/cpp/include/cudf/detail/reduction.cuh#L267), while eliminating the need to compute the `group_labels` column. I think this should be a more efficient algorithm, and also will require less intermediate memory allocation. Benchmarks should be performed when making this change.\r\n\r\n## Refactor internal use of indices to 2N style (match CUB)\r\n\r\nThe indexing scheme used for segmented reduction is currently \"N+1\", like how list offsets are indexed. We want to refactor this to use \"2N\" indexing. This would align with `cub::DeviceSegmentedReduce::Reduce` and permit greater flexibility in the API internals. [See discussion here](https://github.com/rapidsai/cudf/pull/9621#discussion_r796250853) for details.\r\n\r\n- @bdice: After discussion with @davidwendt, we decided this is not necessary in the short term. We can resolve this issue without changing the current implementation. The current implementation of N+1 aligns with segmented sort behavior. If there is a compelling need to change this in the future for expanded functionality, we can revisit.\r\n\r\n## Compound reductions like mean\r\n\r\nThe segmented reduction code currently supports \"simple\" reductions. Support for \"compound\" reductions is needed. This includes multi-step calculations like mean, standard deviation, or sum of squares. Non-segmented compound reductions are defined here: https://github.com/rapidsai/cudf/blob/c1638869116aae2c6dde6024394279a2fb79e685/cpp/src/reductions/compound.cuh\r\n\r\n## Fixes for output_type precision\r\n\r\n@isVoid and I filed #9988 while working on #9621 because the documentation doesn't align with the implementation for when data is cast to the output dtype relative to when the reduction is performed. This affects segmented reduction as well.\r\n\r\n## Explore rewriting `get_null_replacing_element_transformer` with nullate\r\n\r\nIt may be possible to clean up the [implementation of null element handling here](https://github.com/rapidsai/cudf/blob/7ff195677fc52ffc21e8c1060b0f270587d6995b/cpp/src/reductions/simple_segmented.cuh#L75-L85) by using [nullate](https://github.com/rapidsai/cudf/blob/c1638869116aae2c6dde6024394279a2fb79e685/cpp/include/cudf/column/column_device_view.cuh#L53).\r\n\r\n- @bdice: After discussion with @davidwendt, we decided this is not worth changing. It might eliminate one or two lines of duplicate code but doesn't offer any benefits to compile time.\r\n\r\n## Extend to more data types\r\n\r\nWe need to review the types supported by non-segmented reductions and ensure that segmented reductions support the same types. Decimal support has been requested here: https://github.com/rapidsai/cudf/issues/10417","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps4_oa73","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"> Support for \"compound\" reductions is needed.\r\n\r\nI'd suggest moving segmented (and regular) reductions to use a scheme like in groupby/rolling where every aggregation has a preprocessing/finalization steps: https://github.com/rapidsai/cudf/blob/b1ea304ec7d421c871061fdfab7f2e097fbd4a0f/cpp/include/cudf/detail/aggregation/aggregation.hpp#L161-L166","createdAt":"2022-03-15T04:48:17Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":2}}],"url":"https://github.com/rapidsai/cudf/issues/10432#issuecomment-1067560695","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5B1J94","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-04-20T21:03:06Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10432#issuecomment-1104453496","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5B1Yrb","author":{"login":"isVoid"},"authorAssociation":"CONTRIBUTOR","body":"Still in development.","createdAt":"2022-04-20T22:18:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10432#issuecomment-1104513755","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Dj3yT","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-05-21T00:10:15Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10432#issuecomment-1133477011","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5IuTub","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2022-08-19T00:13:24Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10432#issuecomment-1220098971","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5USFz_","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"After merging #12573, we can update this to use segmented reductions detail APIs like `cudf::reduction::detail::segmented_reduce`: https://github.com/rapidsai/cudf/blob/3fa081a08cb3e90d0478d0b9b22ea741539c89f4/cpp/include/cudf/detail/null_mask.cuh#L299","createdAt":"2023-02-02T16:33:32Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/10432#issuecomment-1414028543","viewerDidAuthor":false}],"createdAt":"2022-03-14T22:25:36Z","id":"I_kwDOBWUGps5FrSqe","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":28,"title":"Aggregations continuous improvement","description":"","dueOn":null},"number":10432,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}},{"content":"HEART","users":{"totalCount":1}}],"state":"OPEN","title":"[FEA] Refactors and next steps for segmented reductions","updatedAt":"2023-07-22T20:31:34Z","url":"https://github.com/rapidsai/cudf/issues/10432"}
