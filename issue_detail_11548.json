{"assignees":[],"author":{"id":"MDQ6VXNlcjEyNzI1MTEx","is_bot":false,"login":"GregoryKimball","name":"Gregory Kimball"},"body":"**Is your feature request related to a problem? Please describe.**\r\nWhile benchmarking cuDF-python, I noticed that [bench_isin](https://github.com/rapidsai/cudf/blob/65a782112f4b76941483adf17f9a30a6824f6164/python/cudf/benchmarks/API/bench_dataframe.py#L50) has low end-to-end data throughput (<10GB/s). A closer look at the profiles showed that the data is being sorted twice, first with `.sort_values()` and then as part of `drop_duplicates()`. The following profile is for a test dataframe with 1 col and 100K rows, and is uses the `isin` argument `range(1000)` in the `bench_isin` benchmark.\r\n\r\n<img width=\"851\" alt=\"image\" src=\"https://user-images.githubusercontent.com/12725111/185016040-8c8b70ab-a8fd-4cc5-8294-2fb9ea5acc5e.png\">\r\n\r\nWhen calling `isin` with a dataframe or dict argument, the profile shows two calls to `Frame.argsort`.\r\n\r\n<img width=\"841\" alt=\"image\" src=\"https://user-images.githubusercontent.com/12725111/185018010-a4e5789e-cf0a-4a7f-8291-a9fdd52adbbe.png\">\r\n\r\n\r\n\r\n\r\n\r\n**Describe the solution you'd like**\r\nFor a performance improvement, I'd like to refactor `isin` to only sort the data once. We should prefer the libcudf `unique` function to `drop_duplicates` for pre-sorted data.\r\n\r\n**Describe alternatives you've considered**\r\nn/a\r\n\r\n**Additional context**\r\nAdd any other context, code examples, or references to existing implementations about the feature request here.\r\n","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5KcCRL","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2022-09-16T02:59:14Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/11548#issuecomment-1248863307","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5Mum70","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I see an [extraneous `sort_values` call in `Column._obtain_isin_result`](https://github.com/rapidsai/cudf/blob/branch-22.12/python/cudf/cudf/core/column/column.py#L760) that can be removed, but I don't see any impact on performance locally when I make that change. Perhaps you can try that locally and see if it improves things. However, I suspect part of the problem is that [we are explicitly sorting and then unsorting the data](https://github.com/rapidsai/cudf/blob/branch-22.12/python/cudf/cudf/core/indexed_frame.py#L2072). I'd have to dig a bit deeper to understand exactly why on the previous line we are actually joining and requesting a sorted result only to unsort afterwards. I assume there's some pandas compatibility at play here, perhaps @galipremsagar or @shwina knows offhand.","createdAt":"2022-10-21T18:10:27Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"HEART","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/11548#issuecomment-1287286516","viewerDidAuthor":false}],"createdAt":"2022-08-17T01:48:17Z","id":"I_kwDOBWUGps5P7v1e","labels":[{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":null,"number":11548,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[PERF] Improve \"isin\" performance by only sorting once","updatedAt":"2022-10-21T19:07:09Z","url":"https://github.com/rapidsai/cudf/issues/11548"}
