{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently some pylibcudf APIs have default values for parameters while others do not. Defaults are a double-edged sword because while they are convenient, the underlying libcudf APIs also have defaults and the two could diverge.\r\n\r\n**Describe the solution you'd like**\r\npylibcudf APIs should decide whether they offer defaults. The two options would be to either offer no defaults and require users to provide all parameters, or offer the same defaults as libcudf, in which case it would be the responsibility of pylibcudf devs to keep those defaults in sync with libcudf. \r\n\r\n**Describe alternatives you've considered**\r\nThere isn't really any cost to the defaults in pylibcudf diverging from those in libcudf, so as long as they're documented it might be fine to have defaults for user convenience and not be overly concerned about ensuring that they remain identical to libcudf's in perpetuity.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps51y0TU","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"I think there should be no default parameters, to force the python-side caller to be fully explicit about stream and memory management.\r\n\r\nMy rationale is that since RMM objects are (deliberately) not smart pointers, there is no way to safely take ownership of an `rmm::device_buffer` from Python. Specifically, if I am passed a `device_buffer` whose memory resource is of a provenance I do not control, I cannot guarantee that I keep the memory resource alive for the lifetime of the buffer.\r\n\r\nIndeed, in RMM, we _don't even try_! \r\n\r\nhttps://github.com/rapidsai/rmm/blob/f132d4b0daa976e1ec6cbcef24f5454fe510a394/python/rmm/_lib/device_buffer.pyx#L160-L171\r\n\r\nWe just do:\r\n```cython\r\n        buf.c_obj = move(ptr)\r\n        buf.mr = get_current_device_resource()\r\n```\r\n\r\nand fingers crossed, `ptr.mr` is the same as `get_current_device_resource()`.\r\n\r\nThere's no way to work around this, so really the only safe way is to document in RMM that if taking ownership of a `device_buffer` from Python, one _must_ only do so when the buffer has been allocated via a memory resource that the python process controls. In libcudf, we can always pass a memory resource in to any allocating routines, so if we do that from the python side with a memory resource whose lifetime we control, we can match the required contract and ensure that we do things safely.\r\n\r\nRight now, everything works through happenstance.","createdAt":"2024-03-04T10:26:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15198#issuecomment-1976255700","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps51zLUU","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"I've opened https://github.com/rapidsai/rmm/issues/1492 to clarify the requirements in docs on the RMM side.","createdAt":"2024-03-04T11:17:08Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15198#issuecomment-1976349972","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps512Plc","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"Right, the mr discussion is in #14229.\r\n\r\nPlaying devil's advocate: while the pitfalls of default mrs are clear, that also makes the overall API very cumbersome when you have a libcudf API with 7 parameters (including stream/mr) of which 5 are defaulted because there are sensible choices. This would force users to also provide the other 3 in addition to stream/mr.\r\n\r\nIf we restrict the \"no defaults\" choice to only APIs then it would still allow us to make some improvements like those suggested in #15130, but if we disallowed defaults everywhere it could have additional impacts on how much syntactic sugar we can add to the pylibcudf API in a performant manner.","createdAt":"2024-03-04T17:56:43Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15198#issuecomment-1977153884","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps519uFz","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"I think I am advocating only that the wrapping of the libcudf API provides no defaults. I would alternately be happy if the `cpdef` functions took keyword defaulted arguments for stream and mr (so that one can provide, say, the mr but not the stream if one wants)","createdAt":"2024-03-05T16:04:21Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/15198#issuecomment-1979113843","viewerDidAuthor":false}],"createdAt":"2024-02-29T20:36:13Z","id":"I_kwDOBWUGps6A3mp8","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"LA_kwDOBWUGps8AAAABoeP23w","name":"pylibcudf","description":"Issues specific to the pylibcudf package","color":"e99695"}],"milestone":null,"number":15198,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Be consistent in handling of default parameter values in pylibcudf","updatedAt":"2024-05-28T23:33:46Z","url":"https://github.com/rapidsai/cudf/issues/15198"}
