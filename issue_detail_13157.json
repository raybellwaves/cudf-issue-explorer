{"assignees":[],"author":{"id":"MDQ6VXNlcjEyNzE2OTc5","is_bot":false,"login":"PointKernel","name":"Yunsong Wang"},"body":"**Is your feature request related to a problem? Please describe.**\r\n#11052 introduces the keep control option into `cudf::distinct` and makes it possible for users to perform a more efficient hash-based `drop_duplicates`. The PR uses a single hash map together with thrust algorithms to mimic the behavior of a reduction map. This whole process can be largely simplified once https://github.com/NVIDIA/cuCollections/pull/98 is ready. TODO:\r\n\r\n- [ ] Replace `static_map` + `thrust` algos with `cuco::static_reduction_map` + `cudf::sort`\r\n- [ ] Update Python bindings to use the hash-based algorithm\r\n- [ ] Investigate the performance impact with various map occupancy and sort-based algo v.s. hash-based algo\r\n- [ ] Minimize memory footprint\r\n\r\n**Describe the solution you'd like**\r\nUses a  `cuco::static_reduction_map` where the key is the row index and the value is the min/max index of equivalent rows (depending on the keep option).\r\n\r\n**Describe alternatives you've considered**\r\nWe could also take a pair of row hash value and row index as the key which performs the expensive row hash computation only once for better runtime performance. This requires more memory footprint though. To be evaluated.\r\n\r\n**Additional context**\r\n#11656 may not be required by the new reduction map implementation.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5aIEOI","author":{"login":"PointKernel"},"authorAssociation":"MEMBER","body":"cc @sleeepyjack","createdAt":"2023-04-17T20:46:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13157#issuecomment-1512063880","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5cnvra","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"@PointKernel Let's discuss this -- I'm targeting #11656 for 23.06 and it also affects downstream work like #13244. I am surprised that the new cuco work would eliminate the need for a stable/unstable path here. The stability is with respect to key collection, not key insertion (that's controlled by \"keep\" behavior). Can you give more context about the ordering of the keys that are used to gather distinct results?","createdAt":"2023-05-19T02:38:42Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13157#issuecomment-1553922778","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5sQBxL","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"> @PointKernel Let's discuss this -- I'm targeting #11656 for 23.06 and it also affects downstream work like #13244. I am surprised that the new cuco work would eliminate the need for a stable/unstable path here. The stability is with respect to key collection, not key insertion (that's controlled by \"keep\" behavior). Can you give more context about the ordering of the keys that are used to gather distinct results?\r\n\r\nThe current `stable_distinct` implementation would still be needed I think. This approach using the proposed cuco `insert_or_apply` interface in https://github.com/NVIDIA/cuCollections/pull/384 (which supersedes https://github.com/NVIDIA/cuCollections/pull/98) would avoid the need for the thrust-based post-processing of the result that is currently done in the `keep != ANY` case.","createdAt":"2023-11-17T10:45:41Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/13157#issuecomment-1816140875","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5tk64L","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"Just to note, I would like any putative API that exposes the `insert_or_apply` interface in libcudf to allow user-provided binops. Any value type (within the usual cuco constraints) with monoid structure overlaid should be allowable. This would allow, for example, implementation of `value_counts` (count multiplicity of unique rows) which is needed in cudf's `Index.union` implementation (or will be soon), by using `(0, +)`. Right now, we must compute a groupby over the rows and then compute groupby.size() on a dummy column to deduce multiplicity\r\n\r\nAs noted, the distinct flavours use `(MAX_INT, min)` (for keep=first), `(MIN_INT, max)` (for keep=last). ","createdAt":"2023-12-04T11:00:42Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/13157#issuecomment-1838394891","viewerDidAuthor":false}],"createdAt":"2023-04-17T20:43:29Z","id":"I_kwDOBWUGps5jp8HI","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMzIyMjUyNjE3","name":"Performance","description":"Performance related issue","color":"C2E0C6"}],"milestone":{"number":18,"title":"Refactor using cuco containers","description":"","dueOn":null},"number":13157,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Improve `cudf::distinct` with cuco reduction map","updatedAt":"2024-02-23T18:02:04Z","url":"https://github.com/rapidsai/cudf/issues/13157"}
