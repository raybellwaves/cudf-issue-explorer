{"assignees":[],"author":{"id":"MDQ6VXNlcjQ4Mzc1NzE=","is_bot":false,"login":"VibhuJawa","name":"Vibhu Jawa"},"body":"**Is your feature request related to a problem? Please describe.**\r\nI would like to do group by  mode aggregation. \r\n\r\n**Describe the solution you'd like**\r\n```python\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\ndf =cudf.DataFrame({'col_1':[0,0,0,0,1,1,1,1],\r\n                   'col_2':[0,10,20,20,30,40,10,20]})\r\ndf.groupby(['col_1']).agg({'col_2':'mode')})\r\n```\r\n\r\n**Additional context**\r\nIn pandas we achieve this by doing below:\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\ndf = pd.DataFrame({'col_1':[0,0,0,0,1,1,1,1],\r\n                   'col_2':[0,10,20,20,30,40,10,20]})\r\ndf.groupby(['col_1']).agg({'col_2':lambda s:s.mode().get(0)})\r\n```\r\n```python\r\n\tcol_2\r\ncol_1\t\r\n0\t20\r\n1\t10\r\n```\r\n\r\n\r\nIf we do the same in cudf we get:\r\n\r\n```python\r\nimport cudf\r\nimport numpy as np\r\ndf = cudf.DataFrame({'col_1':[0,0,0,0,1,1,1,1],\r\n                   'col_2':[0,10,20,20,30,40,10,20]})\r\ndf.groupby(['col_1']).agg({'col_2':lambda s:s.mode().get(0)})\r\n```\r\n```\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-4-88da2c242150> in <module>\r\n      3 df = cudf.DataFrame({'col_1':[0,0,0,0,1,1,1,1],\r\n      4                    'col_2':[0,10,20,20,30,40,10,20]})\r\n----> 5 df.groupby(['col_1']).agg({'col_2':lambda s:s.mode().get(0)})\r\n\r\n/nvme/0/vjawa/conda/envs/cudf_dev_encoding_branch/lib/python3.7/contextlib.py in inner(*args, **kwds)\r\n     72         def inner(*args, **kwds):\r\n     73             with self._recreate_cm():\r\n---> 74                 return func(*args, **kwds)\r\n     75         return inner\r\n     76 \r\n\r\n/nvme/0/vjawa/vjawa_cudf/cudf/python/cudf/cudf/core/groupby/groupby.py in agg(self, func)\r\n    168         # a Float64Index, while Pandas returns an Int64Index\r\n    169         # (GH: 6945)\r\n--> 170         result = self._groupby.aggregate(self.obj, normalized_aggs)\r\n    171 \r\n    172         result = cudf.DataFrame._from_table(result)\r\n\r\n/nvme/0/vjawa/vjawa_cudf/cudf/python/cudf/cudf/_lib/groupby.pyx in cudf._lib.groupby.GroupBy.aggregate()\r\n\r\n/nvme/0/vjawa/vjawa_cudf/cudf/python/cudf/cudf/_lib/aggregation.pyx in cudf._lib.aggregation.make_aggregation()\r\n\r\n<ipython-input-4-88da2c242150> in <lambda>(s)\r\n      3 df = cudf.DataFrame({'col_1':[0,0,0,0,1,1,1,1],\r\n      4                    'col_2':[0,10,20,20,30,40,10,20]})\r\n----> 5 df.groupby(['col_1']).agg({'col_2':lambda s:s.mode().get(0)})\r\n\r\nAttributeError: type object 'cudf._lib.aggregation._AggregationFactory' has no attribute 'mode'\r\n```\r\n","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDc4Njc0OTc5Nw==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-02-26T16:26:16Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7185#issuecomment-786749797","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDg0OTgxMTgyMg==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-05-27T17:31:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7185#issuecomment-849811822","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps415q2I","author":{"login":"kevinbird15"},"authorAssociation":"NONE","body":"I am seeing something similar to this for powers as well: \r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-28-56dd126ffdea> in <module>\r\n----> 1 book_train_df.groupby(['time_id'], as_index=False).agg({'log_return1':[realized_volatility]})\r\n\r\n/opt/conda/lib/python3.7/contextlib.py in inner(*args, **kwds)\r\n     72         def inner(*args, **kwds):\r\n     73             with self._recreate_cm():\r\n---> 74                 return func(*args, **kwds)\r\n     75         return inner\r\n     76 \r\n\r\n/opt/conda/lib/python3.7/site-packages/cudf/core/groupby/groupby.py in agg(self, func)\r\n    179         # a Float64Index, while Pandas returns an Int64Index\r\n    180         # (GH: 6945)\r\n--> 181         result = self._groupby.aggregate(self.obj, normalized_aggs)\r\n    182 \r\n    183         result = cudf.DataFrame._from_table(result)\r\n\r\ncudf/_lib/groupby.pyx in cudf._lib.groupby.GroupBy.aggregate()\r\n\r\ncudf/_lib/aggregation.pyx in cudf._lib.aggregation.make_aggregation()\r\n\r\n<ipython-input-27-404c0c674354> in realized_volatility(series)\r\n      8 def realized_volatility(series):\r\n      9     #series=list(series)\r\n---> 10     return np.sqrt(np.sum(series**2))\r\n\r\nTypeError: unsupported operand type(s) for ** or pow(): 'type' and 'int'\r\n```\r\n\r\nMy version is '21.06.01+2.g101fc0fda4' (from kaggle)","createdAt":"2021-08-24T04:17:37Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7185#issuecomment-904310152","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps415q8a","author":{"login":"kevinbird15"},"authorAssociation":"NONE","body":"(in case the args from %debug are helpful)\r\n![image](https://user-images.githubusercontent.com/7451178/130555017-e61f3223-0859-4693-80eb-bf0d9d0daacf.png)\r\n","createdAt":"2021-08-24T04:18:39Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/7185#issuecomment-904310554","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps416-22","author":{"login":"beckernick"},"authorAssociation":"MEMBER","body":"If you're using a custom aggregation function (`realized_volatility`), you'll want to use the `groupby.apply` API. Note that this API will operate serially on a per group basis, so it will not be performant if you have many small groups.\r\n\r\nIt may be possible to convert your function into a combination of built-in operations, which would be high performance.\r\n\r\n```python\r\ndf[\"squared\"] = df.col.pow(2)\r\ndf.groupby(['key']).squared.sum() ** 0.5\r\n```\r\n\r\nEDIT: This would be higher performance in pandas as well, if it accomplishes the desired goal","createdAt":"2021-08-24T13:42:39Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/7185#issuecomment-904654262","viewerDidAuthor":false}],"createdAt":"2021-01-21T16:50:41Z","id":"MDU6SXNzdWU3OTEzMjQ4Mzc=","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":null,"number":7185,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA]Groupby Mode Aggregation","updatedAt":"2024-02-23T18:43:13Z","url":"https://github.com/rapidsai/cudf/issues/7185"}
