{"assignees":[{"id":"MDQ6VXNlcjMxOTA0MDU=","login":"shwina","name":"Ashwin Srinath"}],"author":{"id":"MDQ6VXNlcjg0NTczODg=","is_bot":false,"login":"beckernick","name":"Nick Becker"},"body":"Currently, we can't initialize [woodwork](https://github.com/alteryx/woodwork) on a cudf.pandas dataframe. This is a core step in getting things working with [featuretools](https://github.com/alteryx/featuretools) (woodwork provides the underlying type system and metadata management).\r\n\r\nDuring the `init` call, we end up with a raw cuDF dataframe somewhere. It's not immediately clear why from a quick debug. Woodwork is storing a weak reference to the dataframe ([here,](https://github.com/alteryx/woodwork/blob/ff80e32362afb8067a4b5225a21834c762170db7/woodwork/table_accessor.py#L393-L395) and [here](https://github.com/alteryx/woodwork/blob/ff80e32362afb8067a4b5225a21834c762170db7/woodwork/table_accessor.py#L46)) but cudf.pandas correctly operates with weakref (in general). Perhaps it's something about the way woodwork is [injecting itself into the pandas object during import](https://github.com/alteryx/woodwork/blob/ff80e32362afb8067a4b5225a21834c762170db7/woodwork/__init__.py#L27-L36)\r\n\r\n\r\n```\r\nmamba create -n featuretools -c rapidsai-nightly -c conda-forge -c nvidia cudf=23.10 python=3.10 cuda-version=11.8 featuretools jupyterlab\r\n```\r\n\r\n```python\r\n%load_ext cudf.pandas\r\nimport pandas as pd\r\nimport woodwork as ww\r\n\r\ndf = pd.read_csv(\"https://oss.alteryx.com/datasets/online-retail-logs-2018-08-28.csv\")\r\ndf.ww.init(name='retail')\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nInput In [2], in <cell line: 5>()\r\n      2 import woodwork as ww\r\n      4 df = pd.read_csv(\"https://oss.alteryx.com/datasets/online-retail-logs-2018-08-28.csv\")\r\n----> 5 df.ww.init(name='retail')\r\n\r\nFile ~/miniconda3/envs/featuretools/lib/python3.10/site-packages/woodwork/table_accessor.py:101, in WoodworkTableAccessor.init(self, **kwargs)\r\n     49 def init(self, **kwargs):\r\n     50     \"\"\"Initializes Woodwork typing information for a DataFrame with a partial schema.\r\n     51 \r\n     52     Logical type priority:\r\n   (...)\r\n     99             Any errors resulting from skipping validation with invalid inputs may not be easily understood.\r\n    100     \"\"\"\r\n--> 101     self.init_with_partial_schema(**kwargs)\r\n\r\nFile ~/miniconda3/envs/featuretools/lib/python3.10/site-packages/woodwork/table_accessor.py:237, in WoodworkTableAccessor.init_with_partial_schema(self, schema, index, time_index, logical_types, ignore_columns, already_sorted, name, semantic_tags, table_metadata, column_metadata, use_standard_tags, column_descriptions, column_origins, null_invalid_values, validate, **kwargs)\r\n    234         existing_use_standard_tags[col_name] = col_schema.use_standard_tags\r\n    236 # overwrite schema parameters with specified kwargs\r\n--> 237 logical_types = _infer_missing_logical_types(\r\n    238     self._dataframe,\r\n    239     logical_types,\r\n    240     existing_logical_types,\r\n    241     ignore_columns,\r\n    242     null_invalid_values=null_invalid_values,\r\n    243 )\r\n    244 column_descriptions = {\r\n    245     **existing_col_descriptions,\r\n    246     **(column_descriptions or {}),\r\n    247 }\r\n    248 column_metadata = {**existing_col_metadata, **(column_metadata or {})}\r\n\r\nFile ~/miniconda3/envs/featuretools/lib/python3.10/site-packages/woodwork/table_accessor.py:1851, in _infer_missing_logical_types(dataframe, force_logical_types, existing_logical_types, ignore_columns, null_invalid_values)\r\n   1849 elif name is None and len(dataframe.columns) == 1:\r\n   1850     series = dataframe.iloc[:, 0]\r\n-> 1851 parsed_logical_types[name] = _get_column_logical_type(\r\n   1852     series,\r\n   1853     logical_type,\r\n   1854     name,\r\n   1855 )\r\n   1856 updated_series = parsed_logical_types[name].transform(\r\n   1857     series,\r\n   1858     null_invalid_values=null_invalid_values,\r\n   1859 )\r\n   1860 if updated_series is not series:\r\n   1861     # NotImplementedError thrown by dask when attempting to re-initialize\r\n   1862     # data after being assigned a numeric column name\r\n\r\nFile ~/miniconda3/envs/featuretools/lib/python3.10/site-packages/woodwork/utils.py:419, in _get_column_logical_type(series, logical_type, name)\r\n    417     return _parse_logical_type(logical_type, name)\r\n    418 else:\r\n--> 419     return ww.type_system.infer_logical_type(series)\r\n\r\nFile ~/miniconda3/envs/featuretools/lib/python3.10/site-packages/woodwork/type_sys/type_system.py:378, in TypeSystem.infer_logical_type(self, series)\r\n    376     series = series.to_pandas()\r\n    377 else:\r\n--> 378     raise ValueError(\r\n    379         f\"Unsupported series type `{type(series)}`\",\r\n    380     )  # pragma: no cover\r\n    382 # For dask or spark collections, unknown type special case comes\r\n    383 # *after* head calls to avoid evaluating a potentially large\r\n    384 # dataset\r\n    385 if series.count() == 0:\r\n\r\nValueError: Unsupported series type `<class 'cudf.core.series.Series'>`\r\n```\r\n\r\n```\r\nconda list | grep \"cudf\\|featuretools\\|pandas\"\r\n# packages in environment at /home/nicholasb/miniconda3/envs/featuretools:\r\ncudf                      23.12.0a703              pypi_0    pypi\r\nfeaturetools              1.28.0             pyhd8ed1ab_0    conda-forge\r\nlibcudf                   23.12.00a703    cuda11_231116_g53127de4d9_703    rapidsai-nightly\r\npandas                    1.5.3                    pypi_0    pypi\r\n```","closed":false,"closedAt":null,"comments":[],"createdAt":"2023-11-16T19:31:56Z","id":"I_kwDOBWUGps53ESED","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"},{"id":"LA_kwDOBWUGps8AAAABlj4eYg","name":"cudf.pandas","description":"Issues specific to cudf.pandas","color":"984DFB"}],"milestone":{"number":36,"title":"cudf.pandas API coverage","description":"","dueOn":null},"number":14430,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Can't initialize woodwork on a cudf.pandas dataframe (featuretools integration)","updatedAt":"2024-05-16T05:09:14Z","url":"https://github.com/rapidsai/cudf/issues/14430"}
