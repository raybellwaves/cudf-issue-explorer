{"assignees":[],"author":{"id":"MDQ6VXNlcjExMjY5ODE=","is_bot":false,"login":"wence-","name":"Lawrence Mitchell"},"body":"**Describe the bug**\r\n\r\nFunctions in the pandas source tree which do not have a matching counterpart in the cudf source tree are proxied with a `FunctionProxy` object whose `_fsproxy_fast` attribute is an `_Unusable` object.\r\n\r\nUnfortunately, although accessing an `_Unusuable` object in a fast-slow chained method call fails, it does so too late and already provokes slow-to-fast and fast-to-slow copies. This ends up breaking the link between the fast and slow types inside a proxied object.\r\n\r\nThis raises its head particularly in the pandas test suite where there are functions that are used to parameterise over (for example) `iloc` vs `loc` indexing, like `pandas._testing.iloc`.\r\n\r\nTo see the problem consider the following:\r\n\r\n```python\r\nimport cudf.pandas\r\ncudf.pandas.install()\r\n\r\nimport pandas as pd\r\n\r\ns = pd.Series(range(10))\r\ns._fsproxy_state # => FAST\r\n# pd._testing.iloc has no matching fast counterpart, so this function-call will provoke\r\n# a fast to slow copy\r\nindexer = pd._testing.iloc(s)\r\ns._fsproxy_state # => SLOW\r\n# We want setitem to keep the object as  slow,\r\n# but this is a `_FastSlowAttribute` so it provokes (if it can) a slow-to-fast copy\r\ngetattr(indexer, \"__setitem__\")\r\ns._fsproxy_state # => FAST\r\n# Now we are in an inconsistent state.\r\n```\r\n\r\nIn `_transform_arg` we have a carveout early exit if the fast or slow attribute we're asking for is  `_Unusable`, but not if it is an instance of `_Unusable`.\r\n\r\nThis patch helps a bit:\r\n```patch\r\ndiff --git a/python/cudf/cudf/pandas/fast_slow_proxy.py b/python/cudf/cudf/pandas/fast_slow_proxy.py\r\nindex e811ba1351..9d07d236bb 100644\r\n--- a/python/cudf/cudf/pandas/fast_slow_proxy.py\r\n+++ b/python/cudf/cudf/pandas/fast_slow_proxy.py\r\n@@ -915,7 +915,7 @@ def _transform_arg(\r\n \r\n     if isinstance(arg, (_FastSlowProxy, _FastSlowProxyMeta, _FunctionProxy)):\r\n         typ = getattr(arg, attribute_name)\r\n-        if typ is _Unusable:\r\n+        if typ is _Unusable or isinstance(typ, _Unusable):\r\n             raise Exception(\"Cannot transform _Unusable\")\r\n         return typ\r\n     elif isinstance(arg, types.ModuleType) and attribute_name in arg.__dict__:\r\n```\r\n\r\nBut is observed to cause the pandas test suite run to take significantly longer (indicating, probably, more fast-to-slow transfers than necessary).\r\n\r\nNote that this change works for `pd._testing.iloc` but _not_ `pd._testing.setitem` which is just the identity function, since wrapping the identity function produces a new function which is _not_ the identity.","closed":false,"closedAt":null,"comments":[],"createdAt":"2024-04-08T09:44:10Z","id":"I_kwDOBWUGps6E9mNF","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NTk=","name":"bug","description":"Something isn't working","color":"d73a4a"}],"milestone":null,"number":15480,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[BUG] Incorrect proxying of functions with no matching fast counterpart in cudf.pandas","updatedAt":"2024-04-08T09:44:11Z","url":"https://github.com/rapidsai/cudf/issues/15480"}
