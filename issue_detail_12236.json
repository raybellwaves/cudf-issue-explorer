{"assignees":[],"author":{"id":"MDQ6VXNlcjE1MzgxNjU=","is_bot":false,"login":"vyasr","name":"Vyas Ramasubramani"},"body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently various cuDF APIs (examples include `merge`, `groupby`, and `drop_duplicates`) rely on libcudf APIs that do not promise stable ordering. libcudf will not (and should not) ever be forced to make such guarantees since requiring ordering hamstrings potential optimizations and can always be achieved by calling code with the addition of suitable index columns and sorts. However, the requirements of cuDF Python are different. In particular, for pandas users transitioning to cuDF the lack of stability may be confusing at best and workflow-breaking at worst. Since there are multiple APIs that may exhibit this API divergence, and these APIs may be invoked many times in any particular piece of code, the responsibility should not fall to users to wrap those calls in appropriate sorting logic every time.\r\n\r\n**Describe the solution you'd like**\r\ncuDF should leverage the options framework introduced in #11193 to add a new option `stable_sort` that, when True, will change the behavior of all cuDF APIs to guarantee that the input order will be preserve. The default value should be `False` to force users to opt in to performance-inhibiting changes. The implementation of this option will depend on the API; for instance, with `merge` it will require consistent ordering in both tables, whereas for `drop_duplicates` it only affects one. I would recommend implementing the option as `_stable_sort` at first to indicate that it is internal, then adding support to one algorithm at a time, then exposing the option publicly as `stable_sort` once we have sufficient algorithmic coverage.\r\n\r\n**Describe alternatives you've considered**\r\nWe have rejected similar requests in the past, in part because of the lack of clarity on how this should be handled in cuDF Python vs. libcudf, as well as because we did not wish to slow down all calls to these APIs by default. The use of `cudf.options` at the Python level provides an elegant and well-scoped solution to the problem that avoids these problems.\r\n\r\n**Additional context**\r\nAddressing this issue will close #1781 and #5286.","closed":false,"closedAt":null,"comments":[{"id":"IC_kwDOBWUGps5XiYLS","author":{"login":"wence-"},"authorAssociation":"CONTRIBUTOR","body":"FWIW, I think we should also consider the (ongoing) maintenance cost of implementing this scheme. We would double the test-time run in a naive setup since we'd need to do everything twice (once with, once without order preservation).\r\n\r\nI read through a bunch of the past discussions, I didn't see really any compelling use-cases for order-preserving API that would not be better served by using algorithmic approaches at the user-level that don't rely on order-preservation. I agree that sometimes you have to think a bit harder, but ...","createdAt":"2023-03-14T18:34:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12236#issuecomment-1468629714","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5XqsDG","author":{"login":"vyasr"},"authorAssociation":"CONTRIBUTOR","body":"I'm assuming this comment was triggered by the discussion on https://github.com/rapidsai/cudf/pull/12939#discussion_r1136096460. I think it boils down to what degree we promise to match pandas, which I think will vary depending on how people use cudf. My 2c: in the cases where we are truly claiming to be a drop-in replacement, that includes ordering guarantees (even ones that pandas may have introduced unintentionally but is now maintaining in perpetuity anyway).","createdAt":"2023-03-15T20:39:45Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12236#issuecomment-1470808262","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5eIRoo","author":{"login":"bdice"},"authorAssociation":"CONTRIBUTOR","body":"FWIW, #11656 made `drop_duplicates` have stable ordering. That removes part of the scope of the issue (#5286 is resolved). ðŸš€","createdAt":"2023-06-06T18:04:13Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12236#issuecomment-1579227688","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5feKJe","author":{"login":"galipremsagar"},"authorAssociation":"CONTRIBUTOR","body":"I see that Vyas has already covered `groupby` in this issue. So making note here that a python side solution to guarantee order with `sort=False` in `groupby` is being added for the time being: https://github.com/rapidsai/cudf/pull/13551, this will kick in only when the pandas compatibility(`mode.pandas_compatible`) mode option is enabled. ","createdAt":"2023-06-21T22:04:50Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12236#issuecomment-1601741406","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5gpzru","author":{"login":"galipremsagar"},"authorAssociation":"CONTRIBUTOR","body":"Just FYI, https://github.com/rapidsai/cudf/pull/13657 is adding a workaround for non-deterministic behavior in `MultiIndex.loc` because of join/merge.","createdAt":"2023-07-05T11:30:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/12236#issuecomment-1621572334","viewerDidAuthor":false}],"createdAt":"2022-11-23T18:41:10Z","id":"I_kwDOBWUGps5XJ_AH","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQxMjEz","name":"cuDF (Python)","description":"Affects Python cuDF API.","color":"1d76db"}],"milestone":{"number":5,"title":"Pandas API Alignment and Coverage","description":"","dueOn":null},"number":12236,"projectCards":[],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] Add a new cuDF option stable_sort that provides ordering guarantees for otherwise nondeterministic APIs","updatedAt":"2024-05-16T05:12:38Z","url":"https://github.com/rapidsai/cudf/issues/12236"}
