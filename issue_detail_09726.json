{"assignees":[],"author":{"id":"MDQ6VXNlcjMwMTk2NjU=","is_bot":false,"login":"jakirkham","name":""},"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nIt would be useful to have a `pack` function to merge multiple `device_buffer`s into a single `device_buffer`. This is helpful in situations where having one large `device_buffer` to read from is more performant. However it ultimately consists of many smaller data segments that would need to be merged together. Example use cases include sending data with UCX and spilling data from device to host.\r\n\r\nSimilarly it would be useful to have an `unpack` function to split a `device_buffer` into multiple `device_buffer`s. This is helpful in situations where having one large `device_buffer` to write into is more performant. However it ultimately consists of many smaller data segments that may need to be freed at different times. Example use cases include receiving data with UCX and unspilling data from host to device.\r\n\r\n**Describe the solution you'd like**\r\n\r\nFor `pack` it would be nice if it simply takes several `device_buffer`s in `vector` form and return a single one. Additionally it would be nice if `pack` could recognize when `device_buffer`s are contiguous in memory and avoid a copy. Though admittedly this last part is tricky (maybe less so if `unpack` is used regularly?). If we allow `pack` to change the order (to benefit from contiguous memory for example), we may want additional information about where the data segments live in the larger `device_buffer`.\r\n\r\nFor `unpack` it would be nice if it takes a single `device_buffer` and `size_t`s in `vector` form to split and return a `vector` of multiple `device_buffer`s. Additionally it would be nice if `unpack` did not perform any copies. Hopefully that is straightforward, but there may be things I'm not understanding.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nOne might consider using variadics in C++ for the arguments. While nice at the C++ level, this seems tricky to use from the Cython and Python levels. Hence the suggestion to just use `vector`.\r\n\r\n`pack` itself could be implemented by a user simply allocating a larger buffer and copying over. Would be nice to avoid the extra allocation when possible though (which may require knowledge that RMM has about the allocations).\r\n\r\n**Additional context**\r\n\r\nHaving `unpack` in particular would be helpful for aggregated receives. A natural extension of this would be to have `pack` for aggregated sends. All-in-all this should allow transmitting a larger amount of data at once with UCX and thus benefiting from this use case it is more honed for. PR  ( https://github.com/dask/distributed/pull/3453 ) provides a WIP implementation of aggregated receives for context.\r\n\r\nAlso having `pack` would be useful when spilling several `device_buffer`s from device to host as it would allow us to pack them into one `device_buffer` before transferring ( https://github.com/rapidsai/dask-cuda/issues/250 ). Having `unpack` would help us break up the allocation whenever the object is unspilled.\r\n\r\nThis need has also come up in downstream contexts ( https://github.com/rapidsai/cudf/issues/3793 ). Maybe they would benefit from an upstream solution as well?","closed":false,"closedAt":null,"comments":[{"id":"MDEyOklzc3VlQ29tbWVudDU5MzE1NzcxOA==","author":{"login":"jakirkham"},"authorAssociation":"MEMBER","body":"As to `pack`, maybe these [CUDA Virtual Memory Management APIs]( https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html ) (pointed out by Cory in a related context) would be useful?","createdAt":"2020-03-01T22:55:22Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-593157718","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5MzQwMzM5Ng==","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"This functionality is kind of outside the scope of RMM. The direction we'd like to go with RMM is really to just be as simple as possible by providing a set of resources, the tools to get/set the default resource, and containers like `device_buffer/device_vector` that work with resources.\r\n\r\nThis kind of pack or concatenate functionality is really more the wheelhouse of a consumer of RMM like cuDF.\r\n\r\nIn cuDF, this is just a `concatenate`. https://github.com/rapidsai/cudf/pull/4224\r\n\r\n","createdAt":"2020-03-02T13:32:30Z","includesCreatedEdit":true,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-593403396","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDU5MzQ4MDMyMg==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"> In cuDF, this is just a concatenate. rapidsai/cudf#4224\r\n\r\nThat imposes a lot of challenges in order to construct your data in a way to allow using concatenate and then being able to unpack it cleanly.\r\n\r\nMaybe it's a new API that could live in cuDF, but really we're looking for some API that takes `vector<device_buffer>` and returns us a `device_buffer` along with some form of metadata to then be able to \"unpack\" it back into a `vector<device_buffer>`.\r\n\r\nThis is along similar lines as https://github.com/rapidsai/cudf/issues/3793 but is more generalized than `cudf::table_view` as this could be reused in a lot of non-cudf places.","createdAt":"2020-03-02T16:10:10Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-593480322","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3OTk5NjM5Ng==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been marked rotten due to no recent activity in the past 90d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-02-16T17:29:38Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-779996396","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc3OTk5NjY5Mg==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been marked stale due to no recent activity in the past 30d. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be marked rotten if there is no activity in the next 60d.","createdAt":"2021-02-16T17:30:01Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-779996692","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MDE4OTg5Nw==","author":{"login":"harrism"},"authorAssociation":"MEMBER","body":"Seems like this issue should be moved to libcudf.","createdAt":"2021-02-16T23:42:33Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-780189897","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MDIyMDU5Mw==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"> Seems like this issue should be moved to libcudf.\r\n\r\nI think we had this in RMM as opposed to libcudf because we wanted a place more general purpose than libcudf. I.E. Dask/Distributed would possibly be interested in using this for packing/unpacking buffers in communication, but cuDF is way too bulky of a dependency for them.","createdAt":"2021-02-17T01:03:19Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"THUMBS_UP","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-780220593","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MDU5OTEyNA==","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"> > Seems like this issue should be moved to libcudf.\r\n> \r\n> I think we had this in RMM as opposed to libcudf because we wanted a place more general purpose than libcudf. I.E. Dask/Distributed would possibly be interested in using this for packing/unpacking buffers in communication, but cuDF is way too bulky of a dependency for them.\r\n\r\nSure, but RMM isn't a catch-all for stuff we don't want to put into libcudf. It muddies the single responsibility principle to start putting random kernels into an allocator and container library (which currently has no kernels). ","createdAt":"2021-02-17T14:37:34Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-780599124","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MDY0NDQ0NA==","author":{"login":"kkraus14"},"authorAssociation":"COLLABORATOR","body":"Yup agreed. This felt like it was in the gray area of somewhat related to memory management so the issue was raised here, but happy to defer it to somewhere else, but cuDF is too large of a dependency unfortunately.","createdAt":"2021-02-17T15:39:46Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-780644444","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDc4MDczOTQxMg==","author":{"login":"jakirkham"},"authorAssociation":"MEMBER","body":"I think `cupy.concatenate` would also work here. Not sure if that is too large of a dependency for this use case (or if we are looking for a C++ operation too)","createdAt":"2021-02-17T17:59:04Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-780739412","viewerDidAuthor":false},{"id":"MDEyOklzc3VlQ29tbWVudDgwMzAyNzMzNQ==","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-30d` due to no recent activity in the past 30 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed. This issue will be labeled `inactive-90d` if there is no activity in the next 60 days.","createdAt":"2021-03-19T18:26:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-803027335","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps46AKd5","author":{"login":"github-actions"},"authorAssociation":"NONE","body":"This issue has been labeled `inactive-90d` due to no recent activity in the past 90 days. Please close this issue if no further response or action is needed. Otherwise, please respond with a comment indicating any updates or changes to the original issue and/or confirm this issue still needs to be addressed.","createdAt":"2021-11-18T18:01:29Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-973121401","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps46BMtp","author":{"login":"jrhemstad"},"authorAssociation":"CONTRIBUTOR","body":"https://github.com/NVIDIA/cub/pull/359 would be the right way to do this now. ","createdAt":"2021-11-18T23:11:02Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-973392745","viewerDidAuthor":false},{"id":"IC_kwDOBWUGps5SWGl4","author":{"login":"jakirkham"},"authorAssociation":"MEMBER","body":"FYI PR ( https://github.com/NVIDIA/cub/pull/359 ) landed. Looks like this will be part of CUB [2.1.0]( https://github.com/NVIDIA/cub/milestone/10 )","createdAt":"2023-01-13T09:21:31Z","includesCreatedEdit":false,"isMinimized":false,"minimizedReason":"","reactionGroups":[{"content":"ROCKET","users":{"totalCount":1}}],"url":"https://github.com/rapidsai/cudf/issues/9726#issuecomment-1381525880","viewerDidAuthor":false}],"createdAt":"2020-03-01T22:37:33Z","id":"MDU6SXNzdWUxMDU3ODc5Mjg0","labels":[{"id":"MDU6TGFiZWw1OTk2MjY1NjE=","name":"feature request","description":"New feature or request","color":"a2eeef"},{"id":"MDU6TGFiZWwxMDEzOTg3MzUy","name":"0 - Backlog","description":"In queue waiting for assignment","color":"d4c5f9"},{"id":"MDU6TGFiZWwxMTM5NzQwNjY2","name":"libcudf","description":"Affects libcudf (C++/CUDA) code.","color":"c5def5"}],"milestone":{"number":25,"title":"Helps libcudf C++ integrations","description":"","dueOn":null},"number":9726,"projectCards":[{"project":{"name":"Feature Planning"},"column":{"name":"Needs prioritizing"}}],"projectItems":[],"reactionGroups":[],"state":"OPEN","title":"[FEA] `pack`/`unpack` functions to merge/split (multiple) `device_buffer`(s)","updatedAt":"2023-01-13T09:21:31Z","url":"https://github.com/rapidsai/cudf/issues/9726"}
